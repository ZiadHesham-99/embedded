
INTRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000029ae  00002a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000020b8  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e0a  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000058ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000077e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000086d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000095e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a03b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <main>
      7a:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <INTERRUPT_u8GlobalInterruptControl>:
#include "INTERRUPT_int.h"
#include "../../LIB/bitmath.h"
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
u8 INTERRUPT_u8GlobalInterruptControl(u8 Copy_u8Status)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <INTERRUPT_u8GlobalInterruptControl+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <INTERRUPT_u8GlobalInterruptControl+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     b44:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Status)
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	69 f0       	breq	.+26     	; 0xb72 <INTERRUPT_u8GlobalInterruptControl+0x3c>
     b58:	2b 81       	ldd	r18, Y+3	; 0x03
     b5a:	3c 81       	ldd	r19, Y+4	; 0x04
     b5c:	21 30       	cpi	r18, 0x01	; 1
     b5e:	31 05       	cpc	r19, r1
     b60:	81 f4       	brne	.+32     	; 0xb82 <INTERRUPT_u8GlobalInterruptControl+0x4c>
	{
	case ENABLE: SREG_reg |=(1<<7);break;
     b62:	af e5       	ldi	r26, 0x5F	; 95
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	ef e5       	ldi	r30, 0x5F	; 95
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	8c 93       	st	X, r24
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <INTERRUPT_u8GlobalInterruptControl+0x50>
	case DISABLE: SREG_reg &= ~(1<<7);break;
     b72:	af e5       	ldi	r26, 0x5F	; 95
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef e5       	ldi	r30, 0x5F	; 95
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8f 77       	andi	r24, 0x7F	; 127
     b7e:	8c 93       	st	X, r24
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <INTERRUPT_u8GlobalInterruptControl+0x50>
	default:Local_u8ErrStatus = RT_NOK;break;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     b86:	89 81       	ldd	r24, Y+1	; 0x01

}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <INTERRUPT_u8Enable>:
u8 INTERRUPT_u8Enable(u8 Copy_u8IntNo)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <INTERRUPT_u8Enable+0x6>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <INTERRUPT_u8Enable+0x8>
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     ba4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3c 83       	std	Y+4, r19	; 0x04
     bae:	2b 83       	std	Y+3, r18	; 0x03
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	c1 f0       	breq	.+48     	; 0xbea <INTERRUPT_u8Enable+0x54>
     bba:	2b 81       	ldd	r18, Y+3	; 0x03
     bbc:	3c 81       	ldd	r19, Y+4	; 0x04
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	11 f1       	breq	.+68     	; 0xc08 <INTERRUPT_u8Enable+0x72>
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	69 f5       	brne	.+90     	; 0xc26 <INTERRUPT_u8Enable+0x90>
	{
	case INT_0:SREG_reg |=(1<<7);GICR_reg |=(1<<6) ; break;
     bcc:	af e5       	ldi	r26, 0x5F	; 95
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ef e5       	ldi	r30, 0x5F	; 95
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	8c 93       	st	X, r24
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 64       	ori	r24, 0x40	; 64
     be6:	8c 93       	st	X, r24
     be8:	20 c0       	rjmp	.+64     	; 0xc2a <INTERRUPT_u8Enable+0x94>
	case INT_1:SREG_reg |=(1<<7);GICR_reg |=(1<<7) ; break;
     bea:	af e5       	ldi	r26, 0x5F	; 95
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ef e5       	ldi	r30, 0x5F	; 95
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 68       	ori	r24, 0x80	; 128
     bf6:	8c 93       	st	X, r24
     bf8:	ab e5       	ldi	r26, 0x5B	; 91
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	eb e5       	ldi	r30, 0x5B	; 91
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	8c 93       	st	X, r24
     c06:	11 c0       	rjmp	.+34     	; 0xc2a <INTERRUPT_u8Enable+0x94>
	case INT_2:SREG_reg |=(1<<7);GICR_reg |=(1<<5) ; break;
     c08:	af e5       	ldi	r26, 0x5F	; 95
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ef e5       	ldi	r30, 0x5F	; 95
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	8c 93       	st	X, r24
     c16:	ab e5       	ldi	r26, 0x5B	; 91
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	eb e5       	ldi	r30, 0x5B	; 91
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	80 62       	ori	r24, 0x20	; 32
     c22:	8c 93       	st	X, r24
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <INTERRUPT_u8Enable+0x94>
	default:Local_u8ErrStatus = RT_NOK;break;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <INTERRUPT_u8Disable>:
u8 INTERRUPT_u8Disable(u8 Copy_u8IntNo)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <INTERRUPT_u8Disable+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <INTERRUPT_u8Disable+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     c48:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3c 83       	std	Y+4, r19	; 0x04
     c52:	2b 83       	std	Y+3, r18	; 0x03
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	89 f0       	breq	.+34     	; 0xc80 <INTERRUPT_u8Disable+0x46>
     c5e:	2b 81       	ldd	r18, Y+3	; 0x03
     c60:	3c 81       	ldd	r19, Y+4	; 0x04
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	a1 f0       	breq	.+40     	; 0xc90 <INTERRUPT_u8Disable+0x56>
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	c1 f4       	brne	.+48     	; 0xca0 <INTERRUPT_u8Disable+0x66>
	{
	case INT_0: GICR_reg &= ~(1<<6) ; break;
     c70:	ab e5       	ldi	r26, 0x5B	; 91
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	eb e5       	ldi	r30, 0x5B	; 91
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 7b       	andi	r24, 0xBF	; 191
     c7c:	8c 93       	st	X, r24
     c7e:	12 c0       	rjmp	.+36     	; 0xca4 <INTERRUPT_u8Disable+0x6a>
	case INT_1: GICR_reg &= ~(1<<7) ; break;
     c80:	ab e5       	ldi	r26, 0x5B	; 91
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	eb e5       	ldi	r30, 0x5B	; 91
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 77       	andi	r24, 0x7F	; 127
     c8c:	8c 93       	st	X, r24
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <INTERRUPT_u8Disable+0x6a>
	case INT_2: GICR_reg &= ~(1<<5) ; break;
     c90:	ab e5       	ldi	r26, 0x5B	; 91
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e5       	ldi	r30, 0x5B	; 91
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7d       	andi	r24, 0xDF	; 223
     c9c:	8c 93       	st	X, r24
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <INTERRUPT_u8Disable+0x6a>
	default:Local_u8ErrStatus = RT_NOK;break;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <INTERRUPT_u8SenseControl>:
u8 INTERRUPT_u8SenseControl(u8 Copy_u8IntNo ,u8 Copy_u8Trigger)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	2b 97       	sbiw	r28, 0x0b	; 11
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	8a 83       	std	Y+2, r24	; 0x02
     cca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3b 87       	std	Y+11, r19	; 0x0b
     cd6:	2a 87       	std	Y+10, r18	; 0x0a
     cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cda:	9b 85       	ldd	r25, Y+11	; 0x0b
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <INTERRUPT_u8SenseControl+0x30>
     ce2:	69 c0       	rjmp	.+210    	; 0xdb6 <INTERRUPT_u8SenseControl+0x102>
     ce4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ce6:	3b 85       	ldd	r19, Y+11	; 0x0b
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <INTERRUPT_u8SenseControl+0x3c>
     cee:	c1 c0       	rjmp	.+386    	; 0xe72 <INTERRUPT_u8SenseControl+0x1be>
     cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf2:	9b 85       	ldd	r25, Y+11	; 0x0b
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	09 f0       	breq	.+2      	; 0xcfa <INTERRUPT_u8SenseControl+0x46>
     cf8:	df c0       	rjmp	.+446    	; 0xeb8 <INTERRUPT_u8SenseControl+0x204>
	{
	case INT_0:
		switch(Copy_u8Trigger)
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	39 87       	std	Y+9, r19	; 0x09
     d02:	28 87       	std	Y+8, r18	; 0x08
     d04:	88 85       	ldd	r24, Y+8	; 0x08
     d06:	99 85       	ldd	r25, Y+9	; 0x09
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	21 f1       	breq	.+72     	; 0xd56 <INTERRUPT_u8SenseControl+0xa2>
     d0e:	28 85       	ldd	r18, Y+8	; 0x08
     d10:	39 85       	ldd	r19, Y+9	; 0x09
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	2c f4       	brge	.+10     	; 0xd22 <INTERRUPT_u8SenseControl+0x6e>
     d18:	88 85       	ldd	r24, Y+8	; 0x08
     d1a:	99 85       	ldd	r25, Y+9	; 0x09
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	61 f0       	breq	.+24     	; 0xd38 <INTERRUPT_u8SenseControl+0x84>
     d20:	47 c0       	rjmp	.+142    	; 0xdb0 <INTERRUPT_u8SenseControl+0xfc>
     d22:	28 85       	ldd	r18, Y+8	; 0x08
     d24:	39 85       	ldd	r19, Y+9	; 0x09
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	21 f1       	breq	.+72     	; 0xd74 <INTERRUPT_u8SenseControl+0xc0>
     d2c:	88 85       	ldd	r24, Y+8	; 0x08
     d2e:	99 85       	ldd	r25, Y+9	; 0x09
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	91 05       	cpc	r25, r1
     d34:	71 f1       	breq	.+92     	; 0xd92 <INTERRUPT_u8SenseControl+0xde>
     d36:	3c c0       	rjmp	.+120    	; 0xdb0 <INTERRUPT_u8SenseControl+0xfc>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<0) ; MCUCR_reg &= ~(1<<1)  ; break;
     d38:	a5 e5       	ldi	r26, 0x55	; 85
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e5       	ldi	r30, 0x55	; 85
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	8c 93       	st	X, r24
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	8c 93       	st	X, r24
     d54:	b3 c0       	rjmp	.+358    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<0)   ; MCUCR_reg &= ~(1<<1) ; break;
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	8c 93       	st	X, r24
     d64:	a5 e5       	ldi	r26, 0x55	; 85
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e5       	ldi	r30, 0x55	; 85
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8d 7f       	andi	r24, 0xFD	; 253
     d70:	8c 93       	st	X, r24
     d72:	a4 c0       	rjmp	.+328    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<0) ;  MCUCR_reg |=(1<<1)    ; break;
     d74:	a5 e5       	ldi	r26, 0x55	; 85
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e5 e5       	ldi	r30, 0x55	; 85
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	8c 93       	st	X, r24
     d82:	a5 e5       	ldi	r26, 0x55	; 85
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e5 e5       	ldi	r30, 0x55	; 85
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	8c 93       	st	X, r24
     d90:	95 c0       	rjmp	.+298    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<0) ; MCUCR_reg |=(1<<1)  ; break;
     d92:	a5 e5       	ldi	r26, 0x55	; 85
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e5 e5       	ldi	r30, 0x55	; 85
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	8c 93       	st	X, r24
     da0:	a5 e5       	ldi	r26, 0x55	; 85
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e5       	ldi	r30, 0x55	; 85
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	8c 93       	st	X, r24
     dae:	86 c0       	rjmp	.+268    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	83 c0       	rjmp	.+262    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		};break;
	case INT_1:
		switch(Copy_u8Trigger)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3f 83       	std	Y+7, r19	; 0x07
     dbe:	2e 83       	std	Y+6, r18	; 0x06
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	21 f1       	breq	.+72     	; 0xe12 <INTERRUPT_u8SenseControl+0x15e>
     dca:	2e 81       	ldd	r18, Y+6	; 0x06
     dcc:	3f 81       	ldd	r19, Y+7	; 0x07
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <INTERRUPT_u8SenseControl+0x12a>
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	9f 81       	ldd	r25, Y+7	; 0x07
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	61 f0       	breq	.+24     	; 0xdf4 <INTERRUPT_u8SenseControl+0x140>
     ddc:	47 c0       	rjmp	.+142    	; 0xe6c <INTERRUPT_u8SenseControl+0x1b8>
     dde:	2e 81       	ldd	r18, Y+6	; 0x06
     de0:	3f 81       	ldd	r19, Y+7	; 0x07
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	21 f1       	breq	.+72     	; 0xe30 <INTERRUPT_u8SenseControl+0x17c>
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	71 f1       	breq	.+92     	; 0xe4e <INTERRUPT_u8SenseControl+0x19a>
     df2:	3c c0       	rjmp	.+120    	; 0xe6c <INTERRUPT_u8SenseControl+0x1b8>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<2) ; MCUCR_reg &= ~(1<<3)  ; break;
     df4:	a5 e5       	ldi	r26, 0x55	; 85
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e5 e5       	ldi	r30, 0x55	; 85
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8b 7f       	andi	r24, 0xFB	; 251
     e00:	8c 93       	st	X, r24
     e02:	a5 e5       	ldi	r26, 0x55	; 85
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e5 e5       	ldi	r30, 0x55	; 85
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	87 7f       	andi	r24, 0xF7	; 247
     e0e:	8c 93       	st	X, r24
     e10:	55 c0       	rjmp	.+170    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<2)   ; MCUCR_reg &= ~(1<<3) ; break;
     e12:	a5 e5       	ldi	r26, 0x55	; 85
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e5 e5       	ldi	r30, 0x55	; 85
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	84 60       	ori	r24, 0x04	; 4
     e1e:	8c 93       	st	X, r24
     e20:	a5 e5       	ldi	r26, 0x55	; 85
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e5 e5       	ldi	r30, 0x55	; 85
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	8c 93       	st	X, r24
     e2e:	46 c0       	rjmp	.+140    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<2) ;  MCUCR_reg |=(1<<3)    ; break;
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8b 7f       	andi	r24, 0xFB	; 251
     e3c:	8c 93       	st	X, r24
     e3e:	a5 e5       	ldi	r26, 0x55	; 85
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e5       	ldi	r30, 0x55	; 85
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	8c 93       	st	X, r24
     e4c:	37 c0       	rjmp	.+110    	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<2) ; MCUCR_reg |=(1<<3)  ; break;
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	84 60       	ori	r24, 0x04	; 4
     e5a:	8c 93       	st	X, r24
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	8c 93       	st	X, r24
     e6a:	28 c0       	rjmp	.+80     	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	25 c0       	rjmp	.+74     	; 0xebc <INTERRUPT_u8SenseControl+0x208>
		};break;
    case INT_2:
    	switch(Copy_u8Trigger)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3d 83       	std	Y+5, r19	; 0x05
     e7a:	2c 83       	std	Y+4, r18	; 0x04
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	91 05       	cpc	r25, r1
     e84:	31 f0       	breq	.+12     	; 0xe92 <INTERRUPT_u8SenseControl+0x1de>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	23 30       	cpi	r18, 0x03	; 3
     e8c:	31 05       	cpc	r19, r1
     e8e:	49 f0       	breq	.+18     	; 0xea2 <INTERRUPT_u8SenseControl+0x1ee>
     e90:	10 c0       	rjmp	.+32     	; 0xeb2 <INTERRUPT_u8SenseControl+0x1fe>
    	{
    	case FALLING_EDGE: MCUCSR_reg &= ~(1<<6); break;
     e92:	a4 e5       	ldi	r26, 0x54	; 84
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e4 e5       	ldi	r30, 0x54	; 84
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7b       	andi	r24, 0xBF	; 191
     e9e:	8c 93       	st	X, r24
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <INTERRUPT_u8SenseControl+0x208>
    	case RISING_EDGE : MCUCSR_reg |=(1<<6); break;
     ea2:	a4 e5       	ldi	r26, 0x54	; 84
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e4 e5       	ldi	r30, 0x54	; 84
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	8c 93       	st	X, r24
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <INTERRUPT_u8SenseControl+0x208>
    	default : Local_u8ErrStatus = RT_NOK;break;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <INTERRUPT_u8SenseControl+0x208>
    	};break;
    default:Local_u8ErrStatus = RT_NOK;break;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebe:	2b 96       	adiw	r28, 0x0b	; 11
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <INTERRUPT_u8GetInterruptFlag>:
u8 INTERRUPT_u8GetInterruptFlag(u8 Copy_u8IntNo ,u8 * Copy_u8pVal)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <INTERRUPT_u8GetInterruptFlag+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <INTERRUPT_u8GetInterruptFlag+0x8>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <INTERRUPT_u8GetInterruptFlag+0xa>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	8a 83       	std	Y+2, r24	; 0x02
     ee0:	7c 83       	std	Y+4, r23	; 0x04
     ee2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3e 83       	std	Y+6, r19	; 0x06
     eee:	2d 83       	std	Y+5, r18	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	a9 f0       	breq	.+42     	; 0xf24 <INTERRUPT_u8GetInterruptFlag+0x54>
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	d1 f0       	breq	.+52     	; 0xf38 <INTERRUPT_u8GetInterruptFlag+0x68>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	09 f5       	brne	.+66     	; 0xf4e <INTERRUPT_u8GetInterruptFlag+0x7e>
	{
	case INT_0: * Copy_u8pVal = (((GIFR_reg) >> (6)) & 0x01) ; break;
     f0c:	ea e5       	ldi	r30, 0x5A	; 90
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 95       	swap	r24
     f14:	86 95       	lsr	r24
     f16:	86 95       	lsr	r24
     f18:	83 70       	andi	r24, 0x03	; 3
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	eb 81       	ldd	r30, Y+3	; 0x03
     f1e:	fc 81       	ldd	r31, Y+4	; 0x04
     f20:	80 83       	st	Z, r24
     f22:	17 c0       	rjmp	.+46     	; 0xf52 <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_1:* Copy_u8pVal = (((GIFR_reg) >> (7)) & 0x01) ; break;
     f24:	ea e5       	ldi	r30, 0x5A	; 90
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 1f       	adc	r24, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	88 1f       	adc	r24, r24
     f30:	eb 81       	ldd	r30, Y+3	; 0x03
     f32:	fc 81       	ldd	r31, Y+4	; 0x04
     f34:	80 83       	st	Z, r24
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_2: * Copy_u8pVal = (((GIFR_reg) >> (5)) & 0x01); break;
     f38:	ea e5       	ldi	r30, 0x5A	; 90
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 95       	swap	r24
     f40:	86 95       	lsr	r24
     f42:	87 70       	andi	r24, 0x07	; 7
     f44:	81 70       	andi	r24, 0x01	; 1
     f46:	eb 81       	ldd	r30, Y+3	; 0x03
     f48:	fc 81       	ldd	r31, Y+4	; 0x04
     f4a:	80 83       	st	Z, r24
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <INTERRUPT_u8GetInterruptFlag+0x82>
	default:Local_u8ErrStatus = RT_NOK;break;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     f52:	89 81       	ldd	r24, Y+1	; 0x01
}
     f54:	26 96       	adiw	r28, 0x06	; 6
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <DIO_u8SetPortDir+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <DIO_u8SetPortDir+0x8>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     f78:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Dir != INPUT && Copy_u8Dir != OUTPUT_PORT )
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 23       	and	r24, r24
     f7e:	31 f0       	breq	.+12     	; 0xf8c <DIO_u8SetPortDir+0x26>
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	8f 3f       	cpi	r24, 0xFF	; 255
     f84:	19 f0       	breq	.+6      	; 0xf8c <DIO_u8SetPortDir+0x26>
	{
		Local_u8ErrStatus = RT_NOK;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	35 c0       	rjmp	.+106    	; 0xff6 <DIO_u8SetPortDir+0x90>
	}
	else{
		switch( Copy_u8PortNo )
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3d 83       	std	Y+5, r19	; 0x05
     f94:	2c 83       	std	Y+4, r18	; 0x04
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 05       	cpc	r25, r1
     f9e:	d1 f0       	breq	.+52     	; 0xfd4 <DIO_u8SetPortDir+0x6e>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <DIO_u8SetPortDir+0x4e>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	61 f0       	breq	.+24     	; 0xfca <DIO_u8SetPortDir+0x64>
     fb2:	1f c0       	rjmp	.+62     	; 0xff2 <DIO_u8SetPortDir+0x8c>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	81 f0       	breq	.+32     	; 0xfde <DIO_u8SetPortDir+0x78>
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	91 05       	cpc	r25, r1
     fc6:	81 f0       	breq	.+32     	; 0xfe8 <DIO_u8SetPortDir+0x82>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <DIO_u8SetPortDir+0x8c>
		{
			case PORT_A: DDRA_REG = Copy_u8Dir; break;
     fca:	ea e3       	ldi	r30, 0x3A	; 58
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	80 83       	st	Z, r24
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <DIO_u8SetPortDir+0x90>
			case PORT_B: DDRB_REG = Copy_u8Dir; break;
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	80 83       	st	Z, r24
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <DIO_u8SetPortDir+0x90>
			case PORT_C: DDRC_REG = Copy_u8Dir; break;
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	80 83       	st	Z, r24
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <DIO_u8SetPortDir+0x90>
			case PORT_D: DDRD_REG = Copy_u8Dir; break;
     fe8:	e1 e3       	ldi	r30, 0x31	; 49
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	80 83       	st	Z, r24
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPortDir+0x90>
			default: Local_u8ErrStatus = RT_NOK;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	89 83       	std	Y+1, r24	; 0x01
		}
		}
		return (Local_u8ErrStatus);
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	28 97       	sbiw	r28, 0x08	; 8
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	6b 83       	std	Y+3, r22	; 0x03
    1020:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    1022:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	08 f0       	brcs	.+2      	; 0x102c <DIO_u8SetPinDir+0x24>
    102a:	f2 c0       	rjmp	.+484    	; 0x1210 <DIO_u8SetPinDir+0x208>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	08 f0       	brcs	.+2      	; 0x1034 <DIO_u8SetPinDir+0x2c>
    1032:	ee c0       	rjmp	.+476    	; 0x1210 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <DIO_u8SetPinDir+0x34>
    103a:	74 c0       	rjmp	.+232    	; 0x1124 <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	38 87       	std	Y+8, r19	; 0x08
    1044:	2f 83       	std	Y+7, r18	; 0x07
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	59 f1       	breq	.+86     	; 0x10a6 <DIO_u8SetPinDir+0x9e>
    1050:	2f 81       	ldd	r18, Y+7	; 0x07
    1052:	38 85       	ldd	r19, Y+8	; 0x08
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_u8SetPinDir+0x5c>
    105a:	8f 81       	ldd	r24, Y+7	; 0x07
    105c:	98 85       	ldd	r25, Y+8	; 0x08
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	69 f0       	breq	.+26     	; 0x107c <DIO_u8SetPinDir+0x74>
    1062:	d8 c0       	rjmp	.+432    	; 0x1214 <DIO_u8SetPinDir+0x20c>
    1064:	2f 81       	ldd	r18, Y+7	; 0x07
    1066:	38 85       	ldd	r19, Y+8	; 0x08
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	89 f1       	breq	.+98     	; 0x10d0 <DIO_u8SetPinDir+0xc8>
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	98 85       	ldd	r25, Y+8	; 0x08
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <DIO_u8SetPinDir+0x72>
    1078:	40 c0       	rjmp	.+128    	; 0x10fa <DIO_u8SetPinDir+0xf2>
    107a:	cc c0       	rjmp	.+408    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
    107c:	aa e3       	ldi	r26, 0x3A	; 58
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ea e3       	ldi	r30, 0x3A	; 58
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_u8SetPinDir+0x92>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_u8SetPinDir+0x8e>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	b7 c0       	rjmp	.+366    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
    10a6:	a7 e3       	ldi	r26, 0x37	; 55
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e3       	ldi	r30, 0x37	; 55
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8SetPinDir+0xbc>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8SetPinDir+0xb8>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	a2 c0       	rjmp	.+324    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
    10d0:	a4 e3       	ldi	r26, 0x34	; 52
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e4 e3       	ldi	r30, 0x34	; 52
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_u8SetPinDir+0xe6>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_u8SetPinDir+0xe2>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	8d c0       	rjmp	.+282    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
    10fa:	a1 e3       	ldi	r26, 0x31	; 49
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e1 e3       	ldi	r30, 0x31	; 49
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8SetPinDir+0x110>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8SetPinDir+0x10c>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	78 c0       	rjmp	.+240    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	09 f0       	breq	.+2      	; 0x112c <DIO_u8SetPinDir+0x124>
    112a:	6f c0       	rjmp	.+222    	; 0x120a <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3e 83       	std	Y+6, r19	; 0x06
    1134:	2d 83       	std	Y+5, r18	; 0x05
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	49 f1       	breq	.+82     	; 0x1192 <DIO_u8SetPinDir+0x18a>
    1140:	2d 81       	ldd	r18, Y+5	; 0x05
    1142:	3e 81       	ldd	r19, Y+6	; 0x06
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <DIO_u8SetPinDir+0x14c>
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	61 f0       	breq	.+24     	; 0x116a <DIO_u8SetPinDir+0x162>
    1152:	60 c0       	rjmp	.+192    	; 0x1214 <DIO_u8SetPinDir+0x20c>
    1154:	2d 81       	ldd	r18, Y+5	; 0x05
    1156:	3e 81       	ldd	r19, Y+6	; 0x06
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	71 f1       	breq	.+92     	; 0x11ba <DIO_u8SetPinDir+0x1b2>
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	e9 f1       	breq	.+122    	; 0x11e2 <DIO_u8SetPinDir+0x1da>
    1168:	55 c0       	rjmp	.+170    	; 0x1214 <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinDir+0x180>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8SetPinDir+0x17c>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	41 c0       	rjmp	.+130    	; 0x1214 <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
    1192:	a7 e3       	ldi	r26, 0x37	; 55
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinDir+0x1a8>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinDir+0x1a4>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	2d c0       	rjmp	.+90     	; 0x1214 <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
    11ba:	a4 e3       	ldi	r26, 0x34	; 52
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e4 e3       	ldi	r30, 0x34	; 52
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8SetPinDir+0x1d0>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8SetPinDir+0x1cc>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
    11e2:	a1 e3       	ldi	r26, 0x31	; 49
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_u8SetPinDir+0x1f8>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_u8SetPinDir+0x1f4>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
    1214:	89 81       	ldd	r24, Y+1	; 0x01
}
    1216:	28 96       	adiw	r28, 0x08	; 8
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <DIO_u8SetPortVal+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <DIO_u8SetPortVal+0x8>
    1230:	0f 92       	push	r0
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    123a:	19 82       	std	Y+1, r1	; 0x01
	if(1)
	{
		switch( Copy_u8PortNo )
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3d 83       	std	Y+5, r19	; 0x05
    1244:	2c 83       	std	Y+4, r18	; 0x04
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	d1 f0       	breq	.+52     	; 0x1284 <DIO_u8SetPortVal+0x5c>
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	3d 81       	ldd	r19, Y+5	; 0x05
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_u8SetPortVal+0x3c>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_u8SetPortVal+0x52>
    1262:	1f c0       	rjmp	.+62     	; 0x12a2 <DIO_u8SetPortVal+0x7a>
    1264:	2c 81       	ldd	r18, Y+4	; 0x04
    1266:	3d 81       	ldd	r19, Y+5	; 0x05
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <DIO_u8SetPortVal+0x66>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <DIO_u8SetPortVal+0x70>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <DIO_u8SetPortVal+0x7a>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
    127a:	eb e3       	ldi	r30, 0x3B	; 59
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	80 83       	st	Z, r24
    1282:	11 c0       	rjmp	.+34     	; 0x12a6 <DIO_u8SetPortVal+0x7e>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	80 83       	st	Z, r24
    128c:	0c c0       	rjmp	.+24     	; 0x12a6 <DIO_u8SetPortVal+0x7e>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <DIO_u8SetPortVal+0x7e>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
    1298:	e2 e3       	ldi	r30, 0x32	; 50
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8SetPortVal+0x7e>
		    default: Local_u8ErrStatus = RT_NOK;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}

	return (Local_u8ErrStatus);
    12a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	28 97       	sbiw	r28, 0x08	; 8
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	6b 83       	std	Y+3, r22	; 0x03
    12d0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    12d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <DIO_u8SetPinVal+0x24>
    12da:	f2 c0       	rjmp	.+484    	; 0x14c0 <DIO_u8SetPinVal+0x208>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <DIO_u8SetPinVal+0x2c>
    12e2:	ee c0       	rjmp	.+476    	; 0x14c0 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	88 23       	and	r24, r24
    12e8:	09 f0       	breq	.+2      	; 0x12ec <DIO_u8SetPinVal+0x34>
    12ea:	74 c0       	rjmp	.+232    	; 0x13d4 <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	38 87       	std	Y+8, r19	; 0x08
    12f4:	2f 83       	std	Y+7, r18	; 0x07
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	98 85       	ldd	r25, Y+8	; 0x08
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	91 05       	cpc	r25, r1
    12fe:	59 f1       	breq	.+86     	; 0x1356 <DIO_u8SetPinVal+0x9e>
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	38 85       	ldd	r19, Y+8	; 0x08
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <DIO_u8SetPinVal+0x5c>
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	69 f0       	breq	.+26     	; 0x132c <DIO_u8SetPinVal+0x74>
    1312:	d8 c0       	rjmp	.+432    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
    1314:	2f 81       	ldd	r18, Y+7	; 0x07
    1316:	38 85       	ldd	r19, Y+8	; 0x08
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	89 f1       	breq	.+98     	; 0x1380 <DIO_u8SetPinVal+0xc8>
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <DIO_u8SetPinVal+0x72>
    1328:	40 c0       	rjmp	.+128    	; 0x13aa <DIO_u8SetPinVal+0xf2>
    132a:	cc c0       	rjmp	.+408    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_u8SetPinVal+0x92>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_u8SetPinVal+0x8e>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	b7 c0       	rjmp	.+366    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_u8SetPinVal+0xbc>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_u8SetPinVal+0xb8>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	a2 c0       	rjmp	.+324    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinVal+0xe6>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8SetPinVal+0xe2>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	8d c0       	rjmp	.+282    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
    13aa:	a2 e3       	ldi	r26, 0x32	; 50
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8SetPinVal+0x110>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8SetPinVal+0x10c>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	78 c0       	rjmp	.+240    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	09 f0       	breq	.+2      	; 0x13dc <DIO_u8SetPinVal+0x124>
    13da:	6f c0       	rjmp	.+222    	; 0x14ba <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3e 83       	std	Y+6, r19	; 0x06
    13e4:	2d 83       	std	Y+5, r18	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	49 f1       	breq	.+82     	; 0x1442 <DIO_u8SetPinVal+0x18a>
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	2c f4       	brge	.+10     	; 0x1404 <DIO_u8SetPinVal+0x14c>
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 f0       	breq	.+24     	; 0x141a <DIO_u8SetPinVal+0x162>
    1402:	60 c0       	rjmp	.+192    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
    1404:	2d 81       	ldd	r18, Y+5	; 0x05
    1406:	3e 81       	ldd	r19, Y+6	; 0x06
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	71 f1       	breq	.+92     	; 0x146a <DIO_u8SetPinVal+0x1b2>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	e9 f1       	breq	.+122    	; 0x1492 <DIO_u8SetPinVal+0x1da>
    1418:	55 c0       	rjmp	.+170    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
    141a:	ab e3       	ldi	r26, 0x3B	; 59
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e3       	ldi	r30, 0x3B	; 59
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8SetPinVal+0x180>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_u8SetPinVal+0x17c>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	41 c0       	rjmp	.+130    	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
    1442:	a8 e3       	ldi	r26, 0x38	; 56
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e8 e3       	ldi	r30, 0x38	; 56
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinVal+0x1a8>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8SetPinVal+0x1a4>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	2d c0       	rjmp	.+90     	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_u8SetPinVal+0x1d0>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_u8SetPinVal+0x1cc>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_u8SetPinVal+0x1f8>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_u8SetPinVal+0x1f4>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	28 96       	adiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_u8GetPortVal+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_u8GetPortVal+0x8>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_u8GetPortVal+0xa>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	7c 83       	std	Y+4, r23	; 0x04
    14ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    14ec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	19 f4       	brne	.+6      	; 0x14fc <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	3d c0       	rjmp	.+122    	; 0x1576 <DIO_u8GetPortVal+0x9e>
	else
	{
		switch( Copy_u8PortNo )
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3e 83       	std	Y+6, r19	; 0x06
    1504:	2d 83       	std	Y+5, r18	; 0x05
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	e1 f0       	breq	.+56     	; 0x1548 <DIO_u8GetPortVal+0x70>
    1510:	2d 81       	ldd	r18, Y+5	; 0x05
    1512:	3e 81       	ldd	r19, Y+6	; 0x06
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <DIO_u8GetPortVal+0x4c>
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	61 f0       	breq	.+24     	; 0x153a <DIO_u8GetPortVal+0x62>
    1522:	27 c0       	rjmp	.+78     	; 0x1572 <DIO_u8GetPortVal+0x9a>
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	a1 f0       	breq	.+40     	; 0x1556 <DIO_u8GetPortVal+0x7e>
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	b1 f0       	breq	.+44     	; 0x1564 <DIO_u8GetPortVal+0x8c>
    1538:	1c c0       	rjmp	.+56     	; 0x1572 <DIO_u8GetPortVal+0x9a>
			{
				case PORT_A: * Copy_u8pVal = PINA_REG ; break;
    153a:	e9 e3       	ldi	r30, 0x39	; 57
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	17 c0       	rjmp	.+46     	; 0x1576 <DIO_u8GetPortVal+0x9e>
			    case PORT_B: * Copy_u8pVal = PINB_REG; break;
    1548:	e6 e3       	ldi	r30, 0x36	; 54
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	10 c0       	rjmp	.+32     	; 0x1576 <DIO_u8GetPortVal+0x9e>
			    case PORT_C: * Copy_u8pVal = PINC_REG; break;
    1556:	e3 e3       	ldi	r30, 0x33	; 51
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	80 83       	st	Z, r24
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <DIO_u8GetPortVal+0x9e>
			    case PORT_D: * Copy_u8pVal = PIND_REG; break;
    1564:	e0 e3       	ldi	r30, 0x30	; 48
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	80 83       	st	Z, r24
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8GetPortVal+0x9e>
			    default: Local_u8ErrStatus = RT_NOK; break;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
    1576:	89 81       	ldd	r24, Y+1	; 0x01
}
    1578:	26 96       	adiw	r28, 0x06	; 6
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	27 97       	sbiw	r28, 0x07	; 7
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	6b 83       	std	Y+3, r22	; 0x03
    15a2:	5d 83       	std	Y+5, r21	; 0x05
    15a4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <DIO_u8GetPinVal+0x2c>
	{Local_u8ErrStatus = RT_NOK;}
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	7b c0       	rjmp	.+246    	; 0x16ac <DIO_u8GetPinVal+0x122>
	else
	{
		if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_u8GetPinVal+0x34>
    15bc:	75 c0       	rjmp	.+234    	; 0x16a8 <DIO_u8GetPinVal+0x11e>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <DIO_u8GetPinVal+0x3c>
    15c4:	71 c0       	rjmp	.+226    	; 0x16a8 <DIO_u8GetPinVal+0x11e>
		{
			switch(Copy_u8PortNo)
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3f 83       	std	Y+7, r19	; 0x07
    15ce:	2e 83       	std	Y+6, r18	; 0x06
    15d0:	4e 81       	ldd	r20, Y+6	; 0x06
    15d2:	5f 81       	ldd	r21, Y+7	; 0x07
    15d4:	41 30       	cpi	r20, 0x01	; 1
    15d6:	51 05       	cpc	r21, r1
    15d8:	59 f1       	breq	.+86     	; 0x1630 <DIO_u8GetPinVal+0xa6>
    15da:	8e 81       	ldd	r24, Y+6	; 0x06
    15dc:	9f 81       	ldd	r25, Y+7	; 0x07
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	91 05       	cpc	r25, r1
    15e2:	34 f4       	brge	.+12     	; 0x15f0 <DIO_u8GetPinVal+0x66>
    15e4:	2e 81       	ldd	r18, Y+6	; 0x06
    15e6:	3f 81       	ldd	r19, Y+7	; 0x07
    15e8:	21 15       	cp	r18, r1
    15ea:	31 05       	cpc	r19, r1
    15ec:	69 f0       	breq	.+26     	; 0x1608 <DIO_u8GetPinVal+0x7e>
    15ee:	5e c0       	rjmp	.+188    	; 0x16ac <DIO_u8GetPinVal+0x122>
    15f0:	4e 81       	ldd	r20, Y+6	; 0x06
    15f2:	5f 81       	ldd	r21, Y+7	; 0x07
    15f4:	42 30       	cpi	r20, 0x02	; 2
    15f6:	51 05       	cpc	r21, r1
    15f8:	79 f1       	breq	.+94     	; 0x1658 <DIO_u8GetPinVal+0xce>
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	9f 81       	ldd	r25, Y+7	; 0x07
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_u8GetPinVal+0x7c>
    1604:	3d c0       	rjmp	.+122    	; 0x1680 <DIO_u8GetPinVal+0xf6>
    1606:	52 c0       	rjmp	.+164    	; 0x16ac <DIO_u8GetPinVal+0x122>
			{
				case PORT_A: * Copy_u8pVal = GET_BIT(PINA_REG , Copy_u8PinNo ); break;
    1608:	e9 e3       	ldi	r30, 0x39	; 57
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a9 01       	movw	r20, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_u8GetPinVal+0x96>
    161c:	55 95       	asr	r21
    161e:	47 95       	ror	r20
    1620:	8a 95       	dec	r24
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_u8GetPinVal+0x92>
    1624:	ca 01       	movw	r24, r20
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	ec 81       	ldd	r30, Y+4	; 0x04
    162a:	fd 81       	ldd	r31, Y+5	; 0x05
    162c:	80 83       	st	Z, r24
    162e:	3e c0       	rjmp	.+124    	; 0x16ac <DIO_u8GetPinVal+0x122>
				case PORT_B: * Copy_u8pVal = GET_BIT(PINB_REG , Copy_u8PinNo ); break;
    1630:	e6 e3       	ldi	r30, 0x36	; 54
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	88 2f       	mov	r24, r24
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a9 01       	movw	r20, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_u8GetPinVal+0xbe>
    1644:	55 95       	asr	r21
    1646:	47 95       	ror	r20
    1648:	8a 95       	dec	r24
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_u8GetPinVal+0xba>
    164c:	ca 01       	movw	r24, r20
    164e:	81 70       	andi	r24, 0x01	; 1
    1650:	ec 81       	ldd	r30, Y+4	; 0x04
    1652:	fd 81       	ldd	r31, Y+5	; 0x05
    1654:	80 83       	st	Z, r24
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <DIO_u8GetPinVal+0x122>
				case PORT_C: * Copy_u8pVal = GET_BIT(PINC_REG , Copy_u8PinNo ); break;
    1658:	e3 e3       	ldi	r30, 0x33	; 51
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_u8GetPinVal+0xe6>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_u8GetPinVal+0xe2>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	80 83       	st	Z, r24
    167e:	16 c0       	rjmp	.+44     	; 0x16ac <DIO_u8GetPinVal+0x122>
				case PORT_D: * Copy_u8pVal = GET_BIT(PIND_REG , Copy_u8PinNo ); break;
    1680:	e0 e3       	ldi	r30, 0x30	; 48
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_u8GetPinVal+0x10e>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_u8GetPinVal+0x10a>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	ec 81       	ldd	r30, Y+4	; 0x04
    16a2:	fd 81       	ldd	r31, Y+5	; 0x05
    16a4:	80 83       	st	Z, r24
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_u8GetPinVal+0x122>
			}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Local_u8ErrStatus);
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ae:	27 96       	adiw	r28, 0x07	; 7
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <LCD_vidInit>:
#define LCD_FUNC_SET_CMD (u8)    0b00111000
#define LCD_ON_OFF_CTRL_CMD (u8) 0b00001110
#define LCD_DISPLAY_CLR_CMD (u8) 0b00000001
#define LCD_ENTRY_MODE_CMD (u8)  0b00000110
extern void LCD_vidInit(void)
{
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	c6 54       	subi	r28, 0x46	; 70
    16ce:	d0 40       	sbci	r29, 0x00	; 0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDir(LCD_DATA_PORT,OUTPUT_PORT);
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	6f ef       	ldi	r22, 0xFF	; 255
    16de:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_u8SetPortDir>
	DIO_u8SetPinDir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8SetPinDir>
    1700:	fe 01       	movw	r30, r28
    1702:	ed 5b       	subi	r30, 0xBD	; 189
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a0 e2       	ldi	r26, 0x20	; 32
    170c:	b2 e4       	ldi	r27, 0x42	; 66
    170e:	80 83       	st	Z, r24
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	a2 83       	std	Z+2, r26	; 0x02
    1714:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	8e 01       	movw	r16, r28
    1718:	01 5c       	subi	r16, 0xC1	; 193
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	ed 5b       	subi	r30, 0xBD	; 189
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	80 83       	st	Z, r24
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	a2 83       	std	Z+2, r26	; 0x02
    1742:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1744:	fe 01       	movw	r30, r28
    1746:	ff 96       	adiw	r30, 0x3f	; 63
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <LCD_vidInit+0xaa>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9e af       	std	Y+62, r25	; 0x3e
    1766:	8d af       	std	Y+61, r24	; 0x3d
    1768:	46 c0       	rjmp	.+140    	; 0x17f6 <LCD_vidInit+0x136>
	else if (__tmp > 65535)
    176a:	fe 01       	movw	r30, r28
    176c:	ff 96       	adiw	r30, 0x3f	; 63
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	64 f5       	brge	.+88     	; 0x17de <LCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	fe 01       	movw	r30, r28
    1788:	ed 5b       	subi	r30, 0xBD	; 189
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9e af       	std	Y+62, r25	; 0x3e
    17b2:	8d af       	std	Y+61, r24	; 0x3d
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <LCD_vidInit+0x114>
    17b6:	88 ec       	ldi	r24, 0xC8	; 200
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9c af       	std	Y+60, r25	; 0x3c
    17bc:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17be:	8b ad       	ldd	r24, Y+59	; 0x3b
    17c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_vidInit+0x102>
    17c6:	9c af       	std	Y+60, r25	; 0x3c
    17c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    17cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9e af       	std	Y+62, r25	; 0x3e
    17d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	69 f7       	brne	.-38     	; 0x17b6 <LCD_vidInit+0xf6>
    17dc:	16 c0       	rjmp	.+44     	; 0x180a <LCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	fe 01       	movw	r30, r28
    17e0:	ff 96       	adiw	r30, 0x3f	; 63
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e af       	std	Y+62, r25	; 0x3e
    17f4:	8d af       	std	Y+61, r24	; 0x3d
    17f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fa:	9a af       	std	Y+58, r25	; 0x3a
    17fc:	89 af       	std	Y+57, r24	; 0x39
    17fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1800:	9a ad       	ldd	r25, Y+58	; 0x3a
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_vidInit+0x142>
    1806:	9a af       	std	Y+58, r25	; 0x3a
    1808:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_vidSendCommand(LCD_FUNC_SET_CMD);
    180a:	88 e3       	ldi	r24, 0x38	; 56
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <LCD_vidSendCommand>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e8       	ldi	r26, 0x80	; 128
    1818:	bf e3       	ldi	r27, 0x3F	; 63
    181a:	8d ab       	std	Y+53, r24	; 0x35
    181c:	9e ab       	std	Y+54, r25	; 0x36
    181e:	af ab       	std	Y+55, r26	; 0x37
    1820:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	6d a9       	ldd	r22, Y+53	; 0x35
    1824:	7e a9       	ldd	r23, Y+54	; 0x36
    1826:	8f a9       	ldd	r24, Y+55	; 0x37
    1828:	98 ad       	ldd	r25, Y+56	; 0x38
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a ef       	ldi	r20, 0xFA	; 250
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	89 ab       	std	Y+49, r24	; 0x31
    183c:	9a ab       	std	Y+50, r25	; 0x32
    183e:	ab ab       	std	Y+51, r26	; 0x33
    1840:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1842:	69 a9       	ldd	r22, Y+49	; 0x31
    1844:	7a a9       	ldd	r23, Y+50	; 0x32
    1846:	8b a9       	ldd	r24, Y+51	; 0x33
    1848:	9c a9       	ldd	r25, Y+52	; 0x34
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <LCD_vidInit+0x1a4>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	98 ab       	std	Y+48, r25	; 0x30
    1860:	8f a7       	std	Y+47, r24	; 0x2f
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <LCD_vidInit+0x222>
	else if (__tmp > 65535)
    1864:	69 a9       	ldd	r22, Y+49	; 0x31
    1866:	7a a9       	ldd	r23, Y+50	; 0x32
    1868:	8b a9       	ldd	r24, Y+51	; 0x33
    186a:	9c a9       	ldd	r25, Y+52	; 0x34
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	4c f5       	brge	.+82     	; 0x18ce <LCD_vidInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187c:	6d a9       	ldd	r22, Y+53	; 0x35
    187e:	7e a9       	ldd	r23, Y+54	; 0x36
    1880:	8f a9       	ldd	r24, Y+55	; 0x37
    1882:	98 ad       	ldd	r25, Y+56	; 0x38
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <LCD_vidInit+0x204>
    18a6:	88 ec       	ldi	r24, 0xC8	; 200
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9e a7       	std	Y+46, r25	; 0x2e
    18ac:	8d a7       	std	Y+45, r24	; 0x2d
    18ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    18b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_vidInit+0x1f2>
    18b6:	9e a7       	std	Y+46, r25	; 0x2e
    18b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    18bc:	98 a9       	ldd	r25, Y+48	; 0x30
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	98 ab       	std	Y+48, r25	; 0x30
    18c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c6:	98 a9       	ldd	r25, Y+48	; 0x30
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <LCD_vidInit+0x1e6>
    18cc:	14 c0       	rjmp	.+40     	; 0x18f6 <LCD_vidInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ce:	69 a9       	ldd	r22, Y+49	; 0x31
    18d0:	7a a9       	ldd	r23, Y+50	; 0x32
    18d2:	8b a9       	ldd	r24, Y+51	; 0x33
    18d4:	9c a9       	ldd	r25, Y+52	; 0x34
    18d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	98 ab       	std	Y+48, r25	; 0x30
    18e0:	8f a7       	std	Y+47, r24	; 0x2f
    18e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e4:	98 a9       	ldd	r25, Y+48	; 0x30
    18e6:	9c a7       	std	Y+44, r25	; 0x2c
    18e8:	8b a7       	std	Y+43, r24	; 0x2b
    18ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_vidInit+0x22e>
    18f2:	9c a7       	std	Y+44, r25	; 0x2c
    18f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(LCD_ON_OFF_CTRL_CMD);
    18f6:	8e e0       	ldi	r24, 0x0E	; 14
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <LCD_vidSendCommand>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e8       	ldi	r26, 0x80	; 128
    1904:	bf e3       	ldi	r27, 0x3F	; 63
    1906:	8f a3       	std	Y+39, r24	; 0x27
    1908:	98 a7       	std	Y+40, r25	; 0x28
    190a:	a9 a7       	std	Y+41, r26	; 0x29
    190c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6f a1       	ldd	r22, Y+39	; 0x27
    1910:	78 a5       	ldd	r23, Y+40	; 0x28
    1912:	89 a5       	ldd	r24, Y+41	; 0x29
    1914:	9a a5       	ldd	r25, Y+42	; 0x2a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a ef       	ldi	r20, 0xFA	; 250
    191c:	54 e4       	ldi	r21, 0x44	; 68
    191e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8b a3       	std	Y+35, r24	; 0x23
    1928:	9c a3       	std	Y+36, r25	; 0x24
    192a:	ad a3       	std	Y+37, r26	; 0x25
    192c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    192e:	6b a1       	ldd	r22, Y+35	; 0x23
    1930:	7c a1       	ldd	r23, Y+36	; 0x24
    1932:	8d a1       	ldd	r24, Y+37	; 0x25
    1934:	9e a1       	ldd	r25, Y+38	; 0x26
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <LCD_vidInit+0x290>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <LCD_vidInit+0x30e>
	else if (__tmp > 65535)
    1950:	6b a1       	ldd	r22, Y+35	; 0x23
    1952:	7c a1       	ldd	r23, Y+36	; 0x24
    1954:	8d a1       	ldd	r24, Y+37	; 0x25
    1956:	9e a1       	ldd	r25, Y+38	; 0x26
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <LCD_vidInit+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6f a1       	ldd	r22, Y+39	; 0x27
    196a:	78 a5       	ldd	r23, Y+40	; 0x28
    196c:	89 a5       	ldd	r24, Y+41	; 0x29
    196e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9a a3       	std	Y+34, r25	; 0x22
    198e:	89 a3       	std	Y+33, r24	; 0x21
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_vidInit+0x2f0>
    1992:	88 ec       	ldi	r24, 0xC8	; 200
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	98 a3       	std	Y+32, r25	; 0x20
    1998:	8f 8f       	std	Y+31, r24	; 0x1f
    199a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    199c:	98 a1       	ldd	r25, Y+32	; 0x20
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_vidInit+0x2de>
    19a2:	98 a3       	std	Y+32, r25	; 0x20
    19a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	89 a1       	ldd	r24, Y+33	; 0x21
    19a8:	9a a1       	ldd	r25, Y+34	; 0x22
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9a a3       	std	Y+34, r25	; 0x22
    19ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	89 a1       	ldd	r24, Y+33	; 0x21
    19b2:	9a a1       	ldd	r25, Y+34	; 0x22
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <LCD_vidInit+0x2d2>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <LCD_vidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6b a1       	ldd	r22, Y+35	; 0x23
    19bc:	7c a1       	ldd	r23, Y+36	; 0x24
    19be:	8d a1       	ldd	r24, Y+37	; 0x25
    19c0:	9e a1       	ldd	r25, Y+38	; 0x26
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9a a3       	std	Y+34, r25	; 0x22
    19cc:	89 a3       	std	Y+33, r24	; 0x21
    19ce:	89 a1       	ldd	r24, Y+33	; 0x21
    19d0:	9a a1       	ldd	r25, Y+34	; 0x22
    19d2:	9e 8f       	std	Y+30, r25	; 0x1e
    19d4:	8d 8f       	std	Y+29, r24	; 0x1d
    19d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_vidInit+0x31a>
    19de:	9e 8f       	std	Y+30, r25	; 0x1e
    19e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vidSendCommand(LCD_DISPLAY_CLR_CMD);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <LCD_vidSendCommand>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e4       	ldi	r27, 0x40	; 64
    19f2:	89 8f       	std	Y+25, r24	; 0x19
    19f4:	9a 8f       	std	Y+26, r25	; 0x1a
    19f6:	ab 8f       	std	Y+27, r26	; 0x1b
    19f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fa:	69 8d       	ldd	r22, Y+25	; 0x19
    19fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a ef       	ldi	r20, 0xFA	; 250
    1a08:	54 e4       	ldi	r21, 0x44	; 68
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8d 8b       	std	Y+21, r24	; 0x15
    1a14:	9e 8b       	std	Y+22, r25	; 0x16
    1a16:	af 8b       	std	Y+23, r26	; 0x17
    1a18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a20:	98 8d       	ldd	r25, Y+24	; 0x18
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	2c f4       	brge	.+10     	; 0x1a3c <LCD_vidInit+0x37c>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 8b       	std	Y+20, r25	; 0x14
    1a38:	8b 8b       	std	Y+19, r24	; 0x13
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <LCD_vidInit+0x3fa>
	else if (__tmp > 65535)
    1a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	4c f5       	brge	.+82     	; 0x1aa6 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a54:	69 8d       	ldd	r22, Y+25	; 0x19
    1a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e2       	ldi	r20, 0x20	; 32
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9c 8b       	std	Y+20, r25	; 0x14
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <LCD_vidInit+0x3dc>
    1a7e:	88 ec       	ldi	r24, 0xC8	; 200
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9a 8b       	std	Y+18, r25	; 0x12
    1a84:	89 8b       	std	Y+17, r24	; 0x11
    1a86:	89 89       	ldd	r24, Y+17	; 0x11
    1a88:	9a 89       	ldd	r25, Y+18	; 0x12
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_vidInit+0x3ca>
    1a8e:	9a 8b       	std	Y+18, r25	; 0x12
    1a90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	9c 8b       	std	Y+20, r25	; 0x14
    1a9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f7       	brne	.-38     	; 0x1a7e <LCD_vidInit+0x3be>
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <LCD_vidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9c 8b       	std	Y+20, r25	; 0x14
    1ab8:	8b 8b       	std	Y+19, r24	; 0x13
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	98 8b       	std	Y+16, r25	; 0x10
    1ac0:	8f 87       	std	Y+15, r24	; 0x0f
    1ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac4:	98 89       	ldd	r25, Y+16	; 0x10
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <LCD_vidInit+0x406>
    1aca:	98 8b       	std	Y+16, r25	; 0x10
    1acc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(LCD_ENTRY_MODE_CMD);
    1ace:	86 e0       	ldi	r24, 0x06	; 6
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <LCD_vidSendCommand>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	a0 e8       	ldi	r26, 0x80	; 128
    1adc:	bf e3       	ldi	r27, 0x3F	; 63
    1ade:	8b 87       	std	Y+11, r24	; 0x0b
    1ae0:	9c 87       	std	Y+12, r25	; 0x0c
    1ae2:	ad 87       	std	Y+13, r26	; 0x0d
    1ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a ef       	ldi	r20, 0xFA	; 250
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8f 83       	std	Y+7, r24	; 0x07
    1b00:	98 87       	std	Y+8, r25	; 0x08
    1b02:	a9 87       	std	Y+9, r26	; 0x09
    1b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <LCD_vidInit+0x468>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <LCD_vidInit+0x4e6>
	else if (__tmp > 65535)
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <LCD_vidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <LCD_vidInit+0x4c8>
    1b6a:	88 ec       	ldi	r24, 0xC8	; 200
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_vidInit+0x4b6>
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <LCD_vidInit+0x4aa>
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <LCD_vidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_vidInit+0x4f2>
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1bba:	ca 5b       	subi	r28, 0xBA	; 186
    1bbc:	df 4f       	sbci	r29, 0xFF	; 255
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <LCD_vidSendCommand>:
extern void LCD_vidSendCommand(u8 Copy_u8Command)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	6d 97       	sbiw	r28, 0x1d	; 29
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c00:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	41 e0       	ldi	r20, 0x01	; 1
    1c0a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e4       	ldi	r27, 0x40	; 64
    1c16:	89 8f       	std	Y+25, r24	; 0x19
    1c18:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a ef       	ldi	r20, 0xFA	; 250
    1c2c:	54 e4       	ldi	r21, 0x44	; 68
    1c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8d 8b       	std	Y+21, r24	; 0x15
    1c38:	9e 8b       	std	Y+22, r25	; 0x16
    1c3a:	af 8b       	std	Y+23, r26	; 0x17
    1c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_vidSendCommand+0xee>
    1ca2:	88 ec       	ldi	r24, 0xC8	; 200
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9a 8b       	std	Y+18, r25	; 0x12
    1ca8:	89 8b       	std	Y+17, r24	; 0x11
    1caa:	89 89       	ldd	r24, Y+17	; 0x11
    1cac:	9a 89       	ldd	r25, Y+18	; 0x12
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_vidSendCommand+0xdc>
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_vidSendCommand+0xd0>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	98 8b       	std	Y+16, r25	; 0x10
    1ce4:	8f 87       	std	Y+15, r24	; 0x0f
    1ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce8:	98 89       	ldd	r25, Y+16	; 0x10
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_vidSendCommand+0x118>
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e4       	ldi	r27, 0x40	; 64
    1d04:	8b 87       	std	Y+11, r24	; 0x0b
    1d06:	9c 87       	std	Y+12, r25	; 0x0c
    1d08:	ad 87       	std	Y+13, r26	; 0x0d
    1d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8f 83       	std	Y+7, r24	; 0x07
    1d26:	98 87       	std	Y+8, r25	; 0x08
    1d28:	a9 87       	std	Y+9, r26	; 0x09
    1d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <LCD_vidSendCommand+0x1dc>
    1d90:	88 ec       	ldi	r24, 0xC8	; 200
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_vidSendCommand+0x1ca>
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <LCD_vidSendCommand+0x1be>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dba:	78 85       	ldd	r23, Y+8	; 0x08
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_vidSendCommand+0x206>
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



}
    1de0:	6d 96       	adiw	r28, 0x1d	; 29
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_VidWriteCharacter>:
extern void LCD_VidWriteCharacter(u8 Copy_u8character)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	6d 97       	sbiw	r28, 0x1d	; 29
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	62 e0       	ldi	r22, 0x02	; 2
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8character);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e20:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	b0 e4       	ldi	r27, 0x40	; 64
    1e36:	89 8f       	std	Y+25, r24	; 0x19
    1e38:	9a 8f       	std	Y+26, r25	; 0x1a
    1e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8d 8b       	std	Y+21, r24	; 0x15
    1e58:	9e 8b       	std	Y+22, r25	; 0x16
    1e5a:	af 8b       	std	Y+23, r26	; 0x17
    1e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_VidWriteCharacter+0x8e>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_VidWriteCharacter+0x10c>
	else if (__tmp > 65535)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_VidWriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	69 8d       	ldd	r22, Y+25	; 0x19
    1e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_VidWriteCharacter+0xee>
    1ec2:	88 ec       	ldi	r24, 0xC8	; 200
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
    1eca:	89 89       	ldd	r24, Y+17	; 0x11
    1ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_VidWriteCharacter+0xdc>
    1ed2:	9a 8b       	std	Y+18, r25	; 0x12
    1ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_VidWriteCharacter+0xd0>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_VidWriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	98 89       	ldd	r25, Y+16	; 0x10
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_VidWriteCharacter+0x118>
    1f0e:	98 8b       	std	Y+16, r25	; 0x10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e0       	ldi	r26, 0x00	; 0
    1f22:	b0 e4       	ldi	r27, 0x40	; 64
    1f24:	8b 87       	std	Y+11, r24	; 0x0b
    1f26:	9c 87       	std	Y+12, r25	; 0x0c
    1f28:	ad 87       	std	Y+13, r26	; 0x0d
    1f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a ef       	ldi	r20, 0xFA	; 250
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8f 83       	std	Y+7, r24	; 0x07
    1f46:	98 87       	std	Y+8, r25	; 0x08
    1f48:	a9 87       	std	Y+9, r26	; 0x09
    1f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <LCD_VidWriteCharacter+0x17c>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <LCD_VidWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <LCD_VidWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <LCD_VidWriteCharacter+0x1dc>
    1fb0:	88 ec       	ldi	r24, 0xC8	; 200
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_VidWriteCharacter+0x1ca>
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <LCD_VidWriteCharacter+0x1be>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <LCD_VidWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_VidWriteCharacter+0x206>
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2000:	6d 96       	adiw	r28, 0x1d	; 29
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <LCD_vidWriteStr>:
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	6e 97       	sbiw	r28, 0x1e	; 30
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	9e 8f       	std	Y+30, r25	; 0x1e
    2028:	8d 8f       	std	Y+29, r24	; 0x1d
    202a:	04 c1       	rjmp	.+520    	; 0x2234 <LCD_vidWriteStr+0x222>

	while(* Copy_u8pstr != '\0')
	{
		DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
		DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
		DIO_u8SetPortVal(LCD_DATA_PORT,*Copy_u8pstr);
    2040:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2042:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2044:	90 81       	ld	r25, Z
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	69 2f       	mov	r22, r25
    204a:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	89 8f       	std	Y+25, r24	; 0x19
    2062:	9a 8f       	std	Y+26, r25	; 0x1a
    2064:	ab 8f       	std	Y+27, r26	; 0x1b
    2066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	69 8d       	ldd	r22, Y+25	; 0x19
    206a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8d 8b       	std	Y+21, r24	; 0x15
    2082:	9e 8b       	std	Y+22, r25	; 0x16
    2084:	af 8b       	std	Y+23, r26	; 0x17
    2086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_vidWriteStr+0x98>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	8b 8b       	std	Y+19, r24	; 0x13
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_vidWriteStr+0x116>
	else if (__tmp > 65535)
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_vidWriteStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	69 8d       	ldd	r22, Y+25	; 0x19
    20c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9c 8b       	std	Y+20, r25	; 0x14
    20e8:	8b 8b       	std	Y+19, r24	; 0x13
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_vidWriteStr+0xf8>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a 8b       	std	Y+18, r25	; 0x12
    20f2:	89 8b       	std	Y+17, r24	; 0x11
    20f4:	89 89       	ldd	r24, Y+17	; 0x11
    20f6:	9a 89       	ldd	r25, Y+18	; 0x12
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_vidWriteStr+0xe6>
    20fc:	9a 8b       	std	Y+18, r25	; 0x12
    20fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9c 8b       	std	Y+20, r25	; 0x14
    2108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8b 89       	ldd	r24, Y+19	; 0x13
    210c:	9c 89       	ldd	r25, Y+20	; 0x14
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_vidWriteStr+0xda>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_vidWriteStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6d 89       	ldd	r22, Y+21	; 0x15
    2116:	7e 89       	ldd	r23, Y+22	; 0x16
    2118:	8f 89       	ldd	r24, Y+23	; 0x17
    211a:	98 8d       	ldd	r25, Y+24	; 0x18
    211c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	9c 89       	ldd	r25, Y+20	; 0x14
    212c:	98 8b       	std	Y+16, r25	; 0x10
    212e:	8f 87       	std	Y+15, r24	; 0x0f
    2130:	8f 85       	ldd	r24, Y+15	; 0x0f
    2132:	98 89       	ldd	r25, Y+16	; 0x10
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_vidWriteStr+0x122>
    2138:	98 8b       	std	Y+16, r25	; 0x10
    213a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a8 e4       	ldi	r26, 0x48	; 72
    214c:	b2 e4       	ldi	r27, 0x42	; 66
    214e:	8b 87       	std	Y+11, r24	; 0x0b
    2150:	9c 87       	std	Y+12, r25	; 0x0c
    2152:	ad 87       	std	Y+13, r26	; 0x0d
    2154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2156:	6b 85       	ldd	r22, Y+11	; 0x0b
    2158:	7c 85       	ldd	r23, Y+12	; 0x0c
    215a:	8d 85       	ldd	r24, Y+13	; 0x0d
    215c:	9e 85       	ldd	r25, Y+14	; 0x0e
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a ef       	ldi	r20, 0xFA	; 250
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8f 83       	std	Y+7, r24	; 0x07
    2170:	98 87       	std	Y+8, r25	; 0x08
    2172:	a9 87       	std	Y+9, r26	; 0x09
    2174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2176:	6f 81       	ldd	r22, Y+7	; 0x07
    2178:	78 85       	ldd	r23, Y+8	; 0x08
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	2c f4       	brge	.+10     	; 0x2198 <LCD_vidWriteStr+0x186>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9e 83       	std	Y+6, r25	; 0x06
    2194:	8d 83       	std	Y+5, r24	; 0x05
    2196:	3f c0       	rjmp	.+126    	; 0x2216 <LCD_vidWriteStr+0x204>
	else if (__tmp > 65535)
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	4c f5       	brge	.+82     	; 0x2202 <LCD_vidWriteStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <LCD_vidWriteStr+0x1e6>
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_vidWriteStr+0x1d4>
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f7       	brne	.-38     	; 0x21da <LCD_vidWriteStr+0x1c8>
    2200:	14 c0       	rjmp	.+40     	; 0x222a <LCD_vidWriteStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_vidWriteStr+0x210>
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8pstr++;
    222a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	9e 8f       	std	Y+30, r25	; 0x1e
    2232:	8d 8f       	std	Y+29, r24	; 0x1d

}
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{

	while(* Copy_u8pstr != '\0')
    2234:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2236:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2238:	80 81       	ld	r24, Z
    223a:	88 23       	and	r24, r24
    223c:	09 f0       	breq	.+2      	; 0x2240 <LCD_vidWriteStr+0x22e>
    223e:	f6 ce       	rjmp	.-532    	; 0x202c <LCD_vidWriteStr+0x1a>
		_delay_ms(50);
		Copy_u8pstr++;
	}


}
    2240:	6e 96       	adiw	r28, 0x1e	; 30
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <LCD_vidClearScreen>:
void LCD_vidClearScreen(void)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	6c 97       	sbiw	r28, 0x1c	; 28
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,LCD_DISPLAY_CLR_CMD);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e4       	ldi	r27, 0x40	; 64
    2294:	89 8f       	std	Y+25, r24	; 0x19
    2296:	9a 8f       	std	Y+26, r25	; 0x1a
    2298:	ab 8f       	std	Y+27, r26	; 0x1b
    229a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	69 8d       	ldd	r22, Y+25	; 0x19
    229e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8d 8b       	std	Y+21, r24	; 0x15
    22b6:	9e 8b       	std	Y+22, r25	; 0x16
    22b8:	af 8b       	std	Y+23, r26	; 0x17
    22ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22bc:	6d 89       	ldd	r22, Y+21	; 0x15
    22be:	7e 89       	ldd	r23, Y+22	; 0x16
    22c0:	8f 89       	ldd	r24, Y+23	; 0x17
    22c2:	98 8d       	ldd	r25, Y+24	; 0x18
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_vidClearScreen+0x8c>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_vidClearScreen+0x10a>
	else if (__tmp > 65535)
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_vidClearScreen+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	69 8d       	ldd	r22, Y+25	; 0x19
    22f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_vidClearScreen+0xec>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	9a 89       	ldd	r25, Y+18	; 0x12
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_vidClearScreen+0xda>
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8b 89       	ldd	r24, Y+19	; 0x13
    2340:	9c 89       	ldd	r25, Y+20	; 0x14
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_vidClearScreen+0xce>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_vidClearScreen+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
    2364:	8f 85       	ldd	r24, Y+15	; 0x0f
    2366:	98 89       	ldd	r25, Y+16	; 0x10
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_vidClearScreen+0x116>
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e4       	ldi	r27, 0x40	; 64
    2382:	8b 87       	std	Y+11, r24	; 0x0b
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	ad 87       	std	Y+13, r26	; 0x0d
    2388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6b 85       	ldd	r22, Y+11	; 0x0b
    238c:	7c 85       	ldd	r23, Y+12	; 0x0c
    238e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2390:	9e 85       	ldd	r25, Y+14	; 0x0e
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	98 87       	std	Y+8, r25	; 0x08
    23a6:	a9 87       	std	Y+9, r26	; 0x09
    23a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_vidClearScreen+0x17a>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_vidClearScreen+0x1f8>
	else if (__tmp > 65535)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_vidClearScreen+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_vidClearScreen+0x1da>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_vidClearScreen+0x1c8>
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_vidClearScreen+0x1bc>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_vidClearScreen+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_vidClearScreen+0x204>
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    245e:	6c 96       	adiw	r28, 0x1c	; 28
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(void)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	6c 97       	sbiw	r28, 0x1c	; 28
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x18);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	68 e1       	ldi	r22, 0x18	; 24
    249c:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e0       	ldi	r26, 0x00	; 0
    24b0:	b0 e4       	ldi	r27, 0x40	; 64
    24b2:	89 8f       	std	Y+25, r24	; 0x19
    24b4:	9a 8f       	std	Y+26, r25	; 0x1a
    24b6:	ab 8f       	std	Y+27, r26	; 0x1b
    24b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	69 8d       	ldd	r22, Y+25	; 0x19
    24bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8d 8b       	std	Y+21, r24	; 0x15
    24d4:	9e 8b       	std	Y+22, r25	; 0x16
    24d6:	af 8b       	std	Y+23, r26	; 0x17
    24d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24da:	6d 89       	ldd	r22, Y+21	; 0x15
    24dc:	7e 89       	ldd	r23, Y+22	; 0x16
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	98 8d       	ldd	r25, Y+24	; 0x18
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <LCD_vidShiftLeft+0x8c>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <LCD_vidShiftLeft+0x10a>
	else if (__tmp > 65535)
    24fc:	6d 89       	ldd	r22, Y+21	; 0x15
    24fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <LCD_vidShiftLeft+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	69 8d       	ldd	r22, Y+25	; 0x19
    2516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	0f c0       	rjmp	.+30     	; 0x255c <LCD_vidShiftLeft+0xec>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9a 8b       	std	Y+18, r25	; 0x12
    2544:	89 8b       	std	Y+17, r24	; 0x11
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	9a 89       	ldd	r25, Y+18	; 0x12
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_vidShiftLeft+0xda>
    254e:	9a 8b       	std	Y+18, r25	; 0x12
    2550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	9c 89       	ldd	r25, Y+20	; 0x14
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9c 8b       	std	Y+20, r25	; 0x14
    255a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8b 89       	ldd	r24, Y+19	; 0x13
    255e:	9c 89       	ldd	r25, Y+20	; 0x14
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <LCD_vidShiftLeft+0xce>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <LCD_vidShiftLeft+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	98 8b       	std	Y+16, r25	; 0x10
    2580:	8f 87       	std	Y+15, r24	; 0x0f
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	98 89       	ldd	r25, Y+16	; 0x10
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_vidShiftLeft+0x116>
    258a:	98 8b       	std	Y+16, r25	; 0x10
    258c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 e0       	ldi	r26, 0x00	; 0
    259e:	b0 e4       	ldi	r27, 0x40	; 64
    25a0:	8b 87       	std	Y+11, r24	; 0x0b
    25a2:	9c 87       	std	Y+12, r25	; 0x0c
    25a4:	ad 87       	std	Y+13, r26	; 0x0d
    25a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8f 83       	std	Y+7, r24	; 0x07
    25c2:	98 87       	std	Y+8, r25	; 0x08
    25c4:	a9 87       	std	Y+9, r26	; 0x09
    25c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <LCD_vidShiftLeft+0x17a>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <LCD_vidShiftLeft+0x1f8>
	else if (__tmp > 65535)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <LCD_vidShiftLeft+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	0f c0       	rjmp	.+30     	; 0x264a <LCD_vidShiftLeft+0x1da>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_vidShiftLeft+0x1c8>
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <LCD_vidShiftLeft+0x1bc>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <LCD_vidShiftLeft+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <LCD_vidShiftLeft+0x204>
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    267c:	6c 96       	adiw	r28, 0x1c	; 28
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <LCD_vidShiftRight>:
void LCD_vidShiftRight(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	6c 97       	sbiw	r28, 0x1c	; 28
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	62 e0       	ldi	r22, 0x02	; 2
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    26ac:	83 e0       	ldi	r24, 0x03	; 3
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x1C);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	6c e1       	ldi	r22, 0x1C	; 28
    26ba:	0e 94 14 09 	call	0x1228	; 0x1228 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e4       	ldi	r27, 0x40	; 64
    26d0:	89 8f       	std	Y+25, r24	; 0x19
    26d2:	9a 8f       	std	Y+26, r25	; 0x1a
    26d4:	ab 8f       	std	Y+27, r26	; 0x1b
    26d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	69 8d       	ldd	r22, Y+25	; 0x19
    26da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4a ef       	ldi	r20, 0xFA	; 250
    26e6:	54 e4       	ldi	r21, 0x44	; 68
    26e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8d 8b       	std	Y+21, r24	; 0x15
    26f2:	9e 8b       	std	Y+22, r25	; 0x16
    26f4:	af 8b       	std	Y+23, r26	; 0x17
    26f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	5f e3       	ldi	r21, 0x3F	; 63
    2708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    270c:	88 23       	and	r24, r24
    270e:	2c f4       	brge	.+10     	; 0x271a <LCD_vidShiftRight+0x8c>
		__ticks = 1;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	3f c0       	rjmp	.+126    	; 0x2798 <LCD_vidShiftRight+0x10a>
	else if (__tmp > 65535)
    271a:	6d 89       	ldd	r22, Y+21	; 0x15
    271c:	7e 89       	ldd	r23, Y+22	; 0x16
    271e:	8f 89       	ldd	r24, Y+23	; 0x17
    2720:	98 8d       	ldd	r25, Y+24	; 0x18
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	4c f5       	brge	.+82     	; 0x2784 <LCD_vidShiftRight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	69 8d       	ldd	r22, Y+25	; 0x19
    2734:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2738:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
    275a:	0f c0       	rjmp	.+30     	; 0x277a <LCD_vidShiftRight+0xec>
    275c:	88 ec       	ldi	r24, 0xC8	; 200
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9a 8b       	std	Y+18, r25	; 0x12
    2762:	89 8b       	std	Y+17, r24	; 0x11
    2764:	89 89       	ldd	r24, Y+17	; 0x11
    2766:	9a 89       	ldd	r25, Y+18	; 0x12
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_vidShiftRight+0xda>
    276c:	9a 8b       	std	Y+18, r25	; 0x12
    276e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	9c 89       	ldd	r25, Y+20	; 0x14
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	9c 8b       	std	Y+20, r25	; 0x14
    2778:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277a:	8b 89       	ldd	r24, Y+19	; 0x13
    277c:	9c 89       	ldd	r25, Y+20	; 0x14
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	69 f7       	brne	.-38     	; 0x275c <LCD_vidShiftRight+0xce>
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <LCD_vidShiftRight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	6d 89       	ldd	r22, Y+21	; 0x15
    2786:	7e 89       	ldd	r23, Y+22	; 0x16
    2788:	8f 89       	ldd	r24, Y+23	; 0x17
    278a:	98 8d       	ldd	r25, Y+24	; 0x18
    278c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9c 8b       	std	Y+20, r25	; 0x14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
    2798:	8b 89       	ldd	r24, Y+19	; 0x13
    279a:	9c 89       	ldd	r25, Y+20	; 0x14
    279c:	98 8b       	std	Y+16, r25	; 0x10
    279e:	8f 87       	std	Y+15, r24	; 0x0f
    27a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a2:	98 89       	ldd	r25, Y+16	; 0x10
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_vidShiftRight+0x116>
    27a8:	98 8b       	std	Y+16, r25	; 0x10
    27aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    27ac:	83 e0       	ldi	r24, 0x03	; 3
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_u8SetPinVal>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a0 e0       	ldi	r26, 0x00	; 0
    27bc:	b0 e4       	ldi	r27, 0x40	; 64
    27be:	8b 87       	std	Y+11, r24	; 0x0b
    27c0:	9c 87       	std	Y+12, r25	; 0x0c
    27c2:	ad 87       	std	Y+13, r26	; 0x0d
    27c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    27cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8f 83       	std	Y+7, r24	; 0x07
    27e0:	98 87       	std	Y+8, r25	; 0x08
    27e2:	a9 87       	std	Y+9, r26	; 0x09
    27e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <LCD_vidShiftRight+0x17a>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <LCD_vidShiftRight+0x1f8>
	else if (__tmp > 65535)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <LCD_vidShiftRight+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <LCD_vidShiftRight+0x1da>
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_vidShiftRight+0x1c8>
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <LCD_vidShiftRight+0x1bc>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <LCD_vidShiftRight+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_vidShiftRight+0x204>
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    289a:	6c 96       	adiw	r28, 0x1c	; 28
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <__vector_3>:
#include "util/delay.h"
#include"avr/interrupt.h"
#include"../MCAL/INTERRUPT/INTERRUPT_int.h"

ISR(INT2_vect)
{
    28ac:	1f 92       	push	r1
    28ae:	0f 92       	push	r0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	0f 92       	push	r0
    28b4:	11 24       	eor	r1, r1
    28b6:	8f 93       	push	r24
    28b8:	9f 93       	push	r25
    28ba:	af 93       	push	r26
    28bc:	bf 93       	push	r27
    28be:	ef 93       	push	r30
    28c0:	ff 93       	push	r31
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	PORTB  ^=(1<<0);
    28ca:	a8 e3       	ldi	r26, 0x38	; 56
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e8 e3       	ldi	r30, 0x38	; 56
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	90 81       	ld	r25, Z
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	89 27       	eor	r24, r25
    28d8:	8c 93       	st	X, r24
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <main>:



void main (void)
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62


	PORTB |=(1<<2);
    28fc:	a8 e3       	ldi	r26, 0x38	; 56
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e8 e3       	ldi	r30, 0x38	; 56
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	84 60       	ori	r24, 0x04	; 4
    2908:	8c 93       	st	X, r24
	/*
	 * Configure the LED PIN OUTPUT
	 */
	DDRB |= (1<<0);
    290a:	a7 e3       	ldi	r26, 0x37	; 55
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e7 e3       	ldi	r30, 0x37	; 55
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	81 60       	ori	r24, 0x01	; 1
    2916:	8c 93       	st	X, r24
	DDRA |= (1<<0);
    2918:	aa e3       	ldi	r26, 0x3A	; 58
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ea e3       	ldi	r30, 0x3A	; 58
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	81 60       	ori	r24, 0x01	; 1
    2924:	8c 93       	st	X, r24
	/*
	 * Enable GIE

	SREG  |= (1<<7);
	*/
	INTERRUPT_u8GlobalInterruptControl(ENABLE);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 9b 05 	call	0xb36	; 0xb36 <INTERRUPT_u8GlobalInterruptControl>
	INTERRUPT_u8Enable(INT_2);
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	0e 94 cb 05 	call	0xb96	; 0xb96 <INTERRUPT_u8Enable>
	INTERRUPT_u8SenseControl(INT_2,FALLING_EDGE);
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	62 e0       	ldi	r22, 0x02	; 2
    2936:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <INTERRUPT_u8SenseControl>
    293a:	ff cf       	rjmp	.-2      	; 0x293a <main+0x46>

0000293c <__prologue_saves__>:
    293c:	2f 92       	push	r2
    293e:	3f 92       	push	r3
    2940:	4f 92       	push	r4
    2942:	5f 92       	push	r5
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	ca 1b       	sub	r28, r26
    2966:	db 0b       	sbc	r29, r27
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	09 94       	ijmp

00002974 <__epilogue_restores__>:
    2974:	2a 88       	ldd	r2, Y+18	; 0x12
    2976:	39 88       	ldd	r3, Y+17	; 0x11
    2978:	48 88       	ldd	r4, Y+16	; 0x10
    297a:	5f 84       	ldd	r5, Y+15	; 0x0f
    297c:	6e 84       	ldd	r6, Y+14	; 0x0e
    297e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2980:	8c 84       	ldd	r8, Y+12	; 0x0c
    2982:	9b 84       	ldd	r9, Y+11	; 0x0b
    2984:	aa 84       	ldd	r10, Y+10	; 0x0a
    2986:	b9 84       	ldd	r11, Y+9	; 0x09
    2988:	c8 84       	ldd	r12, Y+8	; 0x08
    298a:	df 80       	ldd	r13, Y+7	; 0x07
    298c:	ee 80       	ldd	r14, Y+6	; 0x06
    298e:	fd 80       	ldd	r15, Y+5	; 0x05
    2990:	0c 81       	ldd	r16, Y+4	; 0x04
    2992:	1b 81       	ldd	r17, Y+3	; 0x03
    2994:	aa 81       	ldd	r26, Y+2	; 0x02
    2996:	b9 81       	ldd	r27, Y+1	; 0x01
    2998:	ce 0f       	add	r28, r30
    299a:	d1 1d       	adc	r29, r1
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	ed 01       	movw	r28, r26
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
