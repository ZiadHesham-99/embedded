
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fb0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001fb0  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001974  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf5  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000045a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004855  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000649e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007389  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <main>
      7a:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_u8SetPortDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_u8SetPortDir+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     b48:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Dir != INPUT && Copy_u8Dir != OUTPUT_PORT )
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	88 23       	and	r24, r24
     b4e:	31 f0       	breq	.+12     	; 0xb5c <DIO_u8SetPortDir+0x26>
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	8f 3f       	cpi	r24, 0xFF	; 255
     b54:	19 f0       	breq	.+6      	; 0xb5c <DIO_u8SetPortDir+0x26>
	{
		Local_u8ErrStatus = RT_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	35 c0       	rjmp	.+106    	; 0xbc6 <DIO_u8SetPortDir+0x90>
	}
	else{
		switch( Copy_u8PortNo )
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3d 83       	std	Y+5, r19	; 0x05
     b64:	2c 83       	std	Y+4, r18	; 0x04
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	91 05       	cpc	r25, r1
     b6e:	d1 f0       	breq	.+52     	; 0xba4 <DIO_u8SetPortDir+0x6e>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <DIO_u8SetPortDir+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	61 f0       	breq	.+24     	; 0xb9a <DIO_u8SetPortDir+0x64>
     b82:	1f c0       	rjmp	.+62     	; 0xbc2 <DIO_u8SetPortDir+0x8c>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	81 f0       	breq	.+32     	; 0xbae <DIO_u8SetPortDir+0x78>
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
     b90:	9d 81       	ldd	r25, Y+5	; 0x05
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	81 f0       	breq	.+32     	; 0xbb8 <DIO_u8SetPortDir+0x82>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <DIO_u8SetPortDir+0x8c>
		{
			case PORT_A: DDRA_REG = Copy_u8Dir; break;
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	80 83       	st	Z, r24
     ba2:	11 c0       	rjmp	.+34     	; 0xbc6 <DIO_u8SetPortDir+0x90>
			case PORT_B: DDRB_REG = Copy_u8Dir; break;
     ba4:	e7 e3       	ldi	r30, 0x37	; 55
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	80 83       	st	Z, r24
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <DIO_u8SetPortDir+0x90>
			case PORT_C: DDRC_REG = Copy_u8Dir; break;
     bae:	e4 e3       	ldi	r30, 0x34	; 52
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	80 83       	st	Z, r24
     bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <DIO_u8SetPortDir+0x90>
			case PORT_D: DDRD_REG = Copy_u8Dir; break;
     bb8:	e1 e3       	ldi	r30, 0x31	; 49
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	80 83       	st	Z, r24
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_u8SetPortDir+0x90>
			default: Local_u8ErrStatus = RT_NOK;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	89 83       	std	Y+1, r24	; 0x01
		}
		}
		return (Local_u8ErrStatus);
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	28 97       	sbiw	r28, 0x08	; 8
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	6b 83       	std	Y+3, r22	; 0x03
     bf0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
     bf2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <DIO_u8SetPinDir+0x24>
     bfa:	f2 c0       	rjmp	.+484    	; 0xde0 <DIO_u8SetPinDir+0x208>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	88 30       	cpi	r24, 0x08	; 8
     c00:	08 f0       	brcs	.+2      	; 0xc04 <DIO_u8SetPinDir+0x2c>
     c02:	ee c0       	rjmp	.+476    	; 0xde0 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	88 23       	and	r24, r24
     c08:	09 f0       	breq	.+2      	; 0xc0c <DIO_u8SetPinDir+0x34>
     c0a:	74 c0       	rjmp	.+232    	; 0xcf4 <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	38 87       	std	Y+8, r19	; 0x08
     c14:	2f 83       	std	Y+7, r18	; 0x07
     c16:	8f 81       	ldd	r24, Y+7	; 0x07
     c18:	98 85       	ldd	r25, Y+8	; 0x08
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	59 f1       	breq	.+86     	; 0xc76 <DIO_u8SetPinDir+0x9e>
     c20:	2f 81       	ldd	r18, Y+7	; 0x07
     c22:	38 85       	ldd	r19, Y+8	; 0x08
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <DIO_u8SetPinDir+0x5c>
     c2a:	8f 81       	ldd	r24, Y+7	; 0x07
     c2c:	98 85       	ldd	r25, Y+8	; 0x08
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f0       	breq	.+26     	; 0xc4c <DIO_u8SetPinDir+0x74>
     c32:	d8 c0       	rjmp	.+432    	; 0xde4 <DIO_u8SetPinDir+0x20c>
     c34:	2f 81       	ldd	r18, Y+7	; 0x07
     c36:	38 85       	ldd	r19, Y+8	; 0x08
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	89 f1       	breq	.+98     	; 0xca0 <DIO_u8SetPinDir+0xc8>
     c3e:	8f 81       	ldd	r24, Y+7	; 0x07
     c40:	98 85       	ldd	r25, Y+8	; 0x08
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <DIO_u8SetPinDir+0x72>
     c48:	40 c0       	rjmp	.+128    	; 0xcca <DIO_u8SetPinDir+0xf2>
     c4a:	cc c0       	rjmp	.+408    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
     c4c:	aa e3       	ldi	r26, 0x3A	; 58
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ea e3       	ldi	r30, 0x3A	; 58
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	48 2f       	mov	r20, r24
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 2e       	mov	r0, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_u8SetPinDir+0x92>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_u8SetPinDir+0x8e>
     c6e:	80 95       	com	r24
     c70:	84 23       	and	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	b7 c0       	rjmp	.+366    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
     c76:	a7 e3       	ldi	r26, 0x37	; 55
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e7 e3       	ldi	r30, 0x37	; 55
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_u8SetPinDir+0xbc>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_u8SetPinDir+0xb8>
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	a2 c0       	rjmp	.+324    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
     ca0:	a4 e3       	ldi	r26, 0x34	; 52
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 2e       	mov	r0, r18
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <DIO_u8SetPinDir+0xe6>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <DIO_u8SetPinDir+0xe2>
     cc2:	80 95       	com	r24
     cc4:	84 23       	and	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	8d c0       	rjmp	.+282    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
     cca:	a1 e3       	ldi	r26, 0x31	; 49
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e1 e3       	ldi	r30, 0x31	; 49
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_u8SetPinDir+0x110>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_u8SetPinDir+0x10c>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	78 c0       	rjmp	.+240    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <DIO_u8SetPinDir+0x124>
     cfa:	6f c0       	rjmp	.+222    	; 0xdda <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3e 83       	std	Y+6, r19	; 0x06
     d04:	2d 83       	std	Y+5, r18	; 0x05
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	49 f1       	breq	.+82     	; 0xd62 <DIO_u8SetPinDir+0x18a>
     d10:	2d 81       	ldd	r18, Y+5	; 0x05
     d12:	3e 81       	ldd	r19, Y+6	; 0x06
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <DIO_u8SetPinDir+0x14c>
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	61 f0       	breq	.+24     	; 0xd3a <DIO_u8SetPinDir+0x162>
     d22:	60 c0       	rjmp	.+192    	; 0xde4 <DIO_u8SetPinDir+0x20c>
     d24:	2d 81       	ldd	r18, Y+5	; 0x05
     d26:	3e 81       	ldd	r19, Y+6	; 0x06
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	71 f1       	breq	.+92     	; 0xd8a <DIO_u8SetPinDir+0x1b2>
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	e9 f1       	breq	.+122    	; 0xdb2 <DIO_u8SetPinDir+0x1da>
     d38:	55 c0       	rjmp	.+170    	; 0xde4 <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
     d3a:	aa e3       	ldi	r26, 0x3A	; 58
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ea e3       	ldi	r30, 0x3A	; 58
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_u8SetPinDir+0x180>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_u8SetPinDir+0x17c>
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	41 c0       	rjmp	.+130    	; 0xde4 <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_u8SetPinDir+0x1a8>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_u8SetPinDir+0x1a4>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	2d c0       	rjmp	.+90     	; 0xde4 <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
     d8a:	a4 e3       	ldi	r26, 0x34	; 52
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e4 e3       	ldi	r30, 0x34	; 52
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_u8SetPinDir+0x1d0>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_u8SetPinDir+0x1cc>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	19 c0       	rjmp	.+50     	; 0xde4 <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
     db2:	a1 e3       	ldi	r26, 0x31	; 49
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_u8SetPinDir+0x1f8>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_u8SetPinDir+0x1f4>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
     de4:	89 81       	ldd	r24, Y+1	; 0x01
}
     de6:	28 96       	adiw	r28, 0x08	; 8
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_u8SetPortVal+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <DIO_u8SetPortVal+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     e0a:	19 82       	std	Y+1, r1	; 0x01
	if(1)
	{
		switch( Copy_u8PortNo )
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	d1 f0       	breq	.+52     	; 0xe54 <DIO_u8SetPortVal+0x5c>
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_u8SetPortVal+0x3c>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	61 f0       	breq	.+24     	; 0xe4a <DIO_u8SetPortVal+0x52>
     e32:	1f c0       	rjmp	.+62     	; 0xe72 <DIO_u8SetPortVal+0x7a>
     e34:	2c 81       	ldd	r18, Y+4	; 0x04
     e36:	3d 81       	ldd	r19, Y+5	; 0x05
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	81 f0       	breq	.+32     	; 0xe5e <DIO_u8SetPortVal+0x66>
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	81 f0       	breq	.+32     	; 0xe68 <DIO_u8SetPortVal+0x70>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <DIO_u8SetPortVal+0x7a>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	80 83       	st	Z, r24
     e52:	11 c0       	rjmp	.+34     	; 0xe76 <DIO_u8SetPortVal+0x7e>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
     e54:	e8 e3       	ldi	r30, 0x38	; 56
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	80 83       	st	Z, r24
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <DIO_u8SetPortVal+0x7e>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	80 83       	st	Z, r24
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <DIO_u8SetPortVal+0x7e>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	80 83       	st	Z, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_u8SetPortVal+0x7e>
		    default: Local_u8ErrStatus = RT_NOK;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}

	return (Local_u8ErrStatus);
     e76:	89 81       	ldd	r24, Y+1	; 0x01

}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	28 97       	sbiw	r28, 0x08	; 8
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	6b 83       	std	Y+3, r22	; 0x03
     ea0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
     ea2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	08 f0       	brcs	.+2      	; 0xeac <DIO_u8SetPinVal+0x24>
     eaa:	f2 c0       	rjmp	.+484    	; 0x1090 <DIO_u8SetPinVal+0x208>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 30       	cpi	r24, 0x08	; 8
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <DIO_u8SetPinVal+0x2c>
     eb2:	ee c0       	rjmp	.+476    	; 0x1090 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <DIO_u8SetPinVal+0x34>
     eba:	74 c0       	rjmp	.+232    	; 0xfa4 <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	38 87       	std	Y+8, r19	; 0x08
     ec4:	2f 83       	std	Y+7, r18	; 0x07
     ec6:	8f 81       	ldd	r24, Y+7	; 0x07
     ec8:	98 85       	ldd	r25, Y+8	; 0x08
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	59 f1       	breq	.+86     	; 0xf26 <DIO_u8SetPinVal+0x9e>
     ed0:	2f 81       	ldd	r18, Y+7	; 0x07
     ed2:	38 85       	ldd	r19, Y+8	; 0x08
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <DIO_u8SetPinVal+0x5c>
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	98 85       	ldd	r25, Y+8	; 0x08
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f0       	breq	.+26     	; 0xefc <DIO_u8SetPinVal+0x74>
     ee2:	d8 c0       	rjmp	.+432    	; 0x1094 <DIO_u8SetPinVal+0x20c>
     ee4:	2f 81       	ldd	r18, Y+7	; 0x07
     ee6:	38 85       	ldd	r19, Y+8	; 0x08
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	89 f1       	breq	.+98     	; 0xf50 <DIO_u8SetPinVal+0xc8>
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_u8SetPinVal+0x72>
     ef8:	40 c0       	rjmp	.+128    	; 0xf7a <DIO_u8SetPinVal+0xf2>
     efa:	cc c0       	rjmp	.+408    	; 0x1094 <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
     efc:	ab e3       	ldi	r26, 0x3B	; 59
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	eb e3       	ldi	r30, 0x3B	; 59
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinVal+0x92>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8SetPinVal+0x8e>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	b7 c0       	rjmp	.+366    	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
     f26:	a8 e3       	ldi	r26, 0x38	; 56
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e3       	ldi	r30, 0x38	; 56
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8SetPinVal+0xbc>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8SetPinVal+0xb8>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	a2 c0       	rjmp	.+324    	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_u8SetPinVal+0xe6>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_u8SetPinVal+0xe2>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	8d c0       	rjmp	.+282    	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
     f7a:	a2 e3       	ldi	r26, 0x32	; 50
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e2 e3       	ldi	r30, 0x32	; 50
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_u8SetPinVal+0x110>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_u8SetPinVal+0x10c>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	78 c0       	rjmp	.+240    	; 0x1094 <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <DIO_u8SetPinVal+0x124>
     faa:	6f c0       	rjmp	.+222    	; 0x108a <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3e 83       	std	Y+6, r19	; 0x06
     fb4:	2d 83       	std	Y+5, r18	; 0x05
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	49 f1       	breq	.+82     	; 0x1012 <DIO_u8SetPinVal+0x18a>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <DIO_u8SetPinVal+0x14c>
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	61 f0       	breq	.+24     	; 0xfea <DIO_u8SetPinVal+0x162>
     fd2:	60 c0       	rjmp	.+192    	; 0x1094 <DIO_u8SetPinVal+0x20c>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	71 f1       	breq	.+92     	; 0x103a <DIO_u8SetPinVal+0x1b2>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	91 05       	cpc	r25, r1
     fe6:	e9 f1       	breq	.+122    	; 0x1062 <DIO_u8SetPinVal+0x1da>
     fe8:	55 c0       	rjmp	.+170    	; 0x1094 <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
     fea:	ab e3       	ldi	r26, 0x3B	; 59
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	eb e3       	ldi	r30, 0x3B	; 59
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_u8SetPinVal+0x180>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_u8SetPinVal+0x17c>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	41 c0       	rjmp	.+130    	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
    1012:	a8 e3       	ldi	r26, 0x38	; 56
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e8 e3       	ldi	r30, 0x38	; 56
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_u8SetPinVal+0x1a8>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_u8SetPinVal+0x1a4>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	2d c0       	rjmp	.+90     	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
    103a:	a5 e3       	ldi	r26, 0x35	; 53
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e3       	ldi	r30, 0x35	; 53
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinVal+0x1d0>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinVal+0x1cc>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	19 c0       	rjmp	.+50     	; 0x1094 <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
    1062:	a2 e3       	ldi	r26, 0x32	; 50
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinVal+0x1f8>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinVal+0x1f4>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	28 96       	adiw	r28, 0x08	; 8
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <DIO_u8GetPortVal+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_u8GetPortVal+0x8>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_u8GetPortVal+0xa>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8a 83       	std	Y+2, r24	; 0x02
    10b8:	7c 83       	std	Y+4, r23	; 0x04
    10ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    10bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	19 f4       	brne	.+6      	; 0x10cc <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	3d c0       	rjmp	.+122    	; 0x1146 <DIO_u8GetPortVal+0x9e>
	else
	{
		switch( Copy_u8PortNo )
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3e 83       	std	Y+6, r19	; 0x06
    10d4:	2d 83       	std	Y+5, r18	; 0x05
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	e1 f0       	breq	.+56     	; 0x1118 <DIO_u8GetPortVal+0x70>
    10e0:	2d 81       	ldd	r18, Y+5	; 0x05
    10e2:	3e 81       	ldd	r19, Y+6	; 0x06
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_u8GetPortVal+0x4c>
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_u8GetPortVal+0x62>
    10f2:	27 c0       	rjmp	.+78     	; 0x1142 <DIO_u8GetPortVal+0x9a>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	a1 f0       	breq	.+40     	; 0x1126 <DIO_u8GetPortVal+0x7e>
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	b1 f0       	breq	.+44     	; 0x1134 <DIO_u8GetPortVal+0x8c>
    1108:	1c c0       	rjmp	.+56     	; 0x1142 <DIO_u8GetPortVal+0x9a>
			{
				case PORT_A: * Copy_u8pVal = PINA_REG ; break;
    110a:	e9 e3       	ldi	r30, 0x39	; 57
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	eb 81       	ldd	r30, Y+3	; 0x03
    1112:	fc 81       	ldd	r31, Y+4	; 0x04
    1114:	80 83       	st	Z, r24
    1116:	17 c0       	rjmp	.+46     	; 0x1146 <DIO_u8GetPortVal+0x9e>
			    case PORT_B: * Copy_u8pVal = PINB_REG; break;
    1118:	e6 e3       	ldi	r30, 0x36	; 54
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	80 83       	st	Z, r24
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <DIO_u8GetPortVal+0x9e>
			    case PORT_C: * Copy_u8pVal = PINC_REG; break;
    1126:	e3 e3       	ldi	r30, 0x33	; 51
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	eb 81       	ldd	r30, Y+3	; 0x03
    112e:	fc 81       	ldd	r31, Y+4	; 0x04
    1130:	80 83       	st	Z, r24
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <DIO_u8GetPortVal+0x9e>
			    case PORT_D: * Copy_u8pVal = PIND_REG; break;
    1134:	e0 e3       	ldi	r30, 0x30	; 48
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	eb 81       	ldd	r30, Y+3	; 0x03
    113c:	fc 81       	ldd	r31, Y+4	; 0x04
    113e:	80 83       	st	Z, r24
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8GetPortVal+0x9e>
			    default: Local_u8ErrStatus = RT_NOK; break;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	26 96       	adiw	r28, 0x06	; 6
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	27 97       	sbiw	r28, 0x07	; 7
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	6b 83       	std	Y+3, r22	; 0x03
    1172:	5d 83       	std	Y+5, r21	; 0x05
    1174:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    1176:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal != NULL && Copy_u8PinNo <= PIN_7)
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_u8GetPinVal+0x28>
    1180:	78 c0       	rjmp	.+240    	; 0x1272 <DIO_u8GetPinVal+0x118>
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	08 f0       	brcs	.+2      	; 0x118a <DIO_u8GetPinVal+0x30>
    1188:	74 c0       	rjmp	.+232    	; 0x1272 <DIO_u8GetPinVal+0x118>
	{
		switch(Copy_u8PortNo)
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3f 83       	std	Y+7, r19	; 0x07
    1192:	2e 83       	std	Y+6, r18	; 0x06
    1194:	4e 81       	ldd	r20, Y+6	; 0x06
    1196:	5f 81       	ldd	r21, Y+7	; 0x07
    1198:	41 30       	cpi	r20, 0x01	; 1
    119a:	51 05       	cpc	r21, r1
    119c:	59 f1       	breq	.+86     	; 0x11f4 <DIO_u8GetPinVal+0x9a>
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	34 f4       	brge	.+12     	; 0x11b4 <DIO_u8GetPinVal+0x5a>
    11a8:	2e 81       	ldd	r18, Y+6	; 0x06
    11aa:	3f 81       	ldd	r19, Y+7	; 0x07
    11ac:	21 15       	cp	r18, r1
    11ae:	31 05       	cpc	r19, r1
    11b0:	69 f0       	breq	.+26     	; 0x11cc <DIO_u8GetPinVal+0x72>
    11b2:	5c c0       	rjmp	.+184    	; 0x126c <DIO_u8GetPinVal+0x112>
    11b4:	4e 81       	ldd	r20, Y+6	; 0x06
    11b6:	5f 81       	ldd	r21, Y+7	; 0x07
    11b8:	42 30       	cpi	r20, 0x02	; 2
    11ba:	51 05       	cpc	r21, r1
    11bc:	79 f1       	breq	.+94     	; 0x121c <DIO_u8GetPinVal+0xc2>
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_u8GetPinVal+0x70>
    11c8:	3d c0       	rjmp	.+122    	; 0x1244 <DIO_u8GetPinVal+0xea>
    11ca:	50 c0       	rjmp	.+160    	; 0x126c <DIO_u8GetPinVal+0x112>
		{
			case PORT_A: * Copy_u8pVal = GET_BIT(PINA_REG , Copy_u8PinNo ); break;
    11cc:	e9 e3       	ldi	r30, 0x39	; 57
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_u8GetPinVal+0x8a>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_u8GetPinVal+0x86>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	ec 81       	ldd	r30, Y+4	; 0x04
    11ee:	fd 81       	ldd	r31, Y+5	; 0x05
    11f0:	80 83       	st	Z, r24
    11f2:	41 c0       	rjmp	.+130    	; 0x1276 <DIO_u8GetPinVal+0x11c>
			case PORT_B: * Copy_u8pVal = GET_BIT(PINB_REG , Copy_u8PinNo ); break;
    11f4:	e6 e3       	ldi	r30, 0x36	; 54
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8GetPinVal+0xb2>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8GetPinVal+0xae>
    1210:	ca 01       	movw	r24, r20
    1212:	81 70       	andi	r24, 0x01	; 1
    1214:	ec 81       	ldd	r30, Y+4	; 0x04
    1216:	fd 81       	ldd	r31, Y+5	; 0x05
    1218:	80 83       	st	Z, r24
    121a:	2d c0       	rjmp	.+90     	; 0x1276 <DIO_u8GetPinVal+0x11c>
			case PORT_C: * Copy_u8pVal = GET_BIT(PINC_REG , Copy_u8PinNo ); break;
    121c:	e3 e3       	ldi	r30, 0x33	; 51
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8GetPinVal+0xda>
    1230:	55 95       	asr	r21
    1232:	47 95       	ror	r20
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8GetPinVal+0xd6>
    1238:	ca 01       	movw	r24, r20
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	ec 81       	ldd	r30, Y+4	; 0x04
    123e:	fd 81       	ldd	r31, Y+5	; 0x05
    1240:	80 83       	st	Z, r24
    1242:	19 c0       	rjmp	.+50     	; 0x1276 <DIO_u8GetPinVal+0x11c>
			case PORT_D: * Copy_u8pVal = GET_BIT(PIND_REG , Copy_u8PinNo ); break;
    1244:	e0 e3       	ldi	r30, 0x30	; 48
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_u8GetPinVal+0x102>
    1258:	55 95       	asr	r21
    125a:	47 95       	ror	r20
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_u8GetPinVal+0xfe>
    1260:	ca 01       	movw	r24, r20
    1262:	81 70       	andi	r24, 0x01	; 1
    1264:	ec 81       	ldd	r30, Y+4	; 0x04
    1266:	fd 81       	ldd	r31, Y+5	; 0x05
    1268:	80 83       	st	Z, r24
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <DIO_u8GetPinVal+0x11c>
			default : Local_u8ErrStatus = RT_NOK ;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_u8GetPinVal+0x11c>
		}
	}
		else{Local_u8ErrStatus = RT_NOK;}
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01

	return(Local_u8ErrStatus);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
}
    1278:	27 96       	adiw	r28, 0x07	; 7
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <LCD_vidInit>:
#define LCD_FUNC_SET_CMD (u8)    0b00111000
#define LCD_ON_OFF_CTRL_CMD (u8) 0b00001110
#define LCD_DISPLAY_CLR_CMD (u8) 0b00000001
#define LCD_ENTRY_MODE_CMD (u8)  0b00000110
extern void LCD_vidInit(void)
{
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	c6 54       	subi	r28, 0x46	; 70
    1298:	d0 40       	sbci	r29, 0x00	; 0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDir(LCD_DATA_PORT,OUTPUT_PORT);
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	6f ef       	ldi	r22, 0xFF	; 255
    12a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPortDir>
	DIO_u8SetPinDir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
    12ca:	fe 01       	movw	r30, r28
    12cc:	ed 5b       	subi	r30, 0xBD	; 189
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e2       	ldi	r26, 0x20	; 32
    12d6:	b2 e4       	ldi	r27, 0x42	; 66
    12d8:	80 83       	st	Z, r24
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	a2 83       	std	Z+2, r26	; 0x02
    12de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	8e 01       	movw	r16, r28
    12e2:	01 5c       	subi	r16, 0xC1	; 193
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	fe 01       	movw	r30, r28
    12e8:	ed 5b       	subi	r30, 0xBD	; 189
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a ef       	ldi	r20, 0xFA	; 250
    12fa:	54 e4       	ldi	r21, 0x44	; 68
    12fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	f8 01       	movw	r30, r16
    1306:	80 83       	st	Z, r24
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	a2 83       	std	Z+2, r26	; 0x02
    130c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    130e:	fe 01       	movw	r30, r28
    1310:	ff 96       	adiw	r30, 0x3f	; 63
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e8       	ldi	r20, 0x80	; 128
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1326:	88 23       	and	r24, r24
    1328:	2c f4       	brge	.+10     	; 0x1334 <LCD_vidInit+0xaa>
		__ticks = 1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9e af       	std	Y+62, r25	; 0x3e
    1330:	8d af       	std	Y+61, r24	; 0x3d
    1332:	46 c0       	rjmp	.+140    	; 0x13c0 <LCD_vidInit+0x136>
	else if (__tmp > 65535)
    1334:	fe 01       	movw	r30, r28
    1336:	ff 96       	adiw	r30, 0x3f	; 63
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    134c:	18 16       	cp	r1, r24
    134e:	64 f5       	brge	.+88     	; 0x13a8 <LCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	fe 01       	movw	r30, r28
    1352:	ed 5b       	subi	r30, 0xBD	; 189
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e af       	std	Y+62, r25	; 0x3e
    137c:	8d af       	std	Y+61, r24	; 0x3d
    137e:	0f c0       	rjmp	.+30     	; 0x139e <LCD_vidInit+0x114>
    1380:	88 ec       	ldi	r24, 0xC8	; 200
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9c af       	std	Y+60, r25	; 0x3c
    1386:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1388:	8b ad       	ldd	r24, Y+59	; 0x3b
    138a:	9c ad       	ldd	r25, Y+60	; 0x3c
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_vidInit+0x102>
    1390:	9c af       	std	Y+60, r25	; 0x3c
    1392:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1394:	8d ad       	ldd	r24, Y+61	; 0x3d
    1396:	9e ad       	ldd	r25, Y+62	; 0x3e
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9e af       	std	Y+62, r25	; 0x3e
    139c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	8d ad       	ldd	r24, Y+61	; 0x3d
    13a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	69 f7       	brne	.-38     	; 0x1380 <LCD_vidInit+0xf6>
    13a6:	16 c0       	rjmp	.+44     	; 0x13d4 <LCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	fe 01       	movw	r30, r28
    13aa:	ff 96       	adiw	r30, 0x3f	; 63
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e af       	std	Y+62, r25	; 0x3e
    13be:	8d af       	std	Y+61, r24	; 0x3d
    13c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13c4:	9a af       	std	Y+58, r25	; 0x3a
    13c6:	89 af       	std	Y+57, r24	; 0x39
    13c8:	89 ad       	ldd	r24, Y+57	; 0x39
    13ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <LCD_vidInit+0x142>
    13d0:	9a af       	std	Y+58, r25	; 0x3a
    13d2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_vidSendCommand(LCD_FUNC_SET_CMD);
    13d4:	88 e3       	ldi	r24, 0x38	; 56
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_vidSendCommand>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e8       	ldi	r26, 0x80	; 128
    13e2:	bf e3       	ldi	r27, 0x3F	; 63
    13e4:	8d ab       	std	Y+53, r24	; 0x35
    13e6:	9e ab       	std	Y+54, r25	; 0x36
    13e8:	af ab       	std	Y+55, r26	; 0x37
    13ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6d a9       	ldd	r22, Y+53	; 0x35
    13ee:	7e a9       	ldd	r23, Y+54	; 0x36
    13f0:	8f a9       	ldd	r24, Y+55	; 0x37
    13f2:	98 ad       	ldd	r25, Y+56	; 0x38
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a ef       	ldi	r20, 0xFA	; 250
    13fa:	54 e4       	ldi	r21, 0x44	; 68
    13fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	89 ab       	std	Y+49, r24	; 0x31
    1406:	9a ab       	std	Y+50, r25	; 0x32
    1408:	ab ab       	std	Y+51, r26	; 0x33
    140a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    140c:	69 a9       	ldd	r22, Y+49	; 0x31
    140e:	7a a9       	ldd	r23, Y+50	; 0x32
    1410:	8b a9       	ldd	r24, Y+51	; 0x33
    1412:	9c a9       	ldd	r25, Y+52	; 0x34
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <LCD_vidInit+0x1a4>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	98 ab       	std	Y+48, r25	; 0x30
    142a:	8f a7       	std	Y+47, r24	; 0x2f
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <LCD_vidInit+0x222>
	else if (__tmp > 65535)
    142e:	69 a9       	ldd	r22, Y+49	; 0x31
    1430:	7a a9       	ldd	r23, Y+50	; 0x32
    1432:	8b a9       	ldd	r24, Y+51	; 0x33
    1434:	9c a9       	ldd	r25, Y+52	; 0x34
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <LCD_vidInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6d a9       	ldd	r22, Y+53	; 0x35
    1448:	7e a9       	ldd	r23, Y+54	; 0x36
    144a:	8f a9       	ldd	r24, Y+55	; 0x37
    144c:	98 ad       	ldd	r25, Y+56	; 0x38
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	98 ab       	std	Y+48, r25	; 0x30
    146c:	8f a7       	std	Y+47, r24	; 0x2f
    146e:	0f c0       	rjmp	.+30     	; 0x148e <LCD_vidInit+0x204>
    1470:	88 ec       	ldi	r24, 0xC8	; 200
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9e a7       	std	Y+46, r25	; 0x2e
    1476:	8d a7       	std	Y+45, r24	; 0x2d
    1478:	8d a5       	ldd	r24, Y+45	; 0x2d
    147a:	9e a5       	ldd	r25, Y+46	; 0x2e
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_vidInit+0x1f2>
    1480:	9e a7       	std	Y+46, r25	; 0x2e
    1482:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8f a5       	ldd	r24, Y+47	; 0x2f
    1486:	98 a9       	ldd	r25, Y+48	; 0x30
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	98 ab       	std	Y+48, r25	; 0x30
    148c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1490:	98 a9       	ldd	r25, Y+48	; 0x30
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <LCD_vidInit+0x1e6>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <LCD_vidInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	69 a9       	ldd	r22, Y+49	; 0x31
    149a:	7a a9       	ldd	r23, Y+50	; 0x32
    149c:	8b a9       	ldd	r24, Y+51	; 0x33
    149e:	9c a9       	ldd	r25, Y+52	; 0x34
    14a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	98 ab       	std	Y+48, r25	; 0x30
    14aa:	8f a7       	std	Y+47, r24	; 0x2f
    14ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ae:	98 a9       	ldd	r25, Y+48	; 0x30
    14b0:	9c a7       	std	Y+44, r25	; 0x2c
    14b2:	8b a7       	std	Y+43, r24	; 0x2b
    14b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <LCD_vidInit+0x22e>
    14bc:	9c a7       	std	Y+44, r25	; 0x2c
    14be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(LCD_ON_OFF_CTRL_CMD);
    14c0:	8e e0       	ldi	r24, 0x0E	; 14
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_vidSendCommand>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e8       	ldi	r26, 0x80	; 128
    14ce:	bf e3       	ldi	r27, 0x3F	; 63
    14d0:	8f a3       	std	Y+39, r24	; 0x27
    14d2:	98 a7       	std	Y+40, r25	; 0x28
    14d4:	a9 a7       	std	Y+41, r26	; 0x29
    14d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d8:	6f a1       	ldd	r22, Y+39	; 0x27
    14da:	78 a5       	ldd	r23, Y+40	; 0x28
    14dc:	89 a5       	ldd	r24, Y+41	; 0x29
    14de:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a ef       	ldi	r20, 0xFA	; 250
    14e6:	54 e4       	ldi	r21, 0x44	; 68
    14e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	8b a3       	std	Y+35, r24	; 0x23
    14f2:	9c a3       	std	Y+36, r25	; 0x24
    14f4:	ad a3       	std	Y+37, r26	; 0x25
    14f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14f8:	6b a1       	ldd	r22, Y+35	; 0x23
    14fa:	7c a1       	ldd	r23, Y+36	; 0x24
    14fc:	8d a1       	ldd	r24, Y+37	; 0x25
    14fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	2c f4       	brge	.+10     	; 0x151a <LCD_vidInit+0x290>
		__ticks = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9a a3       	std	Y+34, r25	; 0x22
    1516:	89 a3       	std	Y+33, r24	; 0x21
    1518:	3f c0       	rjmp	.+126    	; 0x1598 <LCD_vidInit+0x30e>
	else if (__tmp > 65535)
    151a:	6b a1       	ldd	r22, Y+35	; 0x23
    151c:	7c a1       	ldd	r23, Y+36	; 0x24
    151e:	8d a1       	ldd	r24, Y+37	; 0x25
    1520:	9e a1       	ldd	r25, Y+38	; 0x26
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	4c f5       	brge	.+82     	; 0x1584 <LCD_vidInit+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	6f a1       	ldd	r22, Y+39	; 0x27
    1534:	78 a5       	ldd	r23, Y+40	; 0x28
    1536:	89 a5       	ldd	r24, Y+41	; 0x29
    1538:	9a a5       	ldd	r25, Y+42	; 0x2a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9a a3       	std	Y+34, r25	; 0x22
    1558:	89 a3       	std	Y+33, r24	; 0x21
    155a:	0f c0       	rjmp	.+30     	; 0x157a <LCD_vidInit+0x2f0>
    155c:	88 ec       	ldi	r24, 0xC8	; 200
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	98 a3       	std	Y+32, r25	; 0x20
    1562:	8f 8f       	std	Y+31, r24	; 0x1f
    1564:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1566:	98 a1       	ldd	r25, Y+32	; 0x20
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <LCD_vidInit+0x2de>
    156c:	98 a3       	std	Y+32, r25	; 0x20
    156e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	9a a3       	std	Y+34, r25	; 0x22
    1578:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	9a a1       	ldd	r25, Y+34	; 0x22
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <LCD_vidInit+0x2d2>
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <LCD_vidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	6b a1       	ldd	r22, Y+35	; 0x23
    1586:	7c a1       	ldd	r23, Y+36	; 0x24
    1588:	8d a1       	ldd	r24, Y+37	; 0x25
    158a:	9e a1       	ldd	r25, Y+38	; 0x26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	89 a1       	ldd	r24, Y+33	; 0x21
    159a:	9a a1       	ldd	r25, Y+34	; 0x22
    159c:	9e 8f       	std	Y+30, r25	; 0x1e
    159e:	8d 8f       	std	Y+29, r24	; 0x1d
    15a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCD_vidInit+0x31a>
    15a8:	9e 8f       	std	Y+30, r25	; 0x1e
    15aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vidSendCommand(LCD_DISPLAY_CLR_CMD);
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_vidSendCommand>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e4       	ldi	r27, 0x40	; 64
    15bc:	89 8f       	std	Y+25, r24	; 0x19
    15be:	9a 8f       	std	Y+26, r25	; 0x1a
    15c0:	ab 8f       	std	Y+27, r26	; 0x1b
    15c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	69 8d       	ldd	r22, Y+25	; 0x19
    15c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8d 8b       	std	Y+21, r24	; 0x15
    15de:	9e 8b       	std	Y+22, r25	; 0x16
    15e0:	af 8b       	std	Y+23, r26	; 0x17
    15e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <LCD_vidInit+0x37c>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <LCD_vidInit+0x3fa>
	else if (__tmp > 65535)
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	69 8d       	ldd	r22, Y+25	; 0x19
    1620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <LCD_vidInit+0x3dc>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	89 8b       	std	Y+17, r24	; 0x11
    1650:	89 89       	ldd	r24, Y+17	; 0x11
    1652:	9a 89       	ldd	r25, Y+18	; 0x12
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <LCD_vidInit+0x3ca>
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <LCD_vidInit+0x3be>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <LCD_vidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6d 89       	ldd	r22, Y+21	; 0x15
    1672:	7e 89       	ldd	r23, Y+22	; 0x16
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	98 8b       	std	Y+16, r25	; 0x10
    168a:	8f 87       	std	Y+15, r24	; 0x0f
    168c:	8f 85       	ldd	r24, Y+15	; 0x0f
    168e:	98 89       	ldd	r25, Y+16	; 0x10
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <LCD_vidInit+0x406>
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(LCD_ENTRY_MODE_CMD);
    1698:	86 e0       	ldi	r24, 0x06	; 6
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_vidSendCommand>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e8       	ldi	r26, 0x80	; 128
    16a6:	bf e3       	ldi	r27, 0x3F	; 63
    16a8:	8b 87       	std	Y+11, r24	; 0x0b
    16aa:	9c 87       	std	Y+12, r25	; 0x0c
    16ac:	ad 87       	std	Y+13, r26	; 0x0d
    16ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a ef       	ldi	r20, 0xFA	; 250
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8f 83       	std	Y+7, r24	; 0x07
    16ca:	98 87       	std	Y+8, r25	; 0x08
    16cc:	a9 87       	std	Y+9, r26	; 0x09
    16ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e4:	88 23       	and	r24, r24
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <LCD_vidInit+0x468>
		__ticks = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <LCD_vidInit+0x4e6>
	else if (__tmp > 65535)
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	4c f5       	brge	.+82     	; 0x175c <LCD_vidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <LCD_vidInit+0x4c8>
    1734:	88 ec       	ldi	r24, 0xC8	; 200
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_vidInit+0x4b6>
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f7       	brne	.-38     	; 0x1734 <LCD_vidInit+0x4aa>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <LCD_vidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_vidInit+0x4f2>
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1784:	ca 5b       	subi	r28, 0xBA	; 186
    1786:	df 4f       	sbci	r29, 0xFF	; 255
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <LCD_vidSendCommand>:
extern void LCD_vidSendCommand(u8 Copy_u8Command)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	6d 97       	sbiw	r28, 0x1d	; 29
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	89 8f       	std	Y+25, r24	; 0x19
    17e2:	9a 8f       	std	Y+26, r25	; 0x1a
    17e4:	ab 8f       	std	Y+27, r26	; 0x1b
    17e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8d 8b       	std	Y+21, r24	; 0x15
    1802:	9e 8b       	std	Y+22, r25	; 0x16
    1804:	af 8b       	std	Y+23, r26	; 0x17
    1806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 8b       	std	Y+20, r25	; 0x14
    1826:	8b 8b       	std	Y+19, r24	; 0x13
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    182a:	6d 89       	ldd	r22, Y+21	; 0x15
    182c:	7e 89       	ldd	r23, Y+22	; 0x16
    182e:	8f 89       	ldd	r24, Y+23	; 0x17
    1830:	98 8d       	ldd	r25, Y+24	; 0x18
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
    186a:	0f c0       	rjmp	.+30     	; 0x188a <LCD_vidSendCommand+0xee>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	89 8b       	std	Y+17, r24	; 0x11
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_vidSendCommand+0xdc>
    187c:	9a 8b       	std	Y+18, r25	; 0x12
    187e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <LCD_vidSendCommand+0xd0>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	98 8b       	std	Y+16, r25	; 0x10
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	98 89       	ldd	r25, Y+16	; 0x10
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <LCD_vidSendCommand+0x118>
    18b8:	98 8b       	std	Y+16, r25	; 0x10
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e4       	ldi	r27, 0x40	; 64
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
    18d2:	ad 87       	std	Y+13, r26	; 0x0d
    18d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    18f0:	98 87       	std	Y+8, r25	; 0x08
    18f2:	a9 87       	std	Y+9, r26	; 0x09
    18f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_vidSendCommand+0x1dc>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_vidSendCommand+0x1ca>
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <LCD_vidSendCommand+0x1be>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_vidSendCommand+0x206>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



}
    19aa:	6d 96       	adiw	r28, 0x1d	; 29
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <LCD_VidWriteCharacter>:
extern void LCD_VidWriteCharacter(u8 Copy_u8character)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	6d 97       	sbiw	r28, 0x1d	; 29
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8character);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19ea:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	b0 e4       	ldi	r27, 0x40	; 64
    1a00:	89 8f       	std	Y+25, r24	; 0x19
    1a02:	9a 8f       	std	Y+26, r25	; 0x1a
    1a04:	ab 8f       	std	Y+27, r26	; 0x1b
    1a06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8d 8b       	std	Y+21, r24	; 0x15
    1a22:	9e 8b       	std	Y+22, r25	; 0x16
    1a24:	af 8b       	std	Y+23, r26	; 0x17
    1a26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a28:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <LCD_VidWriteCharacter+0x8e>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c 8b       	std	Y+20, r25	; 0x14
    1a46:	8b 8b       	std	Y+19, r24	; 0x13
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <LCD_VidWriteCharacter+0x10c>
	else if (__tmp > 65535)
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <LCD_VidWriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	69 8d       	ldd	r22, Y+25	; 0x19
    1a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <LCD_VidWriteCharacter+0xee>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9a 8b       	std	Y+18, r25	; 0x12
    1a92:	89 8b       	std	Y+17, r24	; 0x11
    1a94:	89 89       	ldd	r24, Y+17	; 0x11
    1a96:	9a 89       	ldd	r25, Y+18	; 0x12
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_VidWriteCharacter+0xdc>
    1a9c:	9a 8b       	std	Y+18, r25	; 0x12
    1a9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9c 8b       	std	Y+20, r25	; 0x14
    1aa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1aac:	9c 89       	ldd	r25, Y+20	; 0x14
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <LCD_VidWriteCharacter+0xd0>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <LCD_VidWriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aba:	98 8d       	ldd	r25, Y+24	; 0x18
    1abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9c 8b       	std	Y+20, r25	; 0x14
    1ac6:	8b 8b       	std	Y+19, r24	; 0x13
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	98 8b       	std	Y+16, r25	; 0x10
    1ace:	8f 87       	std	Y+15, r24	; 0x0f
    1ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad2:	98 89       	ldd	r25, Y+16	; 0x10
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_VidWriteCharacter+0x118>
    1ad8:	98 8b       	std	Y+16, r25	; 0x10
    1ada:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e0       	ldi	r26, 0x00	; 0
    1aec:	b0 e4       	ldi	r27, 0x40	; 64
    1aee:	8b 87       	std	Y+11, r24	; 0x0b
    1af0:	9c 87       	std	Y+12, r25	; 0x0c
    1af2:	ad 87       	std	Y+13, r26	; 0x0d
    1af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8f 83       	std	Y+7, r24	; 0x07
    1b10:	98 87       	std	Y+8, r25	; 0x08
    1b12:	a9 87       	std	Y+9, r26	; 0x09
    1b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <LCD_VidWriteCharacter+0x17c>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <LCD_VidWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <LCD_VidWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <LCD_VidWriteCharacter+0x1dc>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_VidWriteCharacter+0x1ca>
    1b8a:	9c 83       	std	Y+4, r25	; 0x04
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <LCD_VidWriteCharacter+0x1be>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <LCD_VidWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_VidWriteCharacter+0x206>
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1bca:	6d 96       	adiw	r28, 0x1d	; 29
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <KEYPAD_vidInit>:
#include"../../MCAL/DIO/DIO_int.h"
#include"KEYPAD_cfg.h"
#define NOT_PRESSED (u8) 0
extern u8 KEYPAD_u8arrKeypadMap[KEYPAD_ROWS][KEYPAD_COLS];
void KEYPAD_vidInit(void)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * SET columns as output
	 */
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_COL1_PIN , OUTPUT);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	63 e0       	ldi	r22, 0x03	; 3
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_COL2_PIN , OUTPUT);
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_COL3_PIN , OUTPUT);
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_COL4_PIN , OUTPUT);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	/*
	 * set columns by high
	 */
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_COL1_PIN , HIGH);
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	63 e0       	ldi	r22, 0x03	; 3
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_COL2_PIN , HIGH);
    1c16:	83 e0       	ldi	r24, 0x03	; 3
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_COL3_PIN , HIGH);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_COL4_PIN , HIGH);
    1c2a:	83 e0       	ldi	r24, 0x03	; 3
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	/*
	 * set rows as input
	 */
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_ROW1_PIN , INPUT);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	64 e0       	ldi	r22, 0x04	; 4
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_ROW2_PIN , INPUT);
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	65 e0       	ldi	r22, 0x05	; 5
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_ROW3_PIN , INPUT);
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	66 e0       	ldi	r22, 0x06	; 6
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(KEYPAD_PORT,KEYPAD_ROW4_PIN , INPUT);
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	67 e0       	ldi	r22, 0x07	; 7
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DIO_u8SetPinDir>
	/*
	 * ENABLE PULLUP FOR ROWS
	 */
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_ROW1_PIN , HIGH);
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_ROW2_PIN , HIGH);
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	65 e0       	ldi	r22, 0x05	; 5
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_ROW3_PIN , HIGH);
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	66 e0       	ldi	r22, 0x06	; 6
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(KEYPAD_PORT,KEYPAD_ROW4_PIN , HIGH);
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	67 e0       	ldi	r22, 0x07	; 7
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
}
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <KEYPAD_u8GetPressed>:

u8 KEYPAD_u8GetPressed(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	a0 97       	sbiw	r28, 0x20	; 32
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedSwitch = NOT_PRESSED ;
    1c9e:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 Local_u8CurrentCol;
	u8 Local_u8CurrentRow ;
	u8 Local_u8CurrentRowStatus;

	for(Local_u8CurrentCol = KEYPAD_COL_START; Local_u8CurrentCol <=KEYPAD_COL_END;  Local_u8CurrentCol++)
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca4:	2b c1       	rjmp	.+598    	; 0x1efc <KEYPAD_u8GetPressed+0x272>
	{
		DIO_u8SetPinVal(KEYPAD_PORT  , Local_u8CurrentCol , LOW);
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
		for(Local_u8CurrentRow = KEYPAD_ROW_START; Local_u8CurrentRow <=KEYPAD_ROW_END;  Local_u8CurrentRow++)
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb4:	17 c1       	rjmp	.+558    	; 0x1ee4 <KEYPAD_u8GetPressed+0x25a>
		{
			DIO_u8GetPinVal(KEYPAD_PORT,Local_u8CurrentRow,&Local_u8CurrentRowStatus);
    1cb6:	9e 01       	movw	r18, r28
    1cb8:	20 5e       	subi	r18, 0xE0	; 224
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	0e 94 ad 08 	call	0x115a	; 0x115a <DIO_u8GetPinVal>
			{
				if(Local_u8CurrentRowStatus==LOW)
    1cc6:	88 a1       	ldd	r24, Y+32	; 0x20
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f0       	breq	.+2      	; 0x1cce <KEYPAD_u8GetPressed+0x44>
    1ccc:	08 c1       	rjmp	.+528    	; 0x1ede <KEYPAD_u8GetPressed+0x254>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 ea       	ldi	r26, 0xA0	; 160
    1cd4:	b0 e4       	ldi	r27, 0x40	; 64
    1cd6:	89 8f       	std	Y+25, r24	; 0x19
    1cd8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cda:	ab 8f       	std	Y+27, r26	; 0x1b
    1cdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8d 8b       	std	Y+21, r24	; 0x15
    1cf8:	9e 8b       	std	Y+22, r25	; 0x16
    1cfa:	af 8b       	std	Y+23, r26	; 0x17
    1cfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1d00:	7e 89       	ldd	r23, Y+22	; 0x16
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <KEYPAD_u8GetPressed+0x96>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9c 8b       	std	Y+20, r25	; 0x14
    1d1c:	8b 8b       	std	Y+19, r24	; 0x13
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <KEYPAD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <KEYPAD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <KEYPAD_u8GetPressed+0xf6>
    1d62:	88 ec       	ldi	r24, 0xC8	; 200
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9a 8b       	std	Y+18, r25	; 0x12
    1d68:	89 8b       	std	Y+17, r24	; 0x11
    1d6a:	89 89       	ldd	r24, Y+17	; 0x11
    1d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <KEYPAD_u8GetPressed+0xe4>
    1d72:	9a 8b       	std	Y+18, r25	; 0x12
    1d74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
    1d7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <KEYPAD_u8GetPressed+0xd8>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <KEYPAD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9c 8b       	std	Y+20, r25	; 0x14
    1d9c:	8b 8b       	std	Y+19, r24	; 0x13
    1d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1da0:	9c 89       	ldd	r25, Y+20	; 0x14
    1da2:	98 8b       	std	Y+16, r25	; 0x10
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
    1da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da8:	98 89       	ldd	r25, Y+16	; 0x10
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <KEYPAD_u8GetPressed+0x120>
    1dae:	98 8b       	std	Y+16, r25	; 0x10
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
				{

					_delay_ms(5);
					Local_u8PressedSwitch = KEYPAD_u8arrKeypadMap[Local_u8CurrentRow - KEYPAD_ROW_START][Local_u8CurrentCol - KEYPAD_COL_START];
    1db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	ac 01       	movw	r20, r24
    1dba:	44 50       	subi	r20, 0x04	; 4
    1dbc:	50 40       	sbci	r21, 0x00	; 0
    1dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	23 50       	subi	r18, 0x03	; 3
    1dc8:	30 40       	sbci	r19, 0x00	; 0
    1dca:	ca 01       	movw	r24, r20
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e8 59       	subi	r30, 0x98	; 152
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 8f       	std	Y+31, r24	; 0x1f
    1de2:	08 c0       	rjmp	.+16     	; 0x1df4 <KEYPAD_u8GetPressed+0x16a>
					while(Local_u8CurrentRowStatus==LOW)
					{
						DIO_u8GetPinVal(KEYPAD_PORT,Local_u8CurrentRow,&Local_u8CurrentRowStatus);
    1de4:	9e 01       	movw	r18, r28
    1de6:	20 5e       	subi	r18, 0xE0	; 224
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1dee:	a9 01       	movw	r20, r18
    1df0:	0e 94 ad 08 	call	0x115a	; 0x115a <DIO_u8GetPinVal>
				if(Local_u8CurrentRowStatus==LOW)
				{

					_delay_ms(5);
					Local_u8PressedSwitch = KEYPAD_u8arrKeypadMap[Local_u8CurrentRow - KEYPAD_ROW_START][Local_u8CurrentCol - KEYPAD_COL_START];
					while(Local_u8CurrentRowStatus==LOW)
    1df4:	88 a1       	ldd	r24, Y+32	; 0x20
    1df6:	88 23       	and	r24, r24
    1df8:	a9 f3       	breq	.-22     	; 0x1de4 <KEYPAD_u8GetPressed+0x15a>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 ea       	ldi	r26, 0xA0	; 160
    1e00:	b0 e4       	ldi	r27, 0x40	; 64
    1e02:	8b 87       	std	Y+11, r24	; 0x0b
    1e04:	9c 87       	std	Y+12, r25	; 0x0c
    1e06:	ad 87       	std	Y+13, r26	; 0x0d
    1e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8f 83       	std	Y+7, r24	; 0x07
    1e24:	98 87       	std	Y+8, r25	; 0x08
    1e26:	a9 87       	std	Y+9, r26	; 0x09
    1e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <KEYPAD_u8GetPressed+0x1c2>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <KEYPAD_u8GetPressed+0x240>
	else if (__tmp > 65535)
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <KEYPAD_u8GetPressed+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <KEYPAD_u8GetPressed+0x222>
    1e8e:	88 ec       	ldi	r24, 0xC8	; 200
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9c 83       	std	Y+4, r25	; 0x04
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <KEYPAD_u8GetPressed+0x210>
    1e9e:	9c 83       	std	Y+4, r25	; 0x04
    1ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <KEYPAD_u8GetPressed+0x204>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <KEYPAD_u8GetPressed+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	9a 83       	std	Y+2, r25	; 0x02
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <KEYPAD_u8GetPressed+0x24c>
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8CurrentRowStatus;

	for(Local_u8CurrentCol = KEYPAD_COL_START; Local_u8CurrentCol <=KEYPAD_COL_END;  Local_u8CurrentCol++)
	{
		DIO_u8SetPinVal(KEYPAD_PORT  , Local_u8CurrentCol , LOW);
		for(Local_u8CurrentRow = KEYPAD_ROW_START; Local_u8CurrentRow <=KEYPAD_ROW_END;  Local_u8CurrentRow++)
    1ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ee4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ee6:	88 30       	cpi	r24, 0x08	; 8
    1ee8:	08 f4       	brcc	.+2      	; 0x1eec <KEYPAD_u8GetPressed+0x262>
    1eea:	e5 ce       	rjmp	.-566    	; 0x1cb6 <KEYPAD_u8GetPressed+0x2c>
					_delay_ms(5);

				}
			}
		}
		DIO_u8SetPinVal(KEYPAD_PORT  , Local_u8CurrentCol , HIGH);
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_u8SetPinVal>
	u8 Local_u8PressedSwitch = NOT_PRESSED ;
	u8 Local_u8CurrentCol;
	u8 Local_u8CurrentRow ;
	u8 Local_u8CurrentRowStatus;

	for(Local_u8CurrentCol = KEYPAD_COL_START; Local_u8CurrentCol <=KEYPAD_COL_END;  Local_u8CurrentCol++)
    1ef6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	8e 8f       	std	Y+30, r24	; 0x1e
    1efc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1efe:	88 23       	and	r24, r24
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <KEYPAD_u8GetPressed+0x27a>
    1f02:	d1 ce       	rjmp	.-606    	; 0x1ca6 <KEYPAD_u8GetPressed+0x1c>
			}
		}
		DIO_u8SetPinVal(KEYPAD_PORT  , Local_u8CurrentCol , HIGH);
	}

	return(Local_u8PressedSwitch);
    1f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    1f06:	a0 96       	adiw	r28, 0x20	; 32
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <main>:
#include"../HAL/KEYPAD_handler/KEYPAD_int.h"
#include "../MCAL/DIO/DIO_int.h"
#include "util/delay.h"

void main (void)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Key ;
	LCD_vidInit();
    1f22:	0e 94 45 09 	call	0x128a	; 0x128a <LCD_vidInit>
	KEYPAD_vidInit();
    1f26:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <KEYPAD_vidInit>

	while(1)
	{
		Local_u8Key = KEYPAD_u8GetPressed();
    1f2a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <KEYPAD_u8GetPressed>
    1f2e:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Key != 0)
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	88 23       	and	r24, r24
    1f34:	d1 f3       	breq	.-12     	; 0x1f2a <main+0x12>
		{
			LCD_VidWriteCharacter(Local_u8Key);
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_VidWriteCharacter>
    1f3c:	f6 cf       	rjmp	.-20     	; 0x1f2a <main+0x12>

00001f3e <__prologue_saves__>:
    1f3e:	2f 92       	push	r2
    1f40:	3f 92       	push	r3
    1f42:	4f 92       	push	r4
    1f44:	5f 92       	push	r5
    1f46:	6f 92       	push	r6
    1f48:	7f 92       	push	r7
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	ca 1b       	sub	r28, r26
    1f68:	db 0b       	sbc	r29, r27
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	09 94       	ijmp

00001f76 <__epilogue_restores__>:
    1f76:	2a 88       	ldd	r2, Y+18	; 0x12
    1f78:	39 88       	ldd	r3, Y+17	; 0x11
    1f7a:	48 88       	ldd	r4, Y+16	; 0x10
    1f7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f88:	b9 84       	ldd	r11, Y+9	; 0x09
    1f8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f8c:	df 80       	ldd	r13, Y+7	; 0x07
    1f8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f90:	fd 80       	ldd	r15, Y+5	; 0x05
    1f92:	0c 81       	ldd	r16, Y+4	; 0x04
    1f94:	1b 81       	ldd	r17, Y+3	; 0x03
    1f96:	aa 81       	ldd	r26, Y+2	; 0x02
    1f98:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9a:	ce 0f       	add	r28, r30
    1f9c:	d1 1d       	adc	r29, r1
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	ed 01       	movw	r28, r26
    1faa:	08 95       	ret

00001fac <_exit>:
    1fac:	f8 94       	cli

00001fae <__stop_program>:
    1fae:	ff cf       	rjmp	.-2      	; 0x1fae <__stop_program>
