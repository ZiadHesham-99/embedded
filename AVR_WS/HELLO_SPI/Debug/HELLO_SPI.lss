
HELLO_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000310e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000310e  000031a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  000032aa  2**0
                  ALLOC
  3 .stab         00002880  00000000  00000000  000032ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015a0  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000741f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000942e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000ba01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e0       	ldi	r30, 0x0E	; 14
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <main>
      8a:	0c 94 85 18 	jmp	0x310a	; 0x310a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <INTERRUPT_u8GlobalInterruptControl>:
#include "INTERRUPT_int.h"
#include "../../LIB/bitmath.h"
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
u8 INTERRUPT_u8GlobalInterruptControl(u8 Copy_u8Status)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <INTERRUPT_u8GlobalInterruptControl+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <INTERRUPT_u8GlobalInterruptControl+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     ce4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Status)
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3c 83       	std	Y+4, r19	; 0x04
     cee:	2b 83       	std	Y+3, r18	; 0x03
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f0       	breq	.+26     	; 0xd12 <INTERRUPT_u8GlobalInterruptControl+0x3c>
     cf8:	2b 81       	ldd	r18, Y+3	; 0x03
     cfa:	3c 81       	ldd	r19, Y+4	; 0x04
     cfc:	21 30       	cpi	r18, 0x01	; 1
     cfe:	31 05       	cpc	r19, r1
     d00:	81 f4       	brne	.+32     	; 0xd22 <INTERRUPT_u8GlobalInterruptControl+0x4c>
	{
	case ENABLE: SREG_reg |=(1<<7);break;
     d02:	af e5       	ldi	r26, 0x5F	; 95
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ef e5       	ldi	r30, 0x5F	; 95
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 68       	ori	r24, 0x80	; 128
     d0e:	8c 93       	st	X, r24
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <INTERRUPT_u8GlobalInterruptControl+0x50>
	case DISABLE: SREG_reg &= ~(1<<7);break;
     d12:	af e5       	ldi	r26, 0x5F	; 95
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ef e5       	ldi	r30, 0x5F	; 95
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	8c 93       	st	X, r24
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <INTERRUPT_u8GlobalInterruptControl+0x50>
	default:Local_u8ErrStatus = RT_NOK;break;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     d26:	89 81       	ldd	r24, Y+1	; 0x01

}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <INTERRUPT_u8Enable>:
u8 INTERRUPT_u8Enable(u8 Copy_u8IntNo)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <INTERRUPT_u8Enable+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <INTERRUPT_u8Enable+0x8>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     d44:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3c 83       	std	Y+4, r19	; 0x04
     d4e:	2b 83       	std	Y+3, r18	; 0x03
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	c1 f0       	breq	.+48     	; 0xd8a <INTERRUPT_u8Enable+0x54>
     d5a:	2b 81       	ldd	r18, Y+3	; 0x03
     d5c:	3c 81       	ldd	r19, Y+4	; 0x04
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	11 f1       	breq	.+68     	; 0xda8 <INTERRUPT_u8Enable+0x72>
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	69 f5       	brne	.+90     	; 0xdc6 <INTERRUPT_u8Enable+0x90>
	{
	case INT_0:SREG_reg |=(1<<7);GICR_reg |=(1<<6) ; break;
     d6c:	af e5       	ldi	r26, 0x5F	; 95
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ef e5       	ldi	r30, 0x5F	; 95
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	8c 93       	st	X, r24
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	8c 93       	st	X, r24
     d88:	20 c0       	rjmp	.+64     	; 0xdca <INTERRUPT_u8Enable+0x94>
	case INT_1:SREG_reg |=(1<<7);GICR_reg |=(1<<7) ; break;
     d8a:	af e5       	ldi	r26, 0x5F	; 95
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ef e5       	ldi	r30, 0x5F	; 95
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	8c 93       	st	X, r24
     d98:	ab e5       	ldi	r26, 0x5B	; 91
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e5       	ldi	r30, 0x5B	; 91
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	8c 93       	st	X, r24
     da6:	11 c0       	rjmp	.+34     	; 0xdca <INTERRUPT_u8Enable+0x94>
	case INT_2:SREG_reg |=(1<<7);GICR_reg |=(1<<5) ; break;
     da8:	af e5       	ldi	r26, 0x5F	; 95
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ef e5       	ldi	r30, 0x5F	; 95
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	8c 93       	st	X, r24
     db6:	ab e5       	ldi	r26, 0x5B	; 91
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e5       	ldi	r30, 0x5B	; 91
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	8c 93       	st	X, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <INTERRUPT_u8Enable+0x94>
	default:Local_u8ErrStatus = RT_NOK;break;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     dca:	89 81       	ldd	r24, Y+1	; 0x01
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <INTERRUPT_u8Disable>:
u8 INTERRUPT_u8Disable(u8 Copy_u8IntNo)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <INTERRUPT_u8Disable+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <INTERRUPT_u8Disable+0x8>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     de8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	3c 83       	std	Y+4, r19	; 0x04
     df2:	2b 83       	std	Y+3, r18	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 05       	cpc	r25, r1
     dfc:	89 f0       	breq	.+34     	; 0xe20 <INTERRUPT_u8Disable+0x46>
     dfe:	2b 81       	ldd	r18, Y+3	; 0x03
     e00:	3c 81       	ldd	r19, Y+4	; 0x04
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	a1 f0       	breq	.+40     	; 0xe30 <INTERRUPT_u8Disable+0x56>
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	c1 f4       	brne	.+48     	; 0xe40 <INTERRUPT_u8Disable+0x66>
	{
	case INT_0: GICR_reg &= ~(1<<6) ; break;
     e10:	ab e5       	ldi	r26, 0x5B	; 91
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	eb e5       	ldi	r30, 0x5B	; 91
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 7b       	andi	r24, 0xBF	; 191
     e1c:	8c 93       	st	X, r24
     e1e:	12 c0       	rjmp	.+36     	; 0xe44 <INTERRUPT_u8Disable+0x6a>
	case INT_1: GICR_reg &= ~(1<<7) ; break;
     e20:	ab e5       	ldi	r26, 0x5B	; 91
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e5       	ldi	r30, 0x5B	; 91
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 77       	andi	r24, 0x7F	; 127
     e2c:	8c 93       	st	X, r24
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <INTERRUPT_u8Disable+0x6a>
	case INT_2: GICR_reg &= ~(1<<5) ; break;
     e30:	ab e5       	ldi	r26, 0x5B	; 91
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e5       	ldi	r30, 0x5B	; 91
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7d       	andi	r24, 0xDF	; 223
     e3c:	8c 93       	st	X, r24
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <INTERRUPT_u8Disable+0x6a>
	default:Local_u8ErrStatus = RT_NOK;break;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <INTERRUPT_u8SenseControl>:
u8 INTERRUPT_u8SenseControl(u8 Copy_u8IntNo ,u8 Copy_u8Trigger)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2b 97       	sbiw	r28, 0x0b	; 11
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	8a 83       	std	Y+2, r24	; 0x02
     e6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     e6c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3b 87       	std	Y+11, r19	; 0x0b
     e76:	2a 87       	std	Y+10, r18	; 0x0a
     e78:	8a 85       	ldd	r24, Y+10	; 0x0a
     e7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <INTERRUPT_u8SenseControl+0x30>
     e82:	69 c0       	rjmp	.+210    	; 0xf56 <INTERRUPT_u8SenseControl+0x102>
     e84:	2a 85       	ldd	r18, Y+10	; 0x0a
     e86:	3b 85       	ldd	r19, Y+11	; 0x0b
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <INTERRUPT_u8SenseControl+0x3c>
     e8e:	c1 c0       	rjmp	.+386    	; 0x1012 <INTERRUPT_u8SenseControl+0x1be>
     e90:	8a 85       	ldd	r24, Y+10	; 0x0a
     e92:	9b 85       	ldd	r25, Y+11	; 0x0b
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	09 f0       	breq	.+2      	; 0xe9a <INTERRUPT_u8SenseControl+0x46>
     e98:	df c0       	rjmp	.+446    	; 0x1058 <INTERRUPT_u8SenseControl+0x204>
	{
	case INT_0:
		switch(Copy_u8Trigger)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	39 87       	std	Y+9, r19	; 0x09
     ea2:	28 87       	std	Y+8, r18	; 0x08
     ea4:	88 85       	ldd	r24, Y+8	; 0x08
     ea6:	99 85       	ldd	r25, Y+9	; 0x09
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	21 f1       	breq	.+72     	; 0xef6 <INTERRUPT_u8SenseControl+0xa2>
     eae:	28 85       	ldd	r18, Y+8	; 0x08
     eb0:	39 85       	ldd	r19, Y+9	; 0x09
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <INTERRUPT_u8SenseControl+0x6e>
     eb8:	88 85       	ldd	r24, Y+8	; 0x08
     eba:	99 85       	ldd	r25, Y+9	; 0x09
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	61 f0       	breq	.+24     	; 0xed8 <INTERRUPT_u8SenseControl+0x84>
     ec0:	47 c0       	rjmp	.+142    	; 0xf50 <INTERRUPT_u8SenseControl+0xfc>
     ec2:	28 85       	ldd	r18, Y+8	; 0x08
     ec4:	39 85       	ldd	r19, Y+9	; 0x09
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	21 f1       	breq	.+72     	; 0xf14 <INTERRUPT_u8SenseControl+0xc0>
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	99 85       	ldd	r25, Y+9	; 0x09
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	71 f1       	breq	.+92     	; 0xf32 <INTERRUPT_u8SenseControl+0xde>
     ed6:	3c c0       	rjmp	.+120    	; 0xf50 <INTERRUPT_u8SenseControl+0xfc>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<0) ; MCUCR_reg &= ~(1<<1)  ; break;
     ed8:	a5 e5       	ldi	r26, 0x55	; 85
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e5 e5       	ldi	r30, 0x55	; 85
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	8c 93       	st	X, r24
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8d 7f       	andi	r24, 0xFD	; 253
     ef2:	8c 93       	st	X, r24
     ef4:	b3 c0       	rjmp	.+358    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<0)   ; MCUCR_reg &= ~(1<<1) ; break;
     ef6:	a5 e5       	ldi	r26, 0x55	; 85
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e5       	ldi	r30, 0x55	; 85
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	8c 93       	st	X, r24
     f04:	a5 e5       	ldi	r26, 0x55	; 85
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e5       	ldi	r30, 0x55	; 85
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	8c 93       	st	X, r24
     f12:	a4 c0       	rjmp	.+328    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<0) ;  MCUCR_reg |=(1<<1)    ; break;
     f14:	a5 e5       	ldi	r26, 0x55	; 85
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e5       	ldi	r30, 0x55	; 85
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8e 7f       	andi	r24, 0xFE	; 254
     f20:	8c 93       	st	X, r24
     f22:	a5 e5       	ldi	r26, 0x55	; 85
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e5 e5       	ldi	r30, 0x55	; 85
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	8c 93       	st	X, r24
     f30:	95 c0       	rjmp	.+298    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<0) ; MCUCR_reg |=(1<<1)  ; break;
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8c 93       	st	X, r24
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
     f4e:	86 c0       	rjmp	.+268    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	83 c0       	rjmp	.+262    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		};break;
	case INT_1:
		switch(Copy_u8Trigger)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3f 83       	std	Y+7, r19	; 0x07
     f5e:	2e 83       	std	Y+6, r18	; 0x06
     f60:	8e 81       	ldd	r24, Y+6	; 0x06
     f62:	9f 81       	ldd	r25, Y+7	; 0x07
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	21 f1       	breq	.+72     	; 0xfb2 <INTERRUPT_u8SenseControl+0x15e>
     f6a:	2e 81       	ldd	r18, Y+6	; 0x06
     f6c:	3f 81       	ldd	r19, Y+7	; 0x07
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <INTERRUPT_u8SenseControl+0x12a>
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	61 f0       	breq	.+24     	; 0xf94 <INTERRUPT_u8SenseControl+0x140>
     f7c:	47 c0       	rjmp	.+142    	; 0x100c <INTERRUPT_u8SenseControl+0x1b8>
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	21 f1       	breq	.+72     	; 0xfd0 <INTERRUPT_u8SenseControl+0x17c>
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	71 f1       	breq	.+92     	; 0xfee <INTERRUPT_u8SenseControl+0x19a>
     f92:	3c c0       	rjmp	.+120    	; 0x100c <INTERRUPT_u8SenseControl+0x1b8>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<2) ; MCUCR_reg &= ~(1<<3)  ; break;
     f94:	a5 e5       	ldi	r26, 0x55	; 85
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e5       	ldi	r30, 0x55	; 85
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8b 7f       	andi	r24, 0xFB	; 251
     fa0:	8c 93       	st	X, r24
     fa2:	a5 e5       	ldi	r26, 0x55	; 85
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e5       	ldi	r30, 0x55	; 85
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	8c 93       	st	X, r24
     fb0:	55 c0       	rjmp	.+170    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<2)   ; MCUCR_reg &= ~(1<<3) ; break;
     fb2:	a5 e5       	ldi	r26, 0x55	; 85
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e5       	ldi	r30, 0x55	; 85
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	8c 93       	st	X, r24
     fc0:	a5 e5       	ldi	r26, 0x55	; 85
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e5       	ldi	r30, 0x55	; 85
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	8c 93       	st	X, r24
     fce:	46 c0       	rjmp	.+140    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<2) ;  MCUCR_reg |=(1<<3)    ; break;
     fd0:	a5 e5       	ldi	r26, 0x55	; 85
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e5       	ldi	r30, 0x55	; 85
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8b 7f       	andi	r24, 0xFB	; 251
     fdc:	8c 93       	st	X, r24
     fde:	a5 e5       	ldi	r26, 0x55	; 85
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e5       	ldi	r30, 0x55	; 85
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	8c 93       	st	X, r24
     fec:	37 c0       	rjmp	.+110    	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<2) ; MCUCR_reg |=(1<<3)  ; break;
     fee:	a5 e5       	ldi	r26, 0x55	; 85
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e5       	ldi	r30, 0x55	; 85
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	84 60       	ori	r24, 0x04	; 4
     ffa:	8c 93       	st	X, r24
     ffc:	a5 e5       	ldi	r26, 0x55	; 85
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e5       	ldi	r30, 0x55	; 85
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 60       	ori	r24, 0x08	; 8
    1008:	8c 93       	st	X, r24
    100a:	28 c0       	rjmp	.+80     	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	25 c0       	rjmp	.+74     	; 0x105c <INTERRUPT_u8SenseControl+0x208>
		};break;
    case INT_2:
    	switch(Copy_u8Trigger)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	91 05       	cpc	r25, r1
    1024:	31 f0       	breq	.+12     	; 0x1032 <INTERRUPT_u8SenseControl+0x1de>
    1026:	2c 81       	ldd	r18, Y+4	; 0x04
    1028:	3d 81       	ldd	r19, Y+5	; 0x05
    102a:	23 30       	cpi	r18, 0x03	; 3
    102c:	31 05       	cpc	r19, r1
    102e:	49 f0       	breq	.+18     	; 0x1042 <INTERRUPT_u8SenseControl+0x1ee>
    1030:	10 c0       	rjmp	.+32     	; 0x1052 <INTERRUPT_u8SenseControl+0x1fe>
    	{
    	case FALLING_EDGE: MCUCSR_reg &= ~(1<<6); break;
    1032:	a4 e5       	ldi	r26, 0x54	; 84
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e4 e5       	ldi	r30, 0x54	; 84
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	8c 93       	st	X, r24
    1040:	0d c0       	rjmp	.+26     	; 0x105c <INTERRUPT_u8SenseControl+0x208>
    	case RISING_EDGE : MCUCSR_reg |=(1<<6); break;
    1042:	a4 e5       	ldi	r26, 0x54	; 84
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e4 e5       	ldi	r30, 0x54	; 84
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	8c 93       	st	X, r24
    1050:	05 c0       	rjmp	.+10     	; 0x105c <INTERRUPT_u8SenseControl+0x208>
    	default : Local_u8ErrStatus = RT_NOK;break;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	02 c0       	rjmp	.+4      	; 0x105c <INTERRUPT_u8SenseControl+0x208>
    	};break;
    default:Local_u8ErrStatus = RT_NOK;break;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	2b 96       	adiw	r28, 0x0b	; 11
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <INTERRUPT_u8GetInterruptFlag>:
u8 INTERRUPT_u8GetInterruptFlag(u8 Copy_u8IntNo ,u8 * Copy_u8pVal)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <INTERRUPT_u8GetInterruptFlag+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <INTERRUPT_u8GetInterruptFlag+0x8>
    1078:	00 d0       	rcall	.+0      	; 0x107a <INTERRUPT_u8GetInterruptFlag+0xa>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8a 83       	std	Y+2, r24	; 0x02
    1080:	7c 83       	std	Y+4, r23	; 0x04
    1082:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    1084:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3e 83       	std	Y+6, r19	; 0x06
    108e:	2d 83       	std	Y+5, r18	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <INTERRUPT_u8GetInterruptFlag+0x54>
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	3e 81       	ldd	r19, Y+6	; 0x06
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <INTERRUPT_u8GetInterruptFlag+0x68>
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f5       	brne	.+66     	; 0x10ee <INTERRUPT_u8GetInterruptFlag+0x7e>
	{
	case INT_0: * Copy_u8pVal = (((GIFR_reg) >> (6)) & 0x01) ; break;
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	82 95       	swap	r24
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	83 70       	andi	r24, 0x03	; 3
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	eb 81       	ldd	r30, Y+3	; 0x03
    10be:	fc 81       	ldd	r31, Y+4	; 0x04
    10c0:	80 83       	st	Z, r24
    10c2:	17 c0       	rjmp	.+46     	; 0x10f2 <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_1:* Copy_u8pVal = (((GIFR_reg) >> (7)) & 0x01) ; break;
    10c4:	ea e5       	ldi	r30, 0x5A	; 90
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 1f       	adc	r24, r24
    10cc:	88 27       	eor	r24, r24
    10ce:	88 1f       	adc	r24, r24
    10d0:	eb 81       	ldd	r30, Y+3	; 0x03
    10d2:	fc 81       	ldd	r31, Y+4	; 0x04
    10d4:	80 83       	st	Z, r24
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_2: * Copy_u8pVal = (((GIFR_reg) >> (5)) & 0x01); break;
    10d8:	ea e5       	ldi	r30, 0x5A	; 90
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	82 95       	swap	r24
    10e0:	86 95       	lsr	r24
    10e2:	87 70       	andi	r24, 0x07	; 7
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	eb 81       	ldd	r30, Y+3	; 0x03
    10e8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ea:	80 83       	st	Z, r24
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <INTERRUPT_u8GetInterruptFlag+0x82>
	default:Local_u8ErrStatus = RT_NOK;break;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f4:	26 96       	adiw	r28, 0x06	; 6
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_u8SetPortDir+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <DIO_u8SetPortDir+0x8>
    110e:	0f 92       	push	r0
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	8a 83       	std	Y+2, r24	; 0x02
    1116:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    1118:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Dir != INPUT && Copy_u8Dir != OUTPUT_PORT )
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 23       	and	r24, r24
    111e:	31 f0       	breq	.+12     	; 0x112c <DIO_u8SetPortDir+0x26>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	8f 3f       	cpi	r24, 0xFF	; 255
    1124:	19 f0       	breq	.+6      	; 0x112c <DIO_u8SetPortDir+0x26>
	{
		Local_u8ErrStatus = RT_NOK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	35 c0       	rjmp	.+106    	; 0x1196 <DIO_u8SetPortDir+0x90>
	}
	else{
		switch( Copy_u8PortNo )
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3d 83       	std	Y+5, r19	; 0x05
    1134:	2c 83       	std	Y+4, r18	; 0x04
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	d1 f0       	breq	.+52     	; 0x1174 <DIO_u8SetPortDir+0x6e>
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <DIO_u8SetPortDir+0x4e>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	61 f0       	breq	.+24     	; 0x116a <DIO_u8SetPortDir+0x64>
    1152:	1f c0       	rjmp	.+62     	; 0x1192 <DIO_u8SetPortDir+0x8c>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	81 f0       	breq	.+32     	; 0x117e <DIO_u8SetPortDir+0x78>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <DIO_u8SetPortDir+0x82>
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <DIO_u8SetPortDir+0x8c>
		{
			case PORT_A: DDRA_REG = Copy_u8Dir; break;
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	80 83       	st	Z, r24
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <DIO_u8SetPortDir+0x90>
			case PORT_B: DDRB_REG = Copy_u8Dir; break;
    1174:	e7 e3       	ldi	r30, 0x37	; 55
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	80 83       	st	Z, r24
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <DIO_u8SetPortDir+0x90>
			case PORT_C: DDRC_REG = Copy_u8Dir; break;
    117e:	e4 e3       	ldi	r30, 0x34	; 52
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	80 83       	st	Z, r24
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <DIO_u8SetPortDir+0x90>
			case PORT_D: DDRD_REG = Copy_u8Dir; break;
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	80 83       	st	Z, r24
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_u8SetPortDir+0x90>
			default: Local_u8ErrStatus = RT_NOK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
		}
		}
		return (Local_u8ErrStatus);
    1196:	89 81       	ldd	r24, Y+1	; 0x01
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	28 97       	sbiw	r28, 0x08	; 8
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
    11c0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    11c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <DIO_u8SetPinDir+0x24>
    11ca:	f2 c0       	rjmp	.+484    	; 0x13b0 <DIO_u8SetPinDir+0x208>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <DIO_u8SetPinDir+0x2c>
    11d2:	ee c0       	rjmp	.+476    	; 0x13b0 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	88 23       	and	r24, r24
    11d8:	09 f0       	breq	.+2      	; 0x11dc <DIO_u8SetPinDir+0x34>
    11da:	74 c0       	rjmp	.+232    	; 0x12c4 <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	38 87       	std	Y+8, r19	; 0x08
    11e4:	2f 83       	std	Y+7, r18	; 0x07
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	59 f1       	breq	.+86     	; 0x1246 <DIO_u8SetPinDir+0x9e>
    11f0:	2f 81       	ldd	r18, Y+7	; 0x07
    11f2:	38 85       	ldd	r19, Y+8	; 0x08
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <DIO_u8SetPinDir+0x5c>
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	98 85       	ldd	r25, Y+8	; 0x08
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f0       	breq	.+26     	; 0x121c <DIO_u8SetPinDir+0x74>
    1202:	d8 c0       	rjmp	.+432    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
    1204:	2f 81       	ldd	r18, Y+7	; 0x07
    1206:	38 85       	ldd	r19, Y+8	; 0x08
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	89 f1       	breq	.+98     	; 0x1270 <DIO_u8SetPinDir+0xc8>
    120e:	8f 81       	ldd	r24, Y+7	; 0x07
    1210:	98 85       	ldd	r25, Y+8	; 0x08
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <DIO_u8SetPinDir+0x72>
    1218:	40 c0       	rjmp	.+128    	; 0x129a <DIO_u8SetPinDir+0xf2>
    121a:	cc c0       	rjmp	.+408    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
    121c:	aa e3       	ldi	r26, 0x3A	; 58
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ea e3       	ldi	r30, 0x3A	; 58
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_u8SetPinDir+0x92>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_u8SetPinDir+0x8e>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	b7 c0       	rjmp	.+366    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
    1246:	a7 e3       	ldi	r26, 0x37	; 55
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8SetPinDir+0xbc>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8SetPinDir+0xb8>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	a2 c0       	rjmp	.+324    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_u8SetPinDir+0xe6>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_u8SetPinDir+0xe2>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	8d c0       	rjmp	.+282    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
    129a:	a1 e3       	ldi	r26, 0x31	; 49
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e1 e3       	ldi	r30, 0x31	; 49
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8SetPinDir+0x110>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8SetPinDir+0x10c>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	78 c0       	rjmp	.+240    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	09 f0       	breq	.+2      	; 0x12cc <DIO_u8SetPinDir+0x124>
    12ca:	6f c0       	rjmp	.+222    	; 0x13aa <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3e 83       	std	Y+6, r19	; 0x06
    12d4:	2d 83       	std	Y+5, r18	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	49 f1       	breq	.+82     	; 0x1332 <DIO_u8SetPinDir+0x18a>
    12e0:	2d 81       	ldd	r18, Y+5	; 0x05
    12e2:	3e 81       	ldd	r19, Y+6	; 0x06
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_u8SetPinDir+0x14c>
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_u8SetPinDir+0x162>
    12f2:	60 c0       	rjmp	.+192    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
    12f4:	2d 81       	ldd	r18, Y+5	; 0x05
    12f6:	3e 81       	ldd	r19, Y+6	; 0x06
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	71 f1       	breq	.+92     	; 0x135a <DIO_u8SetPinDir+0x1b2>
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	e9 f1       	breq	.+122    	; 0x1382 <DIO_u8SetPinDir+0x1da>
    1308:	55 c0       	rjmp	.+170    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8SetPinDir+0x180>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8SetPinDir+0x17c>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	41 c0       	rjmp	.+130    	; 0x13b4 <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
    1332:	a7 e3       	ldi	r26, 0x37	; 55
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e3       	ldi	r30, 0x37	; 55
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_u8SetPinDir+0x1a8>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_u8SetPinDir+0x1a4>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	2d c0       	rjmp	.+90     	; 0x13b4 <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
    135a:	a4 e3       	ldi	r26, 0x34	; 52
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e4 e3       	ldi	r30, 0x34	; 52
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_u8SetPinDir+0x1d0>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_u8SetPinDir+0x1cc>
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
    1382:	a1 e3       	ldi	r26, 0x31	; 49
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8SetPinDir+0x1f8>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8SetPinDir+0x1f4>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	28 96       	adiw	r28, 0x08	; 8
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DIO_u8SetPortVal+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <DIO_u8SetPortVal+0x8>
    13d0:	0f 92       	push	r0
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    13da:	19 82       	std	Y+1, r1	; 0x01
	if(1)
	{
		switch( Copy_u8PortNo )
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3d 83       	std	Y+5, r19	; 0x05
    13e4:	2c 83       	std	Y+4, r18	; 0x04
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	d1 f0       	breq	.+52     	; 0x1424 <DIO_u8SetPortVal+0x5c>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	2c f4       	brge	.+10     	; 0x1404 <DIO_u8SetPortVal+0x3c>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 f0       	breq	.+24     	; 0x141a <DIO_u8SetPortVal+0x52>
    1402:	1f c0       	rjmp	.+62     	; 0x1442 <DIO_u8SetPortVal+0x7a>
    1404:	2c 81       	ldd	r18, Y+4	; 0x04
    1406:	3d 81       	ldd	r19, Y+5	; 0x05
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	81 f0       	breq	.+32     	; 0x142e <DIO_u8SetPortVal+0x66>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <DIO_u8SetPortVal+0x70>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <DIO_u8SetPortVal+0x7a>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
    141a:	eb e3       	ldi	r30, 0x3B	; 59
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	80 83       	st	Z, r24
    1422:	11 c0       	rjmp	.+34     	; 0x1446 <DIO_u8SetPortVal+0x7e>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
    1424:	e8 e3       	ldi	r30, 0x38	; 56
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	80 83       	st	Z, r24
    142c:	0c c0       	rjmp	.+24     	; 0x1446 <DIO_u8SetPortVal+0x7e>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
    142e:	e5 e3       	ldi	r30, 0x35	; 53
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	80 83       	st	Z, r24
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <DIO_u8SetPortVal+0x7e>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	80 83       	st	Z, r24
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPortVal+0x7e>
		    default: Local_u8ErrStatus = RT_NOK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}

	return (Local_u8ErrStatus);
    1446:	89 81       	ldd	r24, Y+1	; 0x01

}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	28 97       	sbiw	r28, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	8a 83       	std	Y+2, r24	; 0x02
    146e:	6b 83       	std	Y+3, r22	; 0x03
    1470:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    1472:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	08 f0       	brcs	.+2      	; 0x147c <DIO_u8SetPinVal+0x24>
    147a:	f2 c0       	rjmp	.+484    	; 0x1660 <DIO_u8SetPinVal+0x208>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 30       	cpi	r24, 0x08	; 8
    1480:	08 f0       	brcs	.+2      	; 0x1484 <DIO_u8SetPinVal+0x2c>
    1482:	ee c0       	rjmp	.+476    	; 0x1660 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	88 23       	and	r24, r24
    1488:	09 f0       	breq	.+2      	; 0x148c <DIO_u8SetPinVal+0x34>
    148a:	74 c0       	rjmp	.+232    	; 0x1574 <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	38 87       	std	Y+8, r19	; 0x08
    1494:	2f 83       	std	Y+7, r18	; 0x07
    1496:	8f 81       	ldd	r24, Y+7	; 0x07
    1498:	98 85       	ldd	r25, Y+8	; 0x08
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	59 f1       	breq	.+86     	; 0x14f6 <DIO_u8SetPinVal+0x9e>
    14a0:	2f 81       	ldd	r18, Y+7	; 0x07
    14a2:	38 85       	ldd	r19, Y+8	; 0x08
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <DIO_u8SetPinVal+0x5c>
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f0       	breq	.+26     	; 0x14cc <DIO_u8SetPinVal+0x74>
    14b2:	d8 c0       	rjmp	.+432    	; 0x1664 <DIO_u8SetPinVal+0x20c>
    14b4:	2f 81       	ldd	r18, Y+7	; 0x07
    14b6:	38 85       	ldd	r19, Y+8	; 0x08
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	89 f1       	breq	.+98     	; 0x1520 <DIO_u8SetPinVal+0xc8>
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_u8SetPinVal+0x72>
    14c8:	40 c0       	rjmp	.+128    	; 0x154a <DIO_u8SetPinVal+0xf2>
    14ca:	cc c0       	rjmp	.+408    	; 0x1664 <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
    14cc:	ab e3       	ldi	r26, 0x3B	; 59
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	eb e3       	ldi	r30, 0x3B	; 59
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8SetPinVal+0x92>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_u8SetPinVal+0x8e>
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	b7 c0       	rjmp	.+366    	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
    14f6:	a8 e3       	ldi	r26, 0x38	; 56
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e8 e3       	ldi	r30, 0x38	; 56
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_u8SetPinVal+0xbc>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_u8SetPinVal+0xb8>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	a2 c0       	rjmp	.+324    	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_u8SetPinVal+0xe6>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_u8SetPinVal+0xe2>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	8d c0       	rjmp	.+282    	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
    154a:	a2 e3       	ldi	r26, 0x32	; 50
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_u8SetPinVal+0x110>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_u8SetPinVal+0x10c>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	78 c0       	rjmp	.+240    	; 0x1664 <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f0       	breq	.+2      	; 0x157c <DIO_u8SetPinVal+0x124>
    157a:	6f c0       	rjmp	.+222    	; 0x165a <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3e 83       	std	Y+6, r19	; 0x06
    1584:	2d 83       	std	Y+5, r18	; 0x05
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	49 f1       	breq	.+82     	; 0x15e2 <DIO_u8SetPinVal+0x18a>
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	3e 81       	ldd	r19, Y+6	; 0x06
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	2c f4       	brge	.+10     	; 0x15a4 <DIO_u8SetPinVal+0x14c>
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	61 f0       	breq	.+24     	; 0x15ba <DIO_u8SetPinVal+0x162>
    15a2:	60 c0       	rjmp	.+192    	; 0x1664 <DIO_u8SetPinVal+0x20c>
    15a4:	2d 81       	ldd	r18, Y+5	; 0x05
    15a6:	3e 81       	ldd	r19, Y+6	; 0x06
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	71 f1       	breq	.+92     	; 0x160a <DIO_u8SetPinVal+0x1b2>
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	e9 f1       	breq	.+122    	; 0x1632 <DIO_u8SetPinVal+0x1da>
    15b8:	55 c0       	rjmp	.+170    	; 0x1664 <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
    15ba:	ab e3       	ldi	r26, 0x3B	; 59
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_u8SetPinVal+0x180>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_u8SetPinVal+0x17c>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	41 c0       	rjmp	.+130    	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
    15e2:	a8 e3       	ldi	r26, 0x38	; 56
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e3       	ldi	r30, 0x38	; 56
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8SetPinVal+0x1a8>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8SetPinVal+0x1a4>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	2d c0       	rjmp	.+90     	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_u8SetPinVal+0x1d0>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_u8SetPinVal+0x1cc>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	19 c0       	rjmp	.+50     	; 0x1664 <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
    1632:	a2 e3       	ldi	r26, 0x32	; 50
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e2 e3       	ldi	r30, 0x32	; 50
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_u8SetPinVal+0x1f8>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_u8SetPinVal+0x1f4>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
}
    1666:	28 96       	adiw	r28, 0x08	; 8
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_u8GetPortVal+0x6>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_u8GetPortVal+0x8>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <DIO_u8GetPortVal+0xa>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	8a 83       	std	Y+2, r24	; 0x02
    1688:	7c 83       	std	Y+4, r23	; 0x04
    168a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    168c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	19 f4       	brne	.+6      	; 0x169c <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	3d c0       	rjmp	.+122    	; 0x1716 <DIO_u8GetPortVal+0x9e>
	else
	{
		switch( Copy_u8PortNo )
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3e 83       	std	Y+6, r19	; 0x06
    16a4:	2d 83       	std	Y+5, r18	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	91 05       	cpc	r25, r1
    16ae:	e1 f0       	breq	.+56     	; 0x16e8 <DIO_u8GetPortVal+0x70>
    16b0:	2d 81       	ldd	r18, Y+5	; 0x05
    16b2:	3e 81       	ldd	r19, Y+6	; 0x06
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <DIO_u8GetPortVal+0x4c>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	61 f0       	breq	.+24     	; 0x16da <DIO_u8GetPortVal+0x62>
    16c2:	27 c0       	rjmp	.+78     	; 0x1712 <DIO_u8GetPortVal+0x9a>
    16c4:	2d 81       	ldd	r18, Y+5	; 0x05
    16c6:	3e 81       	ldd	r19, Y+6	; 0x06
    16c8:	22 30       	cpi	r18, 0x02	; 2
    16ca:	31 05       	cpc	r19, r1
    16cc:	a1 f0       	breq	.+40     	; 0x16f6 <DIO_u8GetPortVal+0x7e>
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	91 05       	cpc	r25, r1
    16d6:	b1 f0       	breq	.+44     	; 0x1704 <DIO_u8GetPortVal+0x8c>
    16d8:	1c c0       	rjmp	.+56     	; 0x1712 <DIO_u8GetPortVal+0x9a>
			{
				case PORT_A: * Copy_u8pVal = PINA_REG ; break;
    16da:	e9 e3       	ldi	r30, 0x39	; 57
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	80 83       	st	Z, r24
    16e6:	17 c0       	rjmp	.+46     	; 0x1716 <DIO_u8GetPortVal+0x9e>
			    case PORT_B: * Copy_u8pVal = PINB_REG; break;
    16e8:	e6 e3       	ldi	r30, 0x36	; 54
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	eb 81       	ldd	r30, Y+3	; 0x03
    16f0:	fc 81       	ldd	r31, Y+4	; 0x04
    16f2:	80 83       	st	Z, r24
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <DIO_u8GetPortVal+0x9e>
			    case PORT_C: * Copy_u8pVal = PINC_REG; break;
    16f6:	e3 e3       	ldi	r30, 0x33	; 51
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	eb 81       	ldd	r30, Y+3	; 0x03
    16fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1700:	80 83       	st	Z, r24
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <DIO_u8GetPortVal+0x9e>
			    case PORT_D: * Copy_u8pVal = PIND_REG; break;
    1704:	e0 e3       	ldi	r30, 0x30	; 48
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	eb 81       	ldd	r30, Y+3	; 0x03
    170c:	fc 81       	ldd	r31, Y+4	; 0x04
    170e:	80 83       	st	Z, r24
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_u8GetPortVal+0x9e>
			    default: Local_u8ErrStatus = RT_NOK; break;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
    1716:	89 81       	ldd	r24, Y+1	; 0x01
}
    1718:	26 96       	adiw	r28, 0x06	; 6
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	27 97       	sbiw	r28, 0x07	; 7
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	6b 83       	std	Y+3, r22	; 0x03
    1742:	5d 83       	std	Y+5, r21	; 0x05
    1744:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    1746:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	19 f4       	brne	.+6      	; 0x1756 <DIO_u8GetPinVal+0x2c>
	{Local_u8ErrStatus = RT_NOK;}
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	7b c0       	rjmp	.+246    	; 0x184c <DIO_u8GetPinVal+0x122>
	else
	{
		if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	08 f0       	brcs	.+2      	; 0x175e <DIO_u8GetPinVal+0x34>
    175c:	75 c0       	rjmp	.+234    	; 0x1848 <DIO_u8GetPinVal+0x11e>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	08 f0       	brcs	.+2      	; 0x1766 <DIO_u8GetPinVal+0x3c>
    1764:	71 c0       	rjmp	.+226    	; 0x1848 <DIO_u8GetPinVal+0x11e>
		{
			switch(Copy_u8PortNo)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3f 83       	std	Y+7, r19	; 0x07
    176e:	2e 83       	std	Y+6, r18	; 0x06
    1770:	4e 81       	ldd	r20, Y+6	; 0x06
    1772:	5f 81       	ldd	r21, Y+7	; 0x07
    1774:	41 30       	cpi	r20, 0x01	; 1
    1776:	51 05       	cpc	r21, r1
    1778:	59 f1       	breq	.+86     	; 0x17d0 <DIO_u8GetPinVal+0xa6>
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	91 05       	cpc	r25, r1
    1782:	34 f4       	brge	.+12     	; 0x1790 <DIO_u8GetPinVal+0x66>
    1784:	2e 81       	ldd	r18, Y+6	; 0x06
    1786:	3f 81       	ldd	r19, Y+7	; 0x07
    1788:	21 15       	cp	r18, r1
    178a:	31 05       	cpc	r19, r1
    178c:	69 f0       	breq	.+26     	; 0x17a8 <DIO_u8GetPinVal+0x7e>
    178e:	5e c0       	rjmp	.+188    	; 0x184c <DIO_u8GetPinVal+0x122>
    1790:	4e 81       	ldd	r20, Y+6	; 0x06
    1792:	5f 81       	ldd	r21, Y+7	; 0x07
    1794:	42 30       	cpi	r20, 0x02	; 2
    1796:	51 05       	cpc	r21, r1
    1798:	79 f1       	breq	.+94     	; 0x17f8 <DIO_u8GetPinVal+0xce>
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	9f 81       	ldd	r25, Y+7	; 0x07
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <DIO_u8GetPinVal+0x7c>
    17a4:	3d c0       	rjmp	.+122    	; 0x1820 <DIO_u8GetPinVal+0xf6>
    17a6:	52 c0       	rjmp	.+164    	; 0x184c <DIO_u8GetPinVal+0x122>
			{
				case PORT_A: * Copy_u8pVal = GET_BIT(PINA_REG , Copy_u8PinNo ); break;
    17a8:	e9 e3       	ldi	r30, 0x39	; 57
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_u8GetPinVal+0x96>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_u8GetPinVal+0x92>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ca:	fd 81       	ldd	r31, Y+5	; 0x05
    17cc:	80 83       	st	Z, r24
    17ce:	3e c0       	rjmp	.+124    	; 0x184c <DIO_u8GetPinVal+0x122>
				case PORT_B: * Copy_u8pVal = GET_BIT(PINB_REG , Copy_u8PinNo ); break;
    17d0:	e6 e3       	ldi	r30, 0x36	; 54
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_u8GetPinVal+0xbe>
    17e4:	55 95       	asr	r21
    17e6:	47 95       	ror	r20
    17e8:	8a 95       	dec	r24
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_u8GetPinVal+0xba>
    17ec:	ca 01       	movw	r24, r20
    17ee:	81 70       	andi	r24, 0x01	; 1
    17f0:	ec 81       	ldd	r30, Y+4	; 0x04
    17f2:	fd 81       	ldd	r31, Y+5	; 0x05
    17f4:	80 83       	st	Z, r24
    17f6:	2a c0       	rjmp	.+84     	; 0x184c <DIO_u8GetPinVal+0x122>
				case PORT_C: * Copy_u8pVal = GET_BIT(PINC_REG , Copy_u8PinNo ); break;
    17f8:	e3 e3       	ldi	r30, 0x33	; 51
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_u8GetPinVal+0xe6>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_u8GetPinVal+0xe2>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	ec 81       	ldd	r30, Y+4	; 0x04
    181a:	fd 81       	ldd	r31, Y+5	; 0x05
    181c:	80 83       	st	Z, r24
    181e:	16 c0       	rjmp	.+44     	; 0x184c <DIO_u8GetPinVal+0x122>
				case PORT_D: * Copy_u8pVal = GET_BIT(PIND_REG , Copy_u8PinNo ); break;
    1820:	e0 e3       	ldi	r30, 0x30	; 48
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a9 01       	movw	r20, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_u8GetPinVal+0x10e>
    1834:	55 95       	asr	r21
    1836:	47 95       	ror	r20
    1838:	8a 95       	dec	r24
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_u8GetPinVal+0x10a>
    183c:	ca 01       	movw	r24, r20
    183e:	81 70       	andi	r24, 0x01	; 1
    1840:	ec 81       	ldd	r30, Y+4	; 0x04
    1842:	fd 81       	ldd	r31, Y+5	; 0x05
    1844:	80 83       	st	Z, r24
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8GetPinVal+0x122>
			}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Local_u8ErrStatus);
    184c:	89 81       	ldd	r24, Y+1	; 0x01
}
    184e:	27 96       	adiw	r28, 0x07	; 7
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <ADC_init>:
#include "../../LIB/bitmath.h"
#include "AVR/delay.h"
#include "ADC_int.h"
#include "AVR/interrupt.h"
u8 ADC_init(VREF_STATE_ENUM Copy_EVrefState , LEFT_ADJUST_CTRL Copy_LAstate)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	28 97       	sbiw	r28, 0x08	; 8
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    1878:	1a 82       	std	Y+2, r1	; 0x02
	u8 Temp = ADCSRA_REG ;
    187a:	e6 e2       	ldi	r30, 0x26	; 38
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	89 83       	std	Y+1, r24	; 0x01
	Temp = ADC_ADCSRA_DEFAULT ;
    1882:	86 e8       	ldi	r24, 0x86	; 134
    1884:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA_REG = Temp ;
    1886:	e6 e2       	ldi	r30, 0x26	; 38
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	80 83       	st	Z, r24
	switch (Copy_EVrefState)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	38 87       	std	Y+8, r19	; 0x08
    1896:	2f 83       	std	Y+7, r18	; 0x07
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	a9 f0       	breq	.+42     	; 0x18cc <ADC_init+0x6c>
    18a2:	2f 81       	ldd	r18, Y+7	; 0x07
    18a4:	38 85       	ldd	r19, Y+8	; 0x08
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	f9 f0       	breq	.+62     	; 0x18ea <ADC_init+0x8a>
    18ac:	8f 81       	ldd	r24, Y+7	; 0x07
    18ae:	98 85       	ldd	r25, Y+8	; 0x08
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	51 f5       	brne	.+84     	; 0x1908 <ADC_init+0xa8>
	{
	case 0: Temp = ADMUX_REG; Temp &= ADC_VREF_CLR_MSK; ADMUX_REG = Temp; break;
    18b4:	e7 e2       	ldi	r30, 0x27	; 39
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	8f 73       	andi	r24, 0x3F	; 63
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	e7 e2       	ldi	r30, 0x27	; 39
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	20 c0       	rjmp	.+64     	; 0x190c <ADC_init+0xac>
	case 1: Temp = ADMUX_REG; Temp &= ADC_VREF_CLR_MSK;Temp |= 0b01000000 ; ADMUX_REG = Temp; break;
    18cc:	e7 e2       	ldi	r30, 0x27	; 39
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	8f 73       	andi	r24, 0x3F	; 63
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	80 64       	ori	r24, 0x40	; 64
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	e7 e2       	ldi	r30, 0x27	; 39
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	11 c0       	rjmp	.+34     	; 0x190c <ADC_init+0xac>
	case 2: Temp = ADMUX_REG; Temp &= ADC_VREF_CLR_MSK; Temp |= 0b11000000 ; ADMUX_REG = Temp; break;
    18ea:	e7 e2       	ldi	r30, 0x27	; 39
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	8f 73       	andi	r24, 0x3F	; 63
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	80 6c       	ori	r24, 0xC0	; 192
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	e7 e2       	ldi	r30, 0x27	; 39
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	02 c0       	rjmp	.+4      	; 0x190c <ADC_init+0xac>
	default:Local_u8ErrStatus = RT_NOK; break;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	8a 83       	std	Y+2, r24	; 0x02
	}
	switch (Copy_LAstate)
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3e 83       	std	Y+6, r19	; 0x06
    1914:	2d 83       	std	Y+5, r18	; 0x05
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	31 f0       	breq	.+12     	; 0x192a <ADC_init+0xca>
    191e:	2d 81       	ldd	r18, Y+5	; 0x05
    1920:	3e 81       	ldd	r19, Y+6	; 0x06
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	31 05       	cpc	r19, r1
    1926:	49 f0       	breq	.+18     	; 0x193a <ADC_init+0xda>
    1928:	10 c0       	rjmp	.+32     	; 0x194a <ADC_init+0xea>
	{
	 case 0:CLR_BIT(ADMUX_REG,5);break;
    192a:	a7 e2       	ldi	r26, 0x27	; 39
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e2       	ldi	r30, 0x27	; 39
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7d       	andi	r24, 0xDF	; 223
    1936:	8c 93       	st	X, r24
    1938:	0a c0       	rjmp	.+20     	; 0x194e <ADC_init+0xee>
	 case 1:SET_BIT(ADMUX_REG,5);break;
    193a:	a7 e2       	ldi	r26, 0x27	; 39
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e7 e2       	ldi	r30, 0x27	; 39
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 62       	ori	r24, 0x20	; 32
    1946:	8c 93       	st	X, r24
    1948:	02 c0       	rjmp	.+4      	; 0x194e <ADC_init+0xee>
	 default: Local_u8ErrStatus = RT_NOK; break;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return(Local_u8ErrStatus);
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1950:	28 96       	adiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <ADC_GetDigitalRead>:


u16 ADC_GetDigitalRead(ADC_INPUT_CHANNEL ADC_CHANNEL )
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <ADC_GetDigitalRead+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <ADC_GetDigitalRead+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	8c 83       	std	Y+4, r24	; 0x04
	u16 DigitalRead  ;
	u8 Temp = ADMUX_REG ;
    1970:	e7 e2       	ldi	r30, 0x27	; 39
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	89 83       	std	Y+1, r24	; 0x01
	Temp &= ADC_CHANNEL_CLR_MSK ;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	80 7e       	andi	r24, 0xE0	; 224
    197c:	89 83       	std	Y+1, r24	; 0x01
	Temp |= ADC_CHANNEL ;
    197e:	99 81       	ldd	r25, Y+1	; 0x01
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	89 2b       	or	r24, r25
    1984:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG = Temp ;
    1986:	e7 e2       	ldi	r30, 0x27	; 39
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,6);
    198e:	a6 e2       	ldi	r26, 0x26	; 38
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e6 e2       	ldi	r30, 0x26	; 38
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 64       	ori	r24, 0x40	; 64
    199a:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA_REG,4)!=1);
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	82 95       	swap	r24
    19a4:	8f 70       	andi	r24, 0x0F	; 15
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	81 70       	andi	r24, 0x01	; 1
    19ac:	90 70       	andi	r25, 0x00	; 0
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	a9 f3       	breq	.-22     	; 0x199c <ADC_GetDigitalRead+0x3a>
	SET_BIT(ADCSRA_REG,4);
    19b2:	a6 e2       	ldi	r26, 0x26	; 38
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e6 e2       	ldi	r30, 0x26	; 38
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 61       	ori	r24, 0x10	; 16
    19be:	8c 93       	st	X, r24
	DigitalRead = * ADC_REG;
    19c0:	e4 e2       	ldi	r30, 0x24	; 36
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	9b 83       	std	Y+3, r25	; 0x03
    19ca:	8a 83       	std	Y+2, r24	; 0x02
	return(DigitalRead) ;
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <ADC_PrescalerMode>:
void ADC_PrescalerMode(ADC_PRESCALER_SELECT Select )
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <ADC_PrescalerMode+0x6>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	8a 83       	std	Y+2, r24	; 0x02

	u8 Temp = ADCSRA_REG ;
    19ea:	e6 e2       	ldi	r30, 0x26	; 38
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	89 83       	std	Y+1, r24	; 0x01
	Temp &= ADC_PRESCLR_CLR_MSK ;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	88 7f       	andi	r24, 0xF8	; 248
    19f6:	89 83       	std	Y+1, r24	; 0x01
	Temp |= Select ;
    19f8:	99 81       	ldd	r25, Y+1	; 0x01
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	89 2b       	or	r24, r25
    19fe:	89 83       	std	Y+1, r24	; 0x01
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <ADC_AutoTriggerCTRL>:
void ADC_AutoTriggerCTRL (ADC_AUTO_TRIGGER_SELECT Select)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <ADC_AutoTriggerCTRL+0x6>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(ADCSRA_REG , 5);
    1a16:	a6 e2       	ldi	r26, 0x26	; 38
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e6 e2       	ldi	r30, 0x26	; 38
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 62       	ori	r24, 0x20	; 32
    1a22:	8c 93       	st	X, r24
	u8 Temp = SFIOR_REG ;
    1a24:	e0 e5       	ldi	r30, 0x50	; 80
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	Temp &=ADC_AUTOTRIG_CLR_MSK;
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	8f 71       	andi	r24, 0x1F	; 31
    1a30:	89 83       	std	Y+1, r24	; 0x01
	Temp |= Select;
    1a32:	99 81       	ldd	r25, Y+1	; 0x01
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	89 2b       	or	r24, r25
    1a38:	89 83       	std	Y+1, r24	; 0x01
	SFIOR_REG = Temp ;
    1a3a:	e0 e5       	ldi	r30, 0x50	; 80
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	80 83       	st	Z, r24
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <ADC_InterruptEnable>:
/*
 * Enable Global INTERRUPT GIE first !
 */
void ADC_InterruptEnable(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA_REG , 3);
    1a54:	a6 e2       	ldi	r26, 0x26	; 38
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e6 e2       	ldi	r30, 0x26	; 38
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 60       	ori	r24, 0x08	; 8
    1a60:	8c 93       	st	X, r24
}
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <ADC_SetCBF>:
void(*cbf)(void);
void ADC_SetCBF (void (*Fptr)(void))
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <ADC_SetCBF+0x6>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
	if(Fptr != NULL)
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	31 f0       	breq	.+12     	; 0x1a8a <ADC_SetCBF+0x22>
	{
		cbf = Fptr;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	90 93 69 01 	sts	0x0169, r25
    1a86:	80 93 68 01 	sts	0x0168, r24
	}

}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <__vector_16>:
ISR(ADC_vect)
{
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	if(cbf != NULL)
    1abe:	80 91 68 01 	lds	r24, 0x0168
    1ac2:	90 91 69 01 	lds	r25, 0x0169
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <__vector_16+0x40>
	{cbf();}
    1aca:	e0 91 68 01 	lds	r30, 0x0168
    1ace:	f0 91 69 01 	lds	r31, 0x0169
    1ad2:	09 95       	icall
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	bf 91       	pop	r27
    1ade:	af 91       	pop	r26
    1ae0:	9f 91       	pop	r25
    1ae2:	8f 91       	pop	r24
    1ae4:	7f 91       	pop	r23
    1ae6:	6f 91       	pop	r22
    1ae8:	5f 91       	pop	r21
    1aea:	4f 91       	pop	r20
    1aec:	3f 91       	pop	r19
    1aee:	2f 91       	pop	r18
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <LCD_vidInit>:
#define LCD_FUNC_SET_CMD (u8)    0b00111000
#define LCD_ON_OFF_CTRL_CMD (u8) 0b00001110
#define LCD_DISPLAY_CLR_CMD (u8) 0b00000001
#define LCD_ENTRY_MODE_CMD (u8)  0b00000110
extern void LCD_vidInit(void)
{
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	c6 54       	subi	r28, 0x46	; 70
    1b08:	d0 40       	sbci	r29, 0x00	; 0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDir(LCD_DATA_PORT,OUTPUT_PORT);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	6f ef       	ldi	r22, 0xFF	; 255
    1b18:	0e 94 83 08 	call	0x1106	; 0x1106 <DIO_u8SetPortDir>
	DIO_u8SetPinDir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	67 e0       	ldi	r22, 0x07	; 7
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	66 e0       	ldi	r22, 0x06	; 6
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	65 e0       	ldi	r22, 0x05	; 5
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_u8SetPinDir>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ed 5b       	subi	r30, 0xBD	; 189
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e2       	ldi	r26, 0x20	; 32
    1b46:	b2 e4       	ldi	r27, 0x42	; 66
    1b48:	80 83       	st	Z, r24
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	a2 83       	std	Z+2, r26	; 0x02
    1b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	8e 01       	movw	r16, r28
    1b52:	01 5c       	subi	r16, 0xC1	; 193
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 5b       	subi	r30, 0xBD	; 189
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	f8 01       	movw	r30, r16
    1b76:	80 83       	st	Z, r24
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	a2 83       	std	Z+2, r26	; 0x02
    1b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ff 96       	adiw	r30, 0x3f	; 63
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_vidInit+0xaa>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e af       	std	Y+62, r25	; 0x3e
    1ba0:	8d af       	std	Y+61, r24	; 0x3d
    1ba2:	46 c0       	rjmp	.+140    	; 0x1c30 <LCD_vidInit+0x136>
	else if (__tmp > 65535)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ff 96       	adiw	r30, 0x3f	; 63
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	64 f5       	brge	.+88     	; 0x1c18 <LCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 5b       	subi	r30, 0xBD	; 189
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e af       	std	Y+62, r25	; 0x3e
    1bec:	8d af       	std	Y+61, r24	; 0x3d
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <LCD_vidInit+0x114>
    1bf0:	88 ec       	ldi	r24, 0xC8	; 200
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c af       	std	Y+60, r25	; 0x3c
    1bf6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bfa:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_vidInit+0x102>
    1c00:	9c af       	std	Y+60, r25	; 0x3c
    1c02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9e af       	std	Y+62, r25	; 0x3e
    1c0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <LCD_vidInit+0xf6>
    1c16:	16 c0       	rjmp	.+44     	; 0x1c44 <LCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ff 96       	adiw	r30, 0x3f	; 63
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e af       	std	Y+62, r25	; 0x3e
    1c2e:	8d af       	std	Y+61, r24	; 0x3d
    1c30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c34:	9a af       	std	Y+58, r25	; 0x3a
    1c36:	89 af       	std	Y+57, r24	; 0x39
    1c38:	89 ad       	ldd	r24, Y+57	; 0x39
    1c3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_vidInit+0x142>
    1c40:	9a af       	std	Y+58, r25	; 0x3a
    1c42:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_vidSendCommand(LCD_FUNC_SET_CMD);
    1c44:	88 e3       	ldi	r24, 0x38	; 56
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_vidSendCommand>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8d ab       	std	Y+53, r24	; 0x35
    1c56:	9e ab       	std	Y+54, r25	; 0x36
    1c58:	af ab       	std	Y+55, r26	; 0x37
    1c5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c60:	8f a9       	ldd	r24, Y+55	; 0x37
    1c62:	98 ad       	ldd	r25, Y+56	; 0x38
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	89 ab       	std	Y+49, r24	; 0x31
    1c76:	9a ab       	std	Y+50, r25	; 0x32
    1c78:	ab ab       	std	Y+51, r26	; 0x33
    1c7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c80:	8b a9       	ldd	r24, Y+51	; 0x33
    1c82:	9c a9       	ldd	r25, Y+52	; 0x34
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <LCD_vidInit+0x1a4>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <LCD_vidInit+0x222>
	else if (__tmp > 65535)
    1c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <LCD_vidInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cba:	8f a9       	ldd	r24, Y+55	; 0x37
    1cbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <LCD_vidInit+0x204>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9e a7       	std	Y+46, r25	; 0x2e
    1ce6:	8d a7       	std	Y+45, r24	; 0x2d
    1ce8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_vidInit+0x1f2>
    1cf0:	9e a7       	std	Y+46, r25	; 0x2e
    1cf2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	98 ab       	std	Y+48, r25	; 0x30
    1cfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <LCD_vidInit+0x1e6>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <LCD_vidInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	98 ab       	std	Y+48, r25	; 0x30
    1d1a:	8f a7       	std	Y+47, r24	; 0x2f
    1d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d20:	9c a7       	std	Y+44, r25	; 0x2c
    1d22:	8b a7       	std	Y+43, r24	; 0x2b
    1d24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_vidInit+0x22e>
    1d2c:	9c a7       	std	Y+44, r25	; 0x2c
    1d2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(LCD_ON_OFF_CTRL_CMD);
    1d30:	8e e0       	ldi	r24, 0x0E	; 14
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_vidSendCommand>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	8f a3       	std	Y+39, r24	; 0x27
    1d42:	98 a7       	std	Y+40, r25	; 0x28
    1d44:	a9 a7       	std	Y+41, r26	; 0x29
    1d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a ef       	ldi	r20, 0xFA	; 250
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8b a3       	std	Y+35, r24	; 0x23
    1d62:	9c a3       	std	Y+36, r25	; 0x24
    1d64:	ad a3       	std	Y+37, r26	; 0x25
    1d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d68:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_vidInit+0x290>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9a a3       	std	Y+34, r25	; 0x22
    1d86:	89 a3       	std	Y+33, r24	; 0x21
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_vidInit+0x30e>
	else if (__tmp > 65535)
    1d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d90:	9e a1       	ldd	r25, Y+38	; 0x26
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_vidInit+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_vidInit+0x2f0>
    1dcc:	88 ec       	ldi	r24, 0xC8	; 200
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	98 a3       	std	Y+32, r25	; 0x20
    1dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_vidInit+0x2de>
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9a a3       	std	Y+34, r25	; 0x22
    1de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	89 a1       	ldd	r24, Y+33	; 0x21
    1dec:	9a a1       	ldd	r25, Y+34	; 0x22
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_vidInit+0x2d2>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <LCD_vidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6b a1       	ldd	r22, Y+35	; 0x23
    1df6:	7c a1       	ldd	r23, Y+36	; 0x24
    1df8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_vidInit+0x31a>
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vidSendCommand(LCD_DISPLAY_CLR_CMD);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_vidSendCommand>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e4       	ldi	r27, 0x40	; 64
    1e2c:	89 8f       	std	Y+25, r24	; 0x19
    1e2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e30:	ab 8f       	std	Y+27, r26	; 0x1b
    1e32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	69 8d       	ldd	r22, Y+25	; 0x19
    1e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	8d 8b       	std	Y+21, r24	; 0x15
    1e4e:	9e 8b       	std	Y+22, r25	; 0x16
    1e50:	af 8b       	std	Y+23, r26	; 0x17
    1e52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e68:	88 23       	and	r24, r24
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <LCD_vidInit+0x37c>
		__ticks = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 8b       	std	Y+20, r25	; 0x14
    1e72:	8b 8b       	std	Y+19, r24	; 0x13
    1e74:	3f c0       	rjmp	.+126    	; 0x1ef4 <LCD_vidInit+0x3fa>
	else if (__tmp > 65535)
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	4c f5       	brge	.+82     	; 0x1ee0 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9c 8b       	std	Y+20, r25	; 0x14
    1eb4:	8b 8b       	std	Y+19, r24	; 0x13
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <LCD_vidInit+0x3dc>
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9a 8b       	std	Y+18, r25	; 0x12
    1ebe:	89 8b       	std	Y+17, r24	; 0x11
    1ec0:	89 89       	ldd	r24, Y+17	; 0x11
    1ec2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_vidInit+0x3ca>
    1ec8:	9a 8b       	std	Y+18, r25	; 0x12
    1eca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	69 f7       	brne	.-38     	; 0x1eb8 <LCD_vidInit+0x3be>
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <LCD_vidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	98 8b       	std	Y+16, r25	; 0x10
    1efa:	8f 87       	std	Y+15, r24	; 0x0f
    1efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efe:	98 89       	ldd	r25, Y+16	; 0x10
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_vidInit+0x406>
    1f04:	98 8b       	std	Y+16, r25	; 0x10
    1f06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(LCD_ENTRY_MODE_CMD);
    1f08:	86 e0       	ldi	r24, 0x06	; 6
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_vidSendCommand>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_vidInit+0x468>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_vidInit+0x4e6>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_vidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_vidInit+0x4c8>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_vidInit+0x4b6>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_vidInit+0x4aa>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_vidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_vidInit+0x4f2>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1ff4:	ca 5b       	subi	r28, 0xBA	; 186
    1ff6:	df 4f       	sbci	r29, 0xFF	; 255
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <LCD_vidSendCommand>:
extern void LCD_vidSendCommand(u8 Copy_u8Command)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	6d 97       	sbiw	r28, 0x1d	; 29
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	67 e0       	ldi	r22, 0x07	; 7
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	66 e0       	ldi	r22, 0x06	; 6
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	6d 8d       	ldd	r22, Y+29	; 0x1d
    203a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	65 e0       	ldi	r22, 0x05	; 5
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e4       	ldi	r27, 0x40	; 64
    2050:	89 8f       	std	Y+25, r24	; 0x19
    2052:	9a 8f       	std	Y+26, r25	; 0x1a
    2054:	ab 8f       	std	Y+27, r26	; 0x1b
    2056:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2058:	69 8d       	ldd	r22, Y+25	; 0x19
    205a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a ef       	ldi	r20, 0xFA	; 250
    2066:	54 e4       	ldi	r21, 0x44	; 68
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	8d 8b       	std	Y+21, r24	; 0x15
    2072:	9e 8b       	std	Y+22, r25	; 0x16
    2074:	af 8b       	std	Y+23, r26	; 0x17
    2076:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2078:	6d 89       	ldd	r22, Y+21	; 0x15
    207a:	7e 89       	ldd	r23, Y+22	; 0x16
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208c:	88 23       	and	r24, r24
    208e:	2c f4       	brge	.+10     	; 0x209a <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 8b       	std	Y+20, r25	; 0x14
    2096:	8b 8b       	std	Y+19, r24	; 0x13
    2098:	3f c0       	rjmp	.+126    	; 0x2118 <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	3f ef       	ldi	r19, 0xFF	; 255
    20a6:	4f e7       	ldi	r20, 0x7F	; 127
    20a8:	57 e4       	ldi	r21, 0x47	; 71
    20aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	4c f5       	brge	.+82     	; 0x2104 <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b2:	69 8d       	ldd	r22, Y+25	; 0x19
    20b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e2       	ldi	r20, 0x20	; 32
    20c0:	51 e4       	ldi	r21, 0x41	; 65
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9c 8b       	std	Y+20, r25	; 0x14
    20d8:	8b 8b       	std	Y+19, r24	; 0x13
    20da:	0f c0       	rjmp	.+30     	; 0x20fa <LCD_vidSendCommand+0xee>
    20dc:	88 ec       	ldi	r24, 0xC8	; 200
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9a 8b       	std	Y+18, r25	; 0x12
    20e2:	89 8b       	std	Y+17, r24	; 0x11
    20e4:	89 89       	ldd	r24, Y+17	; 0x11
    20e6:	9a 89       	ldd	r25, Y+18	; 0x12
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_vidSendCommand+0xdc>
    20ec:	9a 8b       	std	Y+18, r25	; 0x12
    20ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f0:	8b 89       	ldd	r24, Y+19	; 0x13
    20f2:	9c 89       	ldd	r25, Y+20	; 0x14
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	9c 8b       	std	Y+20, r25	; 0x14
    20f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	69 f7       	brne	.-38     	; 0x20dc <LCD_vidSendCommand+0xd0>
    2102:	14 c0       	rjmp	.+40     	; 0x212c <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2104:	6d 89       	ldd	r22, Y+21	; 0x15
    2106:	7e 89       	ldd	r23, Y+22	; 0x16
    2108:	8f 89       	ldd	r24, Y+23	; 0x17
    210a:	98 8d       	ldd	r25, Y+24	; 0x18
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9c 8b       	std	Y+20, r25	; 0x14
    2116:	8b 8b       	std	Y+19, r24	; 0x13
    2118:	8b 89       	ldd	r24, Y+19	; 0x13
    211a:	9c 89       	ldd	r25, Y+20	; 0x14
    211c:	98 8b       	std	Y+16, r25	; 0x10
    211e:	8f 87       	std	Y+15, r24	; 0x0f
    2120:	8f 85       	ldd	r24, Y+15	; 0x0f
    2122:	98 89       	ldd	r25, Y+16	; 0x10
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_vidSendCommand+0x118>
    2128:	98 8b       	std	Y+16, r25	; 0x10
    212a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	65 e0       	ldi	r22, 0x05	; 5
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e4       	ldi	r27, 0x40	; 64
    213e:	8b 87       	std	Y+11, r24	; 0x0b
    2140:	9c 87       	std	Y+12, r25	; 0x0c
    2142:	ad 87       	std	Y+13, r26	; 0x0d
    2144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8f 83       	std	Y+7, r24	; 0x07
    2160:	98 87       	std	Y+8, r25	; 0x08
    2162:	a9 87       	std	Y+9, r26	; 0x09
    2164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <LCD_vidSendCommand+0x1dc>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_vidSendCommand+0x1ca>
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <LCD_vidSendCommand+0x1be>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_vidSendCommand+0x206>
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



}
    221a:	6d 96       	adiw	r28, 0x1d	; 29
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_VidWriteCharacter>:
extern void LCD_VidWriteCharacter(u8 Copy_u8character)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	6d 97       	sbiw	r28, 0x1d	; 29
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	67 e0       	ldi	r22, 0x07	; 7
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	66 e0       	ldi	r22, 0x06	; 6
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8character);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	6d 8d       	ldd	r22, Y+29	; 0x1d
    225a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	65 e0       	ldi	r22, 0x05	; 5
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e4       	ldi	r27, 0x40	; 64
    2270:	89 8f       	std	Y+25, r24	; 0x19
    2272:	9a 8f       	std	Y+26, r25	; 0x1a
    2274:	ab 8f       	std	Y+27, r26	; 0x1b
    2276:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	69 8d       	ldd	r22, Y+25	; 0x19
    227a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a ef       	ldi	r20, 0xFA	; 250
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8d 8b       	std	Y+21, r24	; 0x15
    2292:	9e 8b       	std	Y+22, r25	; 0x16
    2294:	af 8b       	std	Y+23, r26	; 0x17
    2296:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2298:	6d 89       	ldd	r22, Y+21	; 0x15
    229a:	7e 89       	ldd	r23, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	2c f4       	brge	.+10     	; 0x22ba <LCD_VidWriteCharacter+0x8e>
		__ticks = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	3f c0       	rjmp	.+126    	; 0x2338 <LCD_VidWriteCharacter+0x10c>
	else if (__tmp > 65535)
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f5       	brge	.+82     	; 0x2324 <LCD_VidWriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LCD_VidWriteCharacter+0xee>
    22fc:	88 ec       	ldi	r24, 0xC8	; 200
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9a 8b       	std	Y+18, r25	; 0x12
    2302:	89 8b       	std	Y+17, r24	; 0x11
    2304:	89 89       	ldd	r24, Y+17	; 0x11
    2306:	9a 89       	ldd	r25, Y+18	; 0x12
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_VidWriteCharacter+0xdc>
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2310:	8b 89       	ldd	r24, Y+19	; 0x13
    2312:	9c 89       	ldd	r25, Y+20	; 0x14
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	9c 8b       	std	Y+20, r25	; 0x14
    2318:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231a:	8b 89       	ldd	r24, Y+19	; 0x13
    231c:	9c 89       	ldd	r25, Y+20	; 0x14
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	69 f7       	brne	.-38     	; 0x22fc <LCD_VidWriteCharacter+0xd0>
    2322:	14 c0       	rjmp	.+40     	; 0x234c <LCD_VidWriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2324:	6d 89       	ldd	r22, Y+21	; 0x15
    2326:	7e 89       	ldd	r23, Y+22	; 0x16
    2328:	8f 89       	ldd	r24, Y+23	; 0x17
    232a:	98 8d       	ldd	r25, Y+24	; 0x18
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	9c 89       	ldd	r25, Y+20	; 0x14
    233c:	98 8b       	std	Y+16, r25	; 0x10
    233e:	8f 87       	std	Y+15, r24	; 0x0f
    2340:	8f 85       	ldd	r24, Y+15	; 0x0f
    2342:	98 89       	ldd	r25, Y+16	; 0x10
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_VidWriteCharacter+0x118>
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	65 e0       	ldi	r22, 0x05	; 5
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e4       	ldi	r27, 0x40	; 64
    235e:	8b 87       	std	Y+11, r24	; 0x0b
    2360:	9c 87       	std	Y+12, r25	; 0x0c
    2362:	ad 87       	std	Y+13, r26	; 0x0d
    2364:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a ef       	ldi	r20, 0xFA	; 250
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8f 83       	std	Y+7, r24	; 0x07
    2380:	98 87       	std	Y+8, r25	; 0x08
    2382:	a9 87       	std	Y+9, r26	; 0x09
    2384:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <LCD_VidWriteCharacter+0x17c>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <LCD_VidWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <LCD_VidWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <LCD_VidWriteCharacter+0x1dc>
    23ea:	88 ec       	ldi	r24, 0xC8	; 200
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_VidWriteCharacter+0x1ca>
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <LCD_VidWriteCharacter+0x1be>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <LCD_VidWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	9a 81       	ldd	r25, Y+2	; 0x02
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_VidWriteCharacter+0x206>
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    243a:	6d 96       	adiw	r28, 0x1d	; 29
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <LCD_vidWriteStr>:
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	6e 97       	sbiw	r28, 0x1e	; 30
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	9e 8f       	std	Y+30, r25	; 0x1e
    2462:	8d 8f       	std	Y+29, r24	; 0x1d
    2464:	04 c1       	rjmp	.+520    	; 0x266e <LCD_vidWriteStr+0x222>

	while(* Copy_u8pstr != '\0')
	{
		DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	67 e0       	ldi	r22, 0x07	; 7
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
		DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
		DIO_u8SetPortVal(LCD_DATA_PORT,*Copy_u8pstr);
    247a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    247c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    247e:	90 81       	ld	r25, Z
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	69 2f       	mov	r22, r25
    2484:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	65 e0       	ldi	r22, 0x05	; 5
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e4       	ldi	r27, 0x40	; 64
    249a:	89 8f       	std	Y+25, r24	; 0x19
    249c:	9a 8f       	std	Y+26, r25	; 0x1a
    249e:	ab 8f       	std	Y+27, r26	; 0x1b
    24a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	69 8d       	ldd	r22, Y+25	; 0x19
    24a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a ef       	ldi	r20, 0xFA	; 250
    24b0:	54 e4       	ldi	r21, 0x44	; 68
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8d 8b       	std	Y+21, r24	; 0x15
    24bc:	9e 8b       	std	Y+22, r25	; 0x16
    24be:	af 8b       	std	Y+23, r26	; 0x17
    24c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <LCD_vidWriteStr+0x98>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <LCD_vidWriteStr+0x116>
	else if (__tmp > 65535)
    24e4:	6d 89       	ldd	r22, Y+21	; 0x15
    24e6:	7e 89       	ldd	r23, Y+22	; 0x16
    24e8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ea:	98 8d       	ldd	r25, Y+24	; 0x18
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <LCD_vidWriteStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	69 8d       	ldd	r22, Y+25	; 0x19
    24fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9c 8b       	std	Y+20, r25	; 0x14
    2522:	8b 8b       	std	Y+19, r24	; 0x13
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <LCD_vidWriteStr+0xf8>
    2526:	88 ec       	ldi	r24, 0xC8	; 200
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	9a 89       	ldd	r25, Y+18	; 0x12
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_vidWriteStr+0xe6>
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <LCD_vidWriteStr+0xda>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <LCD_vidWriteStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	98 89       	ldd	r25, Y+16	; 0x10
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_vidWriteStr+0x122>
    2572:	98 8b       	std	Y+16, r25	; 0x10
    2574:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	65 e0       	ldi	r22, 0x05	; 5
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a8 e4       	ldi	r26, 0x48	; 72
    2586:	b2 e4       	ldi	r27, 0x42	; 66
    2588:	8b 87       	std	Y+11, r24	; 0x0b
    258a:	9c 87       	std	Y+12, r25	; 0x0c
    258c:	ad 87       	std	Y+13, r26	; 0x0d
    258e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	7c 85       	ldd	r23, Y+12	; 0x0c
    2594:	8d 85       	ldd	r24, Y+13	; 0x0d
    2596:	9e 85       	ldd	r25, Y+14	; 0x0e
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a ef       	ldi	r20, 0xFA	; 250
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8f 83       	std	Y+7, r24	; 0x07
    25aa:	98 87       	std	Y+8, r25	; 0x08
    25ac:	a9 87       	std	Y+9, r26	; 0x09
    25ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <LCD_vidWriteStr+0x186>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <LCD_vidWriteStr+0x204>
	else if (__tmp > 65535)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <LCD_vidWriteStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <LCD_vidWriteStr+0x1e6>
    2614:	88 ec       	ldi	r24, 0xC8	; 200
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <LCD_vidWriteStr+0x1d4>
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <LCD_vidWriteStr+0x1c8>
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <LCD_vidWriteStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_vidWriteStr+0x210>
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8pstr++;
    2664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2666:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	9e 8f       	std	Y+30, r25	; 0x1e
    266c:	8d 8f       	std	Y+29, r24	; 0x1d

}
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{

	while(* Copy_u8pstr != '\0')
    266e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2670:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	09 f0       	breq	.+2      	; 0x267a <LCD_vidWriteStr+0x22e>
    2678:	f6 ce       	rjmp	.-532    	; 0x2466 <LCD_vidWriteStr+0x1a>
		_delay_ms(50);
		Copy_u8pstr++;
	}


}
    267a:	6e 96       	adiw	r28, 0x1e	; 30
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_vidClearScreen>:
void LCD_vidClearScreen(void)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	6c 97       	sbiw	r28, 0x1c	; 28
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    26a0:	83 e0       	ldi	r24, 0x03	; 3
    26a2:	67 e0       	ldi	r22, 0x07	; 7
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	66 e0       	ldi	r22, 0x06	; 6
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,LCD_DISPLAY_CLR_CMD);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	65 e0       	ldi	r22, 0x05	; 5
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	b0 e4       	ldi	r27, 0x40	; 64
    26ce:	89 8f       	std	Y+25, r24	; 0x19
    26d0:	9a 8f       	std	Y+26, r25	; 0x1a
    26d2:	ab 8f       	std	Y+27, r26	; 0x1b
    26d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	69 8d       	ldd	r22, Y+25	; 0x19
    26d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8d 8b       	std	Y+21, r24	; 0x15
    26f0:	9e 8b       	std	Y+22, r25	; 0x16
    26f2:	af 8b       	std	Y+23, r26	; 0x17
    26f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <LCD_vidClearScreen+0x8c>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <LCD_vidClearScreen+0x10a>
	else if (__tmp > 65535)
    2718:	6d 89       	ldd	r22, Y+21	; 0x15
    271a:	7e 89       	ldd	r23, Y+22	; 0x16
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <LCD_vidClearScreen+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	69 8d       	ldd	r22, Y+25	; 0x19
    2732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <LCD_vidClearScreen+0xec>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a 8b       	std	Y+18, r25	; 0x12
    2760:	89 8b       	std	Y+17, r24	; 0x11
    2762:	89 89       	ldd	r24, Y+17	; 0x11
    2764:	9a 89       	ldd	r25, Y+18	; 0x12
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_vidClearScreen+0xda>
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8b 89       	ldd	r24, Y+19	; 0x13
    2770:	9c 89       	ldd	r25, Y+20	; 0x14
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <LCD_vidClearScreen+0xce>
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <LCD_vidClearScreen+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6d 89       	ldd	r22, Y+21	; 0x15
    2784:	7e 89       	ldd	r23, Y+22	; 0x16
    2786:	8f 89       	ldd	r24, Y+23	; 0x17
    2788:	98 8d       	ldd	r25, Y+24	; 0x18
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	8b 89       	ldd	r24, Y+19	; 0x13
    2798:	9c 89       	ldd	r25, Y+20	; 0x14
    279a:	98 8b       	std	Y+16, r25	; 0x10
    279c:	8f 87       	std	Y+15, r24	; 0x0f
    279e:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a0:	98 89       	ldd	r25, Y+16	; 0x10
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_vidClearScreen+0x116>
    27a6:	98 8b       	std	Y+16, r25	; 0x10
    27a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    27aa:	83 e0       	ldi	r24, 0x03	; 3
    27ac:	65 e0       	ldi	r22, 0x05	; 5
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e0       	ldi	r26, 0x00	; 0
    27ba:	b0 e4       	ldi	r27, 0x40	; 64
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    27c0:	ad 87       	std	Y+13, r26	; 0x0d
    27c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	4a ef       	ldi	r20, 0xFA	; 250
    27d2:	54 e4       	ldi	r21, 0x44	; 68
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8f 83       	std	Y+7, r24	; 0x07
    27de:	98 87       	std	Y+8, r25	; 0x08
    27e0:	a9 87       	std	Y+9, r26	; 0x09
    27e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	2c f4       	brge	.+10     	; 0x2806 <LCD_vidClearScreen+0x17a>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	3f c0       	rjmp	.+126    	; 0x2884 <LCD_vidClearScreen+0x1f8>
	else if (__tmp > 65535)
    2806:	6f 81       	ldd	r22, Y+7	; 0x07
    2808:	78 85       	ldd	r23, Y+8	; 0x08
    280a:	89 85       	ldd	r24, Y+9	; 0x09
    280c:	9a 85       	ldd	r25, Y+10	; 0x0a
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	4c f5       	brge	.+82     	; 0x2870 <LCD_vidClearScreen+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2820:	7c 85       	ldd	r23, Y+12	; 0x0c
    2822:	8d 85       	ldd	r24, Y+13	; 0x0d
    2824:	9e 85       	ldd	r25, Y+14	; 0x0e
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e2       	ldi	r20, 0x20	; 32
    282c:	51 e4       	ldi	r21, 0x41	; 65
    282e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <LCD_vidClearScreen+0x1da>
    2848:	88 ec       	ldi	r24, 0xC8	; 200
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_vidClearScreen+0x1c8>
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	69 f7       	brne	.-38     	; 0x2848 <LCD_vidClearScreen+0x1bc>
    286e:	14 c0       	rjmp	.+40     	; 0x2898 <LCD_vidClearScreen+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	9a 81       	ldd	r25, Y+2	; 0x02
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <LCD_vidClearScreen+0x204>
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2898:	6c 96       	adiw	r28, 0x1c	; 28
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(void)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	6c 97       	sbiw	r28, 0x1c	; 28
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	67 e0       	ldi	r22, 0x07	; 7
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    28c8:	83 e0       	ldi	r24, 0x03	; 3
    28ca:	66 e0       	ldi	r22, 0x06	; 6
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x18);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	68 e1       	ldi	r22, 0x18	; 24
    28d6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	65 e0       	ldi	r22, 0x05	; 5
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e4       	ldi	r27, 0x40	; 64
    28ec:	89 8f       	std	Y+25, r24	; 0x19
    28ee:	9a 8f       	std	Y+26, r25	; 0x1a
    28f0:	ab 8f       	std	Y+27, r26	; 0x1b
    28f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f4:	69 8d       	ldd	r22, Y+25	; 0x19
    28f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	8d 8b       	std	Y+21, r24	; 0x15
    290e:	9e 8b       	std	Y+22, r25	; 0x16
    2910:	af 8b       	std	Y+23, r26	; 0x17
    2912:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2914:	6d 89       	ldd	r22, Y+21	; 0x15
    2916:	7e 89       	ldd	r23, Y+22	; 0x16
    2918:	8f 89       	ldd	r24, Y+23	; 0x17
    291a:	98 8d       	ldd	r25, Y+24	; 0x18
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	2c f4       	brge	.+10     	; 0x2936 <LCD_vidShiftLeft+0x8c>
		__ticks = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	3f c0       	rjmp	.+126    	; 0x29b4 <LCD_vidShiftLeft+0x10a>
	else if (__tmp > 65535)
    2936:	6d 89       	ldd	r22, Y+21	; 0x15
    2938:	7e 89       	ldd	r23, Y+22	; 0x16
    293a:	8f 89       	ldd	r24, Y+23	; 0x17
    293c:	98 8d       	ldd	r25, Y+24	; 0x18
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	3f ef       	ldi	r19, 0xFF	; 255
    2942:	4f e7       	ldi	r20, 0x7F	; 127
    2944:	57 e4       	ldi	r21, 0x47	; 71
    2946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    294a:	18 16       	cp	r1, r24
    294c:	4c f5       	brge	.+82     	; 0x29a0 <LCD_vidShiftLeft+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9c 8b       	std	Y+20, r25	; 0x14
    2974:	8b 8b       	std	Y+19, r24	; 0x13
    2976:	0f c0       	rjmp	.+30     	; 0x2996 <LCD_vidShiftLeft+0xec>
    2978:	88 ec       	ldi	r24, 0xC8	; 200
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	89 8b       	std	Y+17, r24	; 0x11
    2980:	89 89       	ldd	r24, Y+17	; 0x11
    2982:	9a 89       	ldd	r25, Y+18	; 0x12
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_vidShiftLeft+0xda>
    2988:	9a 8b       	std	Y+18, r25	; 0x12
    298a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	9c 8b       	std	Y+20, r25	; 0x14
    2994:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2996:	8b 89       	ldd	r24, Y+19	; 0x13
    2998:	9c 89       	ldd	r25, Y+20	; 0x14
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	69 f7       	brne	.-38     	; 0x2978 <LCD_vidShiftLeft+0xce>
    299e:	14 c0       	rjmp	.+40     	; 0x29c8 <LCD_vidShiftLeft+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9c 8b       	std	Y+20, r25	; 0x14
    29b2:	8b 8b       	std	Y+19, r24	; 0x13
    29b4:	8b 89       	ldd	r24, Y+19	; 0x13
    29b6:	9c 89       	ldd	r25, Y+20	; 0x14
    29b8:	98 8b       	std	Y+16, r25	; 0x10
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
    29bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29be:	98 89       	ldd	r25, Y+16	; 0x10
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_vidShiftLeft+0x116>
    29c4:	98 8b       	std	Y+16, r25	; 0x10
    29c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	65 e0       	ldi	r22, 0x05	; 5
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e4       	ldi	r27, 0x40	; 64
    29da:	8b 87       	std	Y+11, r24	; 0x0b
    29dc:	9c 87       	std	Y+12, r25	; 0x0c
    29de:	ad 87       	std	Y+13, r26	; 0x0d
    29e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	4a ef       	ldi	r20, 0xFA	; 250
    29f0:	54 e4       	ldi	r21, 0x44	; 68
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8f 83       	std	Y+7, r24	; 0x07
    29fc:	98 87       	std	Y+8, r25	; 0x08
    29fe:	a9 87       	std	Y+9, r26	; 0x09
    2a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	2c f4       	brge	.+10     	; 0x2a24 <LCD_vidShiftLeft+0x17a>
		__ticks = 1;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	3f c0       	rjmp	.+126    	; 0x2aa2 <LCD_vidShiftLeft+0x1f8>
	else if (__tmp > 65535)
    2a24:	6f 81       	ldd	r22, Y+7	; 0x07
    2a26:	78 85       	ldd	r23, Y+8	; 0x08
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	3f ef       	ldi	r19, 0xFF	; 255
    2a30:	4f e7       	ldi	r20, 0x7F	; 127
    2a32:	57 e4       	ldi	r21, 0x47	; 71
    2a34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a38:	18 16       	cp	r1, r24
    2a3a:	4c f5       	brge	.+82     	; 0x2a8e <LCD_vidShiftLeft+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <LCD_vidShiftLeft+0x1da>
    2a66:	88 ec       	ldi	r24, 0xC8	; 200
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_vidShiftLeft+0x1c8>
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <LCD_vidShiftLeft+0x1bc>
    2a8c:	14 c0       	rjmp	.+40     	; 0x2ab6 <LCD_vidShiftLeft+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_vidShiftLeft+0x204>
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2ab6:	6c 96       	adiw	r28, 0x1c	; 28
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <LCD_vidShiftRight>:
void LCD_vidShiftRight(void)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	6c 97       	sbiw	r28, 0x1c	; 28
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	67 e0       	ldi	r22, 0x07	; 7
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	66 e0       	ldi	r22, 0x06	; 6
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x1C);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	6c e1       	ldi	r22, 0x1C	; 28
    2af4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	65 e0       	ldi	r22, 0x05	; 5
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e4       	ldi	r27, 0x40	; 64
    2b0a:	89 8f       	std	Y+25, r24	; 0x19
    2b0c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b0e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	69 8d       	ldd	r22, Y+25	; 0x19
    2b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8d 8b       	std	Y+21, r24	; 0x15
    2b2c:	9e 8b       	std	Y+22, r25	; 0x16
    2b2e:	af 8b       	std	Y+23, r26	; 0x17
    2b30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b32:	6d 89       	ldd	r22, Y+21	; 0x15
    2b34:	7e 89       	ldd	r23, Y+22	; 0x16
    2b36:	8f 89       	ldd	r24, Y+23	; 0x17
    2b38:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <LCD_vidShiftRight+0x8c>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9c 8b       	std	Y+20, r25	; 0x14
    2b50:	8b 8b       	std	Y+19, r24	; 0x13
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <LCD_vidShiftRight+0x10a>
	else if (__tmp > 65535)
    2b54:	6d 89       	ldd	r22, Y+21	; 0x15
    2b56:	7e 89       	ldd	r23, Y+22	; 0x16
    2b58:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <LCD_vidShiftRight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <LCD_vidShiftRight+0xec>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9a 8b       	std	Y+18, r25	; 0x12
    2b9c:	89 8b       	std	Y+17, r24	; 0x11
    2b9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_vidShiftRight+0xda>
    2ba6:	9a 8b       	std	Y+18, r25	; 0x12
    2ba8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bac:	9c 89       	ldd	r25, Y+20	; 0x14
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9c 8b       	std	Y+20, r25	; 0x14
    2bb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <LCD_vidShiftRight+0xce>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <LCD_vidShiftRight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
    2bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd6:	98 8b       	std	Y+16, r25	; 0x10
    2bd8:	8f 87       	std	Y+15, r24	; 0x0f
    2bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bdc:	98 89       	ldd	r25, Y+16	; 0x10
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_vidShiftRight+0x116>
    2be2:	98 8b       	std	Y+16, r25	; 0x10
    2be4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	65 e0       	ldi	r22, 0x05	; 5
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_u8SetPinVal>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e4       	ldi	r27, 0x40	; 64
    2bf8:	8b 87       	std	Y+11, r24	; 0x0b
    2bfa:	9c 87       	std	Y+12, r25	; 0x0c
    2bfc:	ad 87       	std	Y+13, r26	; 0x0d
    2bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8f 83       	std	Y+7, r24	; 0x07
    2c1a:	98 87       	std	Y+8, r25	; 0x08
    2c1c:	a9 87       	std	Y+9, r26	; 0x09
    2c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_vidShiftRight+0x17a>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_vidShiftRight+0x1f8>
	else if (__tmp > 65535)
    2c42:	6f 81       	ldd	r22, Y+7	; 0x07
    2c44:	78 85       	ldd	r23, Y+8	; 0x08
    2c46:	89 85       	ldd	r24, Y+9	; 0x09
    2c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_vidShiftRight+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_vidShiftRight+0x1da>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_vidShiftRight+0x1c8>
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_vidShiftRight+0x1bc>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <LCD_vidShiftRight+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6f 81       	ldd	r22, Y+7	; 0x07
    2cae:	78 85       	ldd	r23, Y+8	; 0x08
    2cb0:	89 85       	ldd	r24, Y+9	; 0x09
    2cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_vidShiftRight+0x204>
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2cd4:	6c 96       	adiw	r28, 0x1c	; 28
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <LCD_vidWriteNumber>:
void LCD_vidWriteNumber(u32* Copy_u8pNumber)

{
    2ce6:	0f 93       	push	r16
    2ce8:	1f 93       	push	r17
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	61 97       	sbiw	r28, 0x11	; 17
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	99 8b       	std	Y+17, r25	; 0x11
    2d00:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8ARR[10] = {'0'};
    2d02:	8a e0       	ldi	r24, 0x0A	; 10
    2d04:	fe 01       	movw	r30, r28
    2d06:	36 96       	adiw	r30, 0x06	; 6
    2d08:	df 01       	movw	r26, r30
    2d0a:	98 2f       	mov	r25, r24
    2d0c:	1d 92       	st	X+, r1
    2d0e:	9a 95       	dec	r25
    2d10:	e9 f7       	brne	.-6      	; 0x2d0c <LCD_vidWriteNumber+0x26>
    2d12:	80 e3       	ldi	r24, 0x30	; 48
    2d14:	8e 83       	std	Y+6, r24	; 0x06
	signed char Local_u8Counter;
	u32 Local_u32Temp=*Copy_u8pNumber ;
    2d16:	e8 89       	ldd	r30, Y+16	; 0x10
    2d18:	f9 89       	ldd	r31, Y+17	; 0x11
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    2d20:	b3 81       	ldd	r27, Z+3	; 0x03
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	ab 83       	std	Y+3, r26	; 0x03
    2d28:	bc 83       	std	Y+4, r27	; 0x04
	for (Local_u8Counter=0 ; Local_u8Counter <10 ;Local_u8Counter++)
    2d2a:	1d 82       	std	Y+5, r1	; 0x05
    2d2c:	4f c0       	rjmp	.+158    	; 0x2dcc <LCD_vidWriteNumber+0xe6>
	{

		Local_u8ARR[ Local_u8Counter] = Local_u32Temp %10;
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	08 2f       	mov	r16, r24
    2d32:	11 27       	eor	r17, r17
    2d34:	07 fd       	sbrc	r16, 7
    2d36:	10 95       	com	r17
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d40:	2a e0       	ldi	r18, 0x0A	; 10
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodsi4>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	28 2f       	mov	r18, r24
    2d56:	ce 01       	movw	r24, r28
    2d58:	06 96       	adiw	r24, 0x06	; 6
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e0 0f       	add	r30, r16
    2d5e:	f1 1f       	adc	r31, r17
    2d60:	20 83       	st	Z, r18
		Local_u32Temp/=10;
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	ab 81       	ldd	r26, Y+3	; 0x03
    2d68:	bc 81       	ldd	r27, Y+4	; 0x04
    2d6a:	2a e0       	ldi	r18, 0x0A	; 10
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodsi4>
    2d7a:	da 01       	movw	r26, r20
    2d7c:	c9 01       	movw	r24, r18
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	ab 83       	std	Y+3, r26	; 0x03
    2d84:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Temp = floor(Local_u32Temp) ;
    2d86:	69 81       	ldd	r22, Y+1	; 0x01
    2d88:	7a 81       	ldd	r23, Y+2	; 0x02
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 09 18 	call	0x3012	; 0x3012 <floor>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	ab 83       	std	Y+3, r26	; 0x03
    2db4:	bc 83       	std	Y+4, r27	; 0x04
		if (Local_u32Temp==0)
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	ab 81       	ldd	r26, Y+3	; 0x03
    2dbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	a1 05       	cpc	r26, r1
    2dc2:	b1 05       	cpc	r27, r1
    2dc4:	c9 f0       	breq	.+50     	; 0x2df8 <LCD_vidWriteNumber+0x112>

{
	u8 Local_u8ARR[10] = {'0'};
	signed char Local_u8Counter;
	u32 Local_u32Temp=*Copy_u8pNumber ;
	for (Local_u8Counter=0 ; Local_u8Counter <10 ;Local_u8Counter++)
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	8d 83       	std	Y+5, r24	; 0x05
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	8a 30       	cpi	r24, 0x0A	; 10
    2dd0:	0c f4       	brge	.+2      	; 0x2dd4 <LCD_vidWriteNumber+0xee>
    2dd2:	ad cf       	rjmp	.-166    	; 0x2d2e <LCD_vidWriteNumber+0x48>
    2dd4:	11 c0       	rjmp	.+34     	; 0x2df8 <LCD_vidWriteNumber+0x112>
		else{;}
	}

	while (Local_u8Counter>=0)
	{
		LCD_VidWriteCharacter(Local_u8ARR[ Local_u8Counter] +48) ;
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	28 2f       	mov	r18, r24
    2dda:	33 27       	eor	r19, r19
    2ddc:	27 fd       	sbrc	r18, 7
    2dde:	30 95       	com	r19
    2de0:	ce 01       	movw	r24, r28
    2de2:	06 96       	adiw	r24, 0x06	; 6
    2de4:	fc 01       	movw	r30, r24
    2de6:	e2 0f       	add	r30, r18
    2de8:	f3 1f       	adc	r31, r19
    2dea:	80 81       	ld	r24, Z
    2dec:	80 5d       	subi	r24, 0xD0	; 208
    2dee:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_VidWriteCharacter>
		Local_u8Counter--;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	81 50       	subi	r24, 0x01	; 1
    2df6:	8d 83       	std	Y+5, r24	; 0x05
			break;
		}
		else{;}
	}

	while (Local_u8Counter>=0)
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	88 23       	and	r24, r24
    2dfc:	64 f7       	brge	.-40     	; 0x2dd6 <LCD_vidWriteNumber+0xf0>
	{
		LCD_VidWriteCharacter(Local_u8ARR[ Local_u8Counter] +48) ;
		Local_u8Counter--;

	}
}
    2dfe:	61 96       	adiw	r28, 0x11	; 17
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	08 95       	ret

00002e14 <SLAVE_INIT>:
#include "MCAL/DIO/DIO_int.h"
#include "HAL/LCD_handler/LCD_int.h"
#include <avr/io.h>
#include"AVR/delay.h"
void SLAVE_INIT (void)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRB , 7);
    2e1c:	a7 e3       	ldi	r26, 0x37	; 55
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e7 e3       	ldi	r30, 0x37	; 55
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8f 77       	andi	r24, 0x7F	; 127
    2e28:	8c 93       	st	X, r24
	CLR_BIT(DDRB , 5);
    2e2a:	a7 e3       	ldi	r26, 0x37	; 55
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e7 e3       	ldi	r30, 0x37	; 55
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	8f 7d       	andi	r24, 0xDF	; 223
    2e36:	8c 93       	st	X, r24
	SET_BIT(DDRB , 6);
    2e38:	a7 e3       	ldi	r26, 0x37	; 55
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	e7 e3       	ldi	r30, 0x37	; 55
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	80 64       	ori	r24, 0x40	; 64
    2e44:	8c 93       	st	X, r24
	CLR_BIT(DDRB , 4);
    2e46:	a7 e3       	ldi	r26, 0x37	; 55
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e7 e3       	ldi	r30, 0x37	; 55
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 7e       	andi	r24, 0xEF	; 239
    2e52:	8c 93       	st	X, r24
	/*SLAVE ENABLE*/
	CLR_BIT(SPCR,4);
    2e54:	ad e2       	ldi	r26, 0x2D	; 45
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	ed e2       	ldi	r30, 0x2D	; 45
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	8f 7e       	andi	r24, 0xEF	; 239
    2e60:	8c 93       	st	X, r24
	/*DATA OREDER LSB FIRST*/
	SET_BIT(SPCR , 5);
    2e62:	ad e2       	ldi	r26, 0x2D	; 45
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	ed e2       	ldi	r30, 0x2D	; 45
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	80 62       	ori	r24, 0x20	; 32
    2e6e:	8c 93       	st	X, r24
	/*4 PRESCALLER*/
	CLR_BIT(SPCR,0);
    2e70:	ad e2       	ldi	r26, 0x2D	; 45
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	ed e2       	ldi	r30, 0x2D	; 45
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	8e 7f       	andi	r24, 0xFE	; 254
    2e7c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,1);
    2e7e:	ad e2       	ldi	r26, 0x2D	; 45
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	ed e2       	ldi	r30, 0x2D	; 45
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	8d 7f       	andi	r24, 0xFD	; 253
    2e8a:	8c 93       	st	X, r24
	CLR_BIT(SPSR,1);
    2e8c:	ae e2       	ldi	r26, 0x2E	; 46
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	ee e2       	ldi	r30, 0x2E	; 46
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	8d 7f       	andi	r24, 0xFD	; 253
    2e98:	8c 93       	st	X, r24
	/*SPI ENABLE*/
	SET_BIT(SPCR,6);
    2e9a:	ad e2       	ldi	r26, 0x2D	; 45
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	ed e2       	ldi	r30, 0x2D	; 45
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	80 64       	ori	r24, 0x40	; 64
    2ea6:	8c 93       	st	X, r24
}
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <SPI_RESCIEVE_DATA>:
char SPI_RESCIEVE_DATA (void)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPSR,7)==0);
    2eb6:	ee e2       	ldi	r30, 0x2E	; 46
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	88 23       	and	r24, r24
    2ebe:	dc f7       	brge	.-10     	; 0x2eb6 <SPI_RESCIEVE_DATA+0x8>
	return ( SPDR);
    2ec0:	ef e2       	ldi	r30, 0x2F	; 47
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
}
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <main>:
void main (void)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <main+0x6>
    2ed2:	0f 92       	push	r0
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInit();
    2ed8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <LCD_vidInit>
	SLAVE_INIT();
    2edc:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <SLAVE_INIT>
//	LCD_vidWriteStr("MAZIN");
	char X ;
	int Counter=0;
    2ee0:	1a 82       	std	Y+2, r1	; 0x02
    2ee2:	19 82       	std	Y+1, r1	; 0x01
	//LCD_VidWriteCharacter(X);
	while(1)
	{


		X = SPI_RESCIEVE_DATA();
    2ee4:	0e 94 57 17 	call	0x2eae	; 0x2eae <SPI_RESCIEVE_DATA>
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
		LCD_VidWriteCharacter(X);
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_VidWriteCharacter>
		Counter++;
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	01 96       	adiw	r24, 0x01	; 1
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	89 83       	std	Y+1, r24	; 0x01
		if(Counter%5==0)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	25 e0       	ldi	r18, 0x05	; 5
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	b9 01       	movw	r22, r18
    2f04:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__divmodhi4>
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	61 f7       	brne	.-40     	; 0x2ee4 <main+0x18>
		{LCD_vidClearScreen();}
    2f0c:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_vidClearScreen>
    2f10:	e9 cf       	rjmp	.-46     	; 0x2ee4 <main+0x18>

00002f12 <__divmodhi4>:
    2f12:	97 fb       	bst	r25, 7
    2f14:	09 2e       	mov	r0, r25
    2f16:	07 26       	eor	r0, r23
    2f18:	0a d0       	rcall	.+20     	; 0x2f2e <__divmodhi4_neg1>
    2f1a:	77 fd       	sbrc	r23, 7
    2f1c:	04 d0       	rcall	.+8      	; 0x2f26 <__divmodhi4_neg2>
    2f1e:	2e d0       	rcall	.+92     	; 0x2f7c <__udivmodhi4>
    2f20:	06 d0       	rcall	.+12     	; 0x2f2e <__divmodhi4_neg1>
    2f22:	00 20       	and	r0, r0
    2f24:	1a f4       	brpl	.+6      	; 0x2f2c <__divmodhi4_exit>

00002f26 <__divmodhi4_neg2>:
    2f26:	70 95       	com	r23
    2f28:	61 95       	neg	r22
    2f2a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f2c <__divmodhi4_exit>:
    2f2c:	08 95       	ret

00002f2e <__divmodhi4_neg1>:
    2f2e:	f6 f7       	brtc	.-4      	; 0x2f2c <__divmodhi4_exit>
    2f30:	90 95       	com	r25
    2f32:	81 95       	neg	r24
    2f34:	9f 4f       	sbci	r25, 0xFF	; 255
    2f36:	08 95       	ret

00002f38 <__udivmodsi4>:
    2f38:	a1 e2       	ldi	r26, 0x21	; 33
    2f3a:	1a 2e       	mov	r1, r26
    2f3c:	aa 1b       	sub	r26, r26
    2f3e:	bb 1b       	sub	r27, r27
    2f40:	fd 01       	movw	r30, r26
    2f42:	0d c0       	rjmp	.+26     	; 0x2f5e <__udivmodsi4_ep>

00002f44 <__udivmodsi4_loop>:
    2f44:	aa 1f       	adc	r26, r26
    2f46:	bb 1f       	adc	r27, r27
    2f48:	ee 1f       	adc	r30, r30
    2f4a:	ff 1f       	adc	r31, r31
    2f4c:	a2 17       	cp	r26, r18
    2f4e:	b3 07       	cpc	r27, r19
    2f50:	e4 07       	cpc	r30, r20
    2f52:	f5 07       	cpc	r31, r21
    2f54:	20 f0       	brcs	.+8      	; 0x2f5e <__udivmodsi4_ep>
    2f56:	a2 1b       	sub	r26, r18
    2f58:	b3 0b       	sbc	r27, r19
    2f5a:	e4 0b       	sbc	r30, r20
    2f5c:	f5 0b       	sbc	r31, r21

00002f5e <__udivmodsi4_ep>:
    2f5e:	66 1f       	adc	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	88 1f       	adc	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	1a 94       	dec	r1
    2f68:	69 f7       	brne	.-38     	; 0x2f44 <__udivmodsi4_loop>
    2f6a:	60 95       	com	r22
    2f6c:	70 95       	com	r23
    2f6e:	80 95       	com	r24
    2f70:	90 95       	com	r25
    2f72:	9b 01       	movw	r18, r22
    2f74:	ac 01       	movw	r20, r24
    2f76:	bd 01       	movw	r22, r26
    2f78:	cf 01       	movw	r24, r30
    2f7a:	08 95       	ret

00002f7c <__udivmodhi4>:
    2f7c:	aa 1b       	sub	r26, r26
    2f7e:	bb 1b       	sub	r27, r27
    2f80:	51 e1       	ldi	r21, 0x11	; 17
    2f82:	07 c0       	rjmp	.+14     	; 0x2f92 <__udivmodhi4_ep>

00002f84 <__udivmodhi4_loop>:
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	a6 17       	cp	r26, r22
    2f8a:	b7 07       	cpc	r27, r23
    2f8c:	10 f0       	brcs	.+4      	; 0x2f92 <__udivmodhi4_ep>
    2f8e:	a6 1b       	sub	r26, r22
    2f90:	b7 0b       	sbc	r27, r23

00002f92 <__udivmodhi4_ep>:
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	5a 95       	dec	r21
    2f98:	a9 f7       	brne	.-22     	; 0x2f84 <__udivmodhi4_loop>
    2f9a:	80 95       	com	r24
    2f9c:	90 95       	com	r25
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	08 95       	ret

00002fa4 <__prologue_saves__>:
    2fa4:	2f 92       	push	r2
    2fa6:	3f 92       	push	r3
    2fa8:	4f 92       	push	r4
    2faa:	5f 92       	push	r5
    2fac:	6f 92       	push	r6
    2fae:	7f 92       	push	r7
    2fb0:	8f 92       	push	r8
    2fb2:	9f 92       	push	r9
    2fb4:	af 92       	push	r10
    2fb6:	bf 92       	push	r11
    2fb8:	cf 92       	push	r12
    2fba:	df 92       	push	r13
    2fbc:	ef 92       	push	r14
    2fbe:	ff 92       	push	r15
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	ca 1b       	sub	r28, r26
    2fce:	db 0b       	sbc	r29, r27
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	09 94       	ijmp

00002fdc <__epilogue_restores__>:
    2fdc:	2a 88       	ldd	r2, Y+18	; 0x12
    2fde:	39 88       	ldd	r3, Y+17	; 0x11
    2fe0:	48 88       	ldd	r4, Y+16	; 0x10
    2fe2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fe4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fee:	b9 84       	ldd	r11, Y+9	; 0x09
    2ff0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ff2:	df 80       	ldd	r13, Y+7	; 0x07
    2ff4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff8:	0c 81       	ldd	r16, Y+4	; 0x04
    2ffa:	1b 81       	ldd	r17, Y+3	; 0x03
    2ffc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    3000:	ce 0f       	add	r28, r30
    3002:	d1 1d       	adc	r29, r1
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	ed 01       	movw	r28, r26
    3010:	08 95       	ret

00003012 <floor>:
    3012:	3b d0       	rcall	.+118    	; 0x308a <__fp_trunc>
    3014:	80 f0       	brcs	.+32     	; 0x3036 <floor+0x24>
    3016:	9f 37       	cpi	r25, 0x7F	; 127
    3018:	40 f4       	brcc	.+16     	; 0x302a <floor+0x18>
    301a:	91 11       	cpse	r25, r1
    301c:	0e f0       	brts	.+2      	; 0x3020 <floor+0xe>
    301e:	4d c0       	rjmp	.+154    	; 0x30ba <__fp_szero>
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	80 e8       	ldi	r24, 0x80	; 128
    3026:	9f eb       	ldi	r25, 0xBF	; 191
    3028:	08 95       	ret
    302a:	26 f4       	brtc	.+8      	; 0x3034 <floor+0x22>
    302c:	1b 16       	cp	r1, r27
    302e:	61 1d       	adc	r22, r1
    3030:	71 1d       	adc	r23, r1
    3032:	81 1d       	adc	r24, r1
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <__fp_mintl>
    3036:	1b c0       	rjmp	.+54     	; 0x306e <__fp_mpack>

00003038 <__fp_mintl>:
    3038:	88 23       	and	r24, r24
    303a:	71 f4       	brne	.+28     	; 0x3058 <__fp_mintl+0x20>
    303c:	77 23       	and	r23, r23
    303e:	21 f0       	breq	.+8      	; 0x3048 <__fp_mintl+0x10>
    3040:	98 50       	subi	r25, 0x08	; 8
    3042:	87 2b       	or	r24, r23
    3044:	76 2f       	mov	r23, r22
    3046:	07 c0       	rjmp	.+14     	; 0x3056 <__fp_mintl+0x1e>
    3048:	66 23       	and	r22, r22
    304a:	11 f4       	brne	.+4      	; 0x3050 <__fp_mintl+0x18>
    304c:	99 27       	eor	r25, r25
    304e:	0d c0       	rjmp	.+26     	; 0x306a <__fp_mintl+0x32>
    3050:	90 51       	subi	r25, 0x10	; 16
    3052:	86 2b       	or	r24, r22
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	2a f0       	brmi	.+10     	; 0x3064 <__fp_mintl+0x2c>
    305a:	9a 95       	dec	r25
    305c:	66 0f       	add	r22, r22
    305e:	77 1f       	adc	r23, r23
    3060:	88 1f       	adc	r24, r24
    3062:	da f7       	brpl	.-10     	; 0x305a <__fp_mintl+0x22>
    3064:	88 0f       	add	r24, r24
    3066:	96 95       	lsr	r25
    3068:	87 95       	ror	r24
    306a:	97 f9       	bld	r25, 7
    306c:	08 95       	ret

0000306e <__fp_mpack>:
    306e:	9f 3f       	cpi	r25, 0xFF	; 255
    3070:	31 f0       	breq	.+12     	; 0x307e <__fp_mpack_finite+0xc>

00003072 <__fp_mpack_finite>:
    3072:	91 50       	subi	r25, 0x01	; 1
    3074:	20 f4       	brcc	.+8      	; 0x307e <__fp_mpack_finite+0xc>
    3076:	87 95       	ror	r24
    3078:	77 95       	ror	r23
    307a:	67 95       	ror	r22
    307c:	b7 95       	ror	r27
    307e:	88 0f       	add	r24, r24
    3080:	91 1d       	adc	r25, r1
    3082:	96 95       	lsr	r25
    3084:	87 95       	ror	r24
    3086:	97 f9       	bld	r25, 7
    3088:	08 95       	ret

0000308a <__fp_trunc>:
    308a:	25 d0       	rcall	.+74     	; 0x30d6 <__fp_splitA>
    308c:	a0 f0       	brcs	.+40     	; 0x30b6 <__fp_trunc+0x2c>
    308e:	be e7       	ldi	r27, 0x7E	; 126
    3090:	b9 17       	cp	r27, r25
    3092:	88 f4       	brcc	.+34     	; 0x30b6 <__fp_trunc+0x2c>
    3094:	bb 27       	eor	r27, r27
    3096:	9f 38       	cpi	r25, 0x8F	; 143
    3098:	60 f4       	brcc	.+24     	; 0x30b2 <__fp_trunc+0x28>
    309a:	16 16       	cp	r1, r22
    309c:	b1 1d       	adc	r27, r1
    309e:	67 2f       	mov	r22, r23
    30a0:	78 2f       	mov	r23, r24
    30a2:	88 27       	eor	r24, r24
    30a4:	98 5f       	subi	r25, 0xF8	; 248
    30a6:	f7 cf       	rjmp	.-18     	; 0x3096 <__fp_trunc+0xc>
    30a8:	86 95       	lsr	r24
    30aa:	77 95       	ror	r23
    30ac:	67 95       	ror	r22
    30ae:	b1 1d       	adc	r27, r1
    30b0:	93 95       	inc	r25
    30b2:	96 39       	cpi	r25, 0x96	; 150
    30b4:	c8 f3       	brcs	.-14     	; 0x30a8 <__fp_trunc+0x1e>
    30b6:	08 95       	ret

000030b8 <__fp_zero>:
    30b8:	e8 94       	clt

000030ba <__fp_szero>:
    30ba:	bb 27       	eor	r27, r27
    30bc:	66 27       	eor	r22, r22
    30be:	77 27       	eor	r23, r23
    30c0:	cb 01       	movw	r24, r22
    30c2:	97 f9       	bld	r25, 7
    30c4:	08 95       	ret

000030c6 <__fp_split3>:
    30c6:	57 fd       	sbrc	r21, 7
    30c8:	90 58       	subi	r25, 0x80	; 128
    30ca:	44 0f       	add	r20, r20
    30cc:	55 1f       	adc	r21, r21
    30ce:	59 f0       	breq	.+22     	; 0x30e6 <__fp_splitA+0x10>
    30d0:	5f 3f       	cpi	r21, 0xFF	; 255
    30d2:	71 f0       	breq	.+28     	; 0x30f0 <__fp_splitA+0x1a>
    30d4:	47 95       	ror	r20

000030d6 <__fp_splitA>:
    30d6:	88 0f       	add	r24, r24
    30d8:	97 fb       	bst	r25, 7
    30da:	99 1f       	adc	r25, r25
    30dc:	61 f0       	breq	.+24     	; 0x30f6 <__fp_splitA+0x20>
    30de:	9f 3f       	cpi	r25, 0xFF	; 255
    30e0:	79 f0       	breq	.+30     	; 0x3100 <__fp_splitA+0x2a>
    30e2:	87 95       	ror	r24
    30e4:	08 95       	ret
    30e6:	12 16       	cp	r1, r18
    30e8:	13 06       	cpc	r1, r19
    30ea:	14 06       	cpc	r1, r20
    30ec:	55 1f       	adc	r21, r21
    30ee:	f2 cf       	rjmp	.-28     	; 0x30d4 <__fp_split3+0xe>
    30f0:	46 95       	lsr	r20
    30f2:	f1 df       	rcall	.-30     	; 0x30d6 <__fp_splitA>
    30f4:	08 c0       	rjmp	.+16     	; 0x3106 <__fp_splitA+0x30>
    30f6:	16 16       	cp	r1, r22
    30f8:	17 06       	cpc	r1, r23
    30fa:	18 06       	cpc	r1, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	f1 cf       	rjmp	.-30     	; 0x30e2 <__fp_splitA+0xc>
    3100:	86 95       	lsr	r24
    3102:	71 05       	cpc	r23, r1
    3104:	61 05       	cpc	r22, r1
    3106:	08 94       	sec
    3108:	08 95       	ret

0000310a <_exit>:
    310a:	f8 94       	cli

0000310c <__stop_program>:
    310c:	ff cf       	rjmp	.-2      	; 0x310c <__stop_program>
