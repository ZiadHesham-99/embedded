
DIO_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000798  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000477  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  64:	0c 94 cb 03 	jmp	0x796	; 0x796 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPortDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPortDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
  7e:	19 82       	std	Y+1, r1	; 0x01

	switch( Copy_u8PortNo )
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	d1 f0       	breq	.+52     	; 0xc8 <DIO_u8SetPortDir+0x5c>
  94:	2c 81       	ldd	r18, Y+4	; 0x04
  96:	3d 81       	ldd	r19, Y+5	; 0x05
  98:	22 30       	cpi	r18, 0x02	; 2
  9a:	31 05       	cpc	r19, r1
  9c:	2c f4       	brge	.+10     	; 0xa8 <DIO_u8SetPortDir+0x3c>
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	61 f0       	breq	.+24     	; 0xbe <DIO_u8SetPortDir+0x52>
  a6:	1f c0       	rjmp	.+62     	; 0xe6 <DIO_u8SetPortDir+0x7a>
  a8:	2c 81       	ldd	r18, Y+4	; 0x04
  aa:	3d 81       	ldd	r19, Y+5	; 0x05
  ac:	22 30       	cpi	r18, 0x02	; 2
  ae:	31 05       	cpc	r19, r1
  b0:	81 f0       	breq	.+32     	; 0xd2 <DIO_u8SetPortDir+0x66>
  b2:	8c 81       	ldd	r24, Y+4	; 0x04
  b4:	9d 81       	ldd	r25, Y+5	; 0x05
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	81 f0       	breq	.+32     	; 0xdc <DIO_u8SetPortDir+0x70>
  bc:	14 c0       	rjmp	.+40     	; 0xe6 <DIO_u8SetPortDir+0x7a>
	{
	  case PORT_A: DDRA_REG = Copy_u8Dir; break;
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	80 83       	st	Z, r24
  c6:	11 c0       	rjmp	.+34     	; 0xea <DIO_u8SetPortDir+0x7e>
	  case PORT_B: DDRB_REG = Copy_u8Dir; break;
  c8:	e7 e3       	ldi	r30, 0x37	; 55
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	80 83       	st	Z, r24
  d0:	0c c0       	rjmp	.+24     	; 0xea <DIO_u8SetPortDir+0x7e>
	  case PORT_C: DDRC_REG = Copy_u8Dir; break;
  d2:	e4 e3       	ldi	r30, 0x34	; 52
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	80 83       	st	Z, r24
  da:	07 c0       	rjmp	.+14     	; 0xea <DIO_u8SetPortDir+0x7e>
	  case PORT_D: DDRD_REG = Copy_u8Dir; break;
  dc:	e1 e3       	ldi	r30, 0x31	; 49
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	80 83       	st	Z, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_u8SetPortDir+0x7e>
	  default: Local_u8ErrStatus = RT_NOK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(Copy_u8Dir != INPUT || Copy_u8Dir != OUTPUT_PORT )
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	88 23       	and	r24, r24
  ee:	19 f4       	brne	.+6      	; 0xf6 <DIO_u8SetPortDir+0x8a>
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	11 f0       	breq	.+4      	; 0xfa <DIO_u8SetPortDir+0x8e>
	{
			Local_u8ErrStatus = RT_NOK;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 83       	std	Y+1, r24	; 0x01
	}
	else{;}
	return (Local_u8ErrStatus);
  fa:	89 81       	ldd	r24, Y+1	; 0x01
}
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	28 97       	sbiw	r28, 0x08	; 8
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	8a 83       	std	Y+2, r24	; 0x02
 122:	6b 83       	std	Y+3, r22	; 0x03
 124:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 126:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	08 f0       	brcs	.+2      	; 0x130 <DIO_u8SetPinDir+0x24>
 12e:	f2 c0       	rjmp	.+484    	; 0x314 <DIO_u8SetPinDir+0x208>
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	08 f0       	brcs	.+2      	; 0x138 <DIO_u8SetPinDir+0x2c>
 136:	ee c0       	rjmp	.+476    	; 0x314 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
 138:	8c 81       	ldd	r24, Y+4	; 0x04
 13a:	88 23       	and	r24, r24
 13c:	09 f0       	breq	.+2      	; 0x140 <DIO_u8SetPinDir+0x34>
 13e:	74 c0       	rjmp	.+232    	; 0x228 <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	38 87       	std	Y+8, r19	; 0x08
 148:	2f 83       	std	Y+7, r18	; 0x07
 14a:	8f 81       	ldd	r24, Y+7	; 0x07
 14c:	98 85       	ldd	r25, Y+8	; 0x08
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	91 05       	cpc	r25, r1
 152:	59 f1       	breq	.+86     	; 0x1aa <DIO_u8SetPinDir+0x9e>
 154:	2f 81       	ldd	r18, Y+7	; 0x07
 156:	38 85       	ldd	r19, Y+8	; 0x08
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	31 05       	cpc	r19, r1
 15c:	2c f4       	brge	.+10     	; 0x168 <DIO_u8SetPinDir+0x5c>
 15e:	8f 81       	ldd	r24, Y+7	; 0x07
 160:	98 85       	ldd	r25, Y+8	; 0x08
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_u8SetPinDir+0x74>
 166:	d8 c0       	rjmp	.+432    	; 0x318 <DIO_u8SetPinDir+0x20c>
 168:	2f 81       	ldd	r18, Y+7	; 0x07
 16a:	38 85       	ldd	r19, Y+8	; 0x08
 16c:	22 30       	cpi	r18, 0x02	; 2
 16e:	31 05       	cpc	r19, r1
 170:	89 f1       	breq	.+98     	; 0x1d4 <DIO_u8SetPinDir+0xc8>
 172:	8f 81       	ldd	r24, Y+7	; 0x07
 174:	98 85       	ldd	r25, Y+8	; 0x08
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	91 05       	cpc	r25, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <DIO_u8SetPinDir+0x72>
 17c:	40 c0       	rjmp	.+128    	; 0x1fe <DIO_u8SetPinDir+0xf2>
 17e:	cc c0       	rjmp	.+408    	; 0x318 <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
 180:	aa e3       	ldi	r26, 0x3A	; 58
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	ea e3       	ldi	r30, 0x3A	; 58
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	48 2f       	mov	r20, r24
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_u8SetPinDir+0x92>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_u8SetPinDir+0x8e>
 1a2:	80 95       	com	r24
 1a4:	84 23       	and	r24, r20
 1a6:	8c 93       	st	X, r24
 1a8:	b7 c0       	rjmp	.+366    	; 0x318 <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
 1aa:	a7 e3       	ldi	r26, 0x37	; 55
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e7 e3       	ldi	r30, 0x37	; 55
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_u8SetPinDir+0xbc>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_u8SetPinDir+0xb8>
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	a2 c0       	rjmp	.+324    	; 0x318 <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
 1d4:	a4 e3       	ldi	r26, 0x34	; 52
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e4 e3       	ldi	r30, 0x34	; 52
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinDir+0xe6>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinDir+0xe2>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	8d c0       	rjmp	.+282    	; 0x318 <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
 1fe:	a1 e3       	ldi	r26, 0x31	; 49
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e1 e3       	ldi	r30, 0x31	; 49
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8SetPinDir+0x110>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_u8SetPinDir+0x10c>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
 226:	78 c0       	rjmp	.+240    	; 0x318 <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
 228:	8c 81       	ldd	r24, Y+4	; 0x04
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	09 f0       	breq	.+2      	; 0x230 <DIO_u8SetPinDir+0x124>
 22e:	6f c0       	rjmp	.+222    	; 0x30e <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	3e 83       	std	Y+6, r19	; 0x06
 238:	2d 83       	std	Y+5, r18	; 0x05
 23a:	8d 81       	ldd	r24, Y+5	; 0x05
 23c:	9e 81       	ldd	r25, Y+6	; 0x06
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	91 05       	cpc	r25, r1
 242:	49 f1       	breq	.+82     	; 0x296 <DIO_u8SetPinDir+0x18a>
 244:	2d 81       	ldd	r18, Y+5	; 0x05
 246:	3e 81       	ldd	r19, Y+6	; 0x06
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	31 05       	cpc	r19, r1
 24c:	2c f4       	brge	.+10     	; 0x258 <DIO_u8SetPinDir+0x14c>
 24e:	8d 81       	ldd	r24, Y+5	; 0x05
 250:	9e 81       	ldd	r25, Y+6	; 0x06
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	61 f0       	breq	.+24     	; 0x26e <DIO_u8SetPinDir+0x162>
 256:	60 c0       	rjmp	.+192    	; 0x318 <DIO_u8SetPinDir+0x20c>
 258:	2d 81       	ldd	r18, Y+5	; 0x05
 25a:	3e 81       	ldd	r19, Y+6	; 0x06
 25c:	22 30       	cpi	r18, 0x02	; 2
 25e:	31 05       	cpc	r19, r1
 260:	71 f1       	breq	.+92     	; 0x2be <DIO_u8SetPinDir+0x1b2>
 262:	8d 81       	ldd	r24, Y+5	; 0x05
 264:	9e 81       	ldd	r25, Y+6	; 0x06
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	91 05       	cpc	r25, r1
 26a:	e9 f1       	breq	.+122    	; 0x2e6 <DIO_u8SetPinDir+0x1da>
 26c:	55 c0       	rjmp	.+170    	; 0x318 <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
 26e:	aa e3       	ldi	r26, 0x3A	; 58
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	ea e3       	ldi	r30, 0x3A	; 58
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinDir+0x180>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8SetPinDir+0x17c>
 290:	84 2b       	or	r24, r20
 292:	8c 93       	st	X, r24
 294:	41 c0       	rjmp	.+130    	; 0x318 <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
 296:	a7 e3       	ldi	r26, 0x37	; 55
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e7 e3       	ldi	r30, 0x37	; 55
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_u8SetPinDir+0x1a8>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_u8SetPinDir+0x1a4>
 2b8:	84 2b       	or	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	2d c0       	rjmp	.+90     	; 0x318 <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
 2be:	a4 e3       	ldi	r26, 0x34	; 52
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e4 e3       	ldi	r30, 0x34	; 52
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_u8SetPinDir+0x1d0>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_u8SetPinDir+0x1cc>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	19 c0       	rjmp	.+50     	; 0x318 <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
 2e6:	a1 e3       	ldi	r26, 0x31	; 49
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e1 e3       	ldi	r30, 0x31	; 49
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_u8SetPinDir+0x1f8>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_u8SetPinDir+0x1f4>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	05 c0       	rjmp	.+10     	; 0x318 <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
 318:	89 81       	ldd	r24, Y+1	; 0x01
}
 31a:	28 96       	adiw	r28, 0x08	; 8
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	cf 91       	pop	r28
 328:	df 91       	pop	r29
 32a:	08 95       	ret

0000032c <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	00 d0       	rcall	.+0      	; 0x332 <DIO_u8SetPortVal+0x6>
 332:	00 d0       	rcall	.+0      	; 0x334 <DIO_u8SetPortVal+0x8>
 334:	0f 92       	push	r0
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	8a 83       	std	Y+2, r24	; 0x02
 33c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
 33e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Val == LOW || Copy_u8Val == HIGH_PORT)
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	88 23       	and	r24, r24
 344:	19 f0       	breq	.+6      	; 0x34c <DIO_u8SetPortVal+0x20>
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	8f 3f       	cpi	r24, 0xFF	; 255
 34a:	b1 f5       	brne	.+108    	; 0x3b8 <DIO_u8SetPortVal+0x8c>
	{
		switch( Copy_u8PortNo )
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	3d 83       	std	Y+5, r19	; 0x05
 354:	2c 83       	std	Y+4, r18	; 0x04
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	9d 81       	ldd	r25, Y+5	; 0x05
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 05       	cpc	r25, r1
 35e:	d1 f0       	breq	.+52     	; 0x394 <DIO_u8SetPortVal+0x68>
 360:	2c 81       	ldd	r18, Y+4	; 0x04
 362:	3d 81       	ldd	r19, Y+5	; 0x05
 364:	22 30       	cpi	r18, 0x02	; 2
 366:	31 05       	cpc	r19, r1
 368:	2c f4       	brge	.+10     	; 0x374 <DIO_u8SetPortVal+0x48>
 36a:	8c 81       	ldd	r24, Y+4	; 0x04
 36c:	9d 81       	ldd	r25, Y+5	; 0x05
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	61 f0       	breq	.+24     	; 0x38a <DIO_u8SetPortVal+0x5e>
 372:	1f c0       	rjmp	.+62     	; 0x3b2 <DIO_u8SetPortVal+0x86>
 374:	2c 81       	ldd	r18, Y+4	; 0x04
 376:	3d 81       	ldd	r19, Y+5	; 0x05
 378:	22 30       	cpi	r18, 0x02	; 2
 37a:	31 05       	cpc	r19, r1
 37c:	81 f0       	breq	.+32     	; 0x39e <DIO_u8SetPortVal+0x72>
 37e:	8c 81       	ldd	r24, Y+4	; 0x04
 380:	9d 81       	ldd	r25, Y+5	; 0x05
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	91 05       	cpc	r25, r1
 386:	81 f0       	breq	.+32     	; 0x3a8 <DIO_u8SetPortVal+0x7c>
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <DIO_u8SetPortVal+0x86>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
 38a:	eb e3       	ldi	r30, 0x3B	; 59
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	8b 81       	ldd	r24, Y+3	; 0x03
 390:	80 83       	st	Z, r24
 392:	14 c0       	rjmp	.+40     	; 0x3bc <DIO_u8SetPortVal+0x90>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
 394:	e8 e3       	ldi	r30, 0x38	; 56
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	80 83       	st	Z, r24
 39c:	0f c0       	rjmp	.+30     	; 0x3bc <DIO_u8SetPortVal+0x90>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
 39e:	e5 e3       	ldi	r30, 0x35	; 53
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	80 83       	st	Z, r24
 3a6:	0a c0       	rjmp	.+20     	; 0x3bc <DIO_u8SetPortVal+0x90>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
 3a8:	e2 e3       	ldi	r30, 0x32	; 50
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	80 83       	st	Z, r24
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <DIO_u8SetPortVal+0x90>
		    default: Local_u8ErrStatus = RT_NOK;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_u8SetPortVal+0x90>
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	89 83       	std	Y+1, r24	; 0x01

	return (Local_u8ErrStatus);
 3bc:	89 81       	ldd	r24, Y+1	; 0x01

}
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	08 95       	ret

000003ce <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
 3ce:	df 93       	push	r29
 3d0:	cf 93       	push	r28
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	28 97       	sbiw	r28, 0x08	; 8
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	8a 83       	std	Y+2, r24	; 0x02
 3e4:	6b 83       	std	Y+3, r22	; 0x03
 3e6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 3e8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	84 30       	cpi	r24, 0x04	; 4
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <DIO_u8SetPinVal+0x24>
 3f0:	f2 c0       	rjmp	.+484    	; 0x5d6 <DIO_u8SetPinVal+0x208>
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	88 30       	cpi	r24, 0x08	; 8
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <DIO_u8SetPinVal+0x2c>
 3f8:	ee c0       	rjmp	.+476    	; 0x5d6 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
 3fa:	8c 81       	ldd	r24, Y+4	; 0x04
 3fc:	88 23       	and	r24, r24
 3fe:	09 f0       	breq	.+2      	; 0x402 <DIO_u8SetPinVal+0x34>
 400:	74 c0       	rjmp	.+232    	; 0x4ea <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	38 87       	std	Y+8, r19	; 0x08
 40a:	2f 83       	std	Y+7, r18	; 0x07
 40c:	8f 81       	ldd	r24, Y+7	; 0x07
 40e:	98 85       	ldd	r25, Y+8	; 0x08
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	91 05       	cpc	r25, r1
 414:	59 f1       	breq	.+86     	; 0x46c <DIO_u8SetPinVal+0x9e>
 416:	2f 81       	ldd	r18, Y+7	; 0x07
 418:	38 85       	ldd	r19, Y+8	; 0x08
 41a:	22 30       	cpi	r18, 0x02	; 2
 41c:	31 05       	cpc	r19, r1
 41e:	2c f4       	brge	.+10     	; 0x42a <DIO_u8SetPinVal+0x5c>
 420:	8f 81       	ldd	r24, Y+7	; 0x07
 422:	98 85       	ldd	r25, Y+8	; 0x08
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	69 f0       	breq	.+26     	; 0x442 <DIO_u8SetPinVal+0x74>
 428:	d8 c0       	rjmp	.+432    	; 0x5da <DIO_u8SetPinVal+0x20c>
 42a:	2f 81       	ldd	r18, Y+7	; 0x07
 42c:	38 85       	ldd	r19, Y+8	; 0x08
 42e:	22 30       	cpi	r18, 0x02	; 2
 430:	31 05       	cpc	r19, r1
 432:	89 f1       	breq	.+98     	; 0x496 <DIO_u8SetPinVal+0xc8>
 434:	8f 81       	ldd	r24, Y+7	; 0x07
 436:	98 85       	ldd	r25, Y+8	; 0x08
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	91 05       	cpc	r25, r1
 43c:	09 f4       	brne	.+2      	; 0x440 <DIO_u8SetPinVal+0x72>
 43e:	40 c0       	rjmp	.+128    	; 0x4c0 <DIO_u8SetPinVal+0xf2>
 440:	cc c0       	rjmp	.+408    	; 0x5da <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
 442:	ab e3       	ldi	r26, 0x3B	; 59
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	eb e3       	ldi	r30, 0x3B	; 59
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8SetPinVal+0x92>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_u8SetPinVal+0x8e>
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8c 93       	st	X, r24
 46a:	b7 c0       	rjmp	.+366    	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
 46c:	a8 e3       	ldi	r26, 0x38	; 56
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	e8 e3       	ldi	r30, 0x38	; 56
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 2e       	mov	r0, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_u8SetPinVal+0xbc>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_u8SetPinVal+0xb8>
 48e:	80 95       	com	r24
 490:	84 23       	and	r24, r20
 492:	8c 93       	st	X, r24
 494:	a2 c0       	rjmp	.+324    	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
 496:	a5 e3       	ldi	r26, 0x35	; 53
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e5 e3       	ldi	r30, 0x35	; 53
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_u8SetPinVal+0xe6>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_u8SetPinVal+0xe2>
 4b8:	80 95       	com	r24
 4ba:	84 23       	and	r24, r20
 4bc:	8c 93       	st	X, r24
 4be:	8d c0       	rjmp	.+282    	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
 4c0:	a2 e3       	ldi	r26, 0x32	; 50
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	e2 e3       	ldi	r30, 0x32	; 50
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	48 2f       	mov	r20, r24
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	28 2f       	mov	r18, r24
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 2e       	mov	r0, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8SetPinVal+0x110>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8SetPinVal+0x10c>
 4e2:	80 95       	com	r24
 4e4:	84 23       	and	r24, r20
 4e6:	8c 93       	st	X, r24
 4e8:	78 c0       	rjmp	.+240    	; 0x5da <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
 4ea:	8c 81       	ldd	r24, Y+4	; 0x04
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <DIO_u8SetPinVal+0x124>
 4f0:	6f c0       	rjmp	.+222    	; 0x5d0 <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	3e 83       	std	Y+6, r19	; 0x06
 4fa:	2d 83       	std	Y+5, r18	; 0x05
 4fc:	8d 81       	ldd	r24, Y+5	; 0x05
 4fe:	9e 81       	ldd	r25, Y+6	; 0x06
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	91 05       	cpc	r25, r1
 504:	49 f1       	breq	.+82     	; 0x558 <DIO_u8SetPinVal+0x18a>
 506:	2d 81       	ldd	r18, Y+5	; 0x05
 508:	3e 81       	ldd	r19, Y+6	; 0x06
 50a:	22 30       	cpi	r18, 0x02	; 2
 50c:	31 05       	cpc	r19, r1
 50e:	2c f4       	brge	.+10     	; 0x51a <DIO_u8SetPinVal+0x14c>
 510:	8d 81       	ldd	r24, Y+5	; 0x05
 512:	9e 81       	ldd	r25, Y+6	; 0x06
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	61 f0       	breq	.+24     	; 0x530 <DIO_u8SetPinVal+0x162>
 518:	60 c0       	rjmp	.+192    	; 0x5da <DIO_u8SetPinVal+0x20c>
 51a:	2d 81       	ldd	r18, Y+5	; 0x05
 51c:	3e 81       	ldd	r19, Y+6	; 0x06
 51e:	22 30       	cpi	r18, 0x02	; 2
 520:	31 05       	cpc	r19, r1
 522:	71 f1       	breq	.+92     	; 0x580 <DIO_u8SetPinVal+0x1b2>
 524:	8d 81       	ldd	r24, Y+5	; 0x05
 526:	9e 81       	ldd	r25, Y+6	; 0x06
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	91 05       	cpc	r25, r1
 52c:	e9 f1       	breq	.+122    	; 0x5a8 <DIO_u8SetPinVal+0x1da>
 52e:	55 c0       	rjmp	.+170    	; 0x5da <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
 530:	ab e3       	ldi	r26, 0x3B	; 59
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	eb e3       	ldi	r30, 0x3B	; 59
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_u8SetPinVal+0x180>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_u8SetPinVal+0x17c>
 552:	84 2b       	or	r24, r20
 554:	8c 93       	st	X, r24
 556:	41 c0       	rjmp	.+130    	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
 558:	a8 e3       	ldi	r26, 0x38	; 56
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e8 e3       	ldi	r30, 0x38	; 56
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	48 2f       	mov	r20, r24
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 2e       	mov	r0, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_u8SetPinVal+0x1a8>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_u8SetPinVal+0x1a4>
 57a:	84 2b       	or	r24, r20
 57c:	8c 93       	st	X, r24
 57e:	2d c0       	rjmp	.+90     	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
 580:	a5 e3       	ldi	r26, 0x35	; 53
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	e5 e3       	ldi	r30, 0x35	; 53
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	48 2f       	mov	r20, r24
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 2e       	mov	r0, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_u8SetPinVal+0x1d0>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	0a 94       	dec	r0
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_u8SetPinVal+0x1cc>
 5a2:	84 2b       	or	r24, r20
 5a4:	8c 93       	st	X, r24
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
 5a8:	a2 e3       	ldi	r26, 0x32	; 50
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e2 e3       	ldi	r30, 0x32	; 50
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	48 2f       	mov	r20, r24
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	28 2f       	mov	r18, r24
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 2e       	mov	r0, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_u8SetPinVal+0x1f8>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_u8SetPinVal+0x1f4>
 5ca:	84 2b       	or	r24, r20
 5cc:	8c 93       	st	X, r24
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
 5da:	89 81       	ldd	r24, Y+1	; 0x01
}
 5dc:	28 96       	adiw	r28, 0x08	; 8
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	cf 91       	pop	r28
 5ea:	df 91       	pop	r29
 5ec:	08 95       	ret

000005ee <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
 5ee:	df 93       	push	r29
 5f0:	cf 93       	push	r28
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DIO_u8GetPortVal+0x6>
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <DIO_u8GetPortVal+0x8>
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <DIO_u8GetPortVal+0xa>
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	8a 83       	std	Y+2, r24	; 0x02
 5fe:	7c 83       	std	Y+4, r23	; 0x04
 600:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
 602:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	9c 81       	ldd	r25, Y+4	; 0x04
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	19 f4       	brne	.+6      	; 0x612 <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	89 83       	std	Y+1, r24	; 0x01
 610:	34 c0       	rjmp	.+104    	; 0x67a <DIO_u8GetPortVal+0x8c>
	else
	{
		switch( Copy_u8PortNo )
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	3e 83       	std	Y+6, r19	; 0x06
 61a:	2d 83       	std	Y+5, r18	; 0x05
 61c:	8d 81       	ldd	r24, Y+5	; 0x05
 61e:	9e 81       	ldd	r25, Y+6	; 0x06
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	91 05       	cpc	r25, r1
 624:	c9 f0       	breq	.+50     	; 0x658 <DIO_u8GetPortVal+0x6a>
 626:	2d 81       	ldd	r18, Y+5	; 0x05
 628:	3e 81       	ldd	r19, Y+6	; 0x06
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	2c f4       	brge	.+10     	; 0x63a <DIO_u8GetPortVal+0x4c>
 630:	8d 81       	ldd	r24, Y+5	; 0x05
 632:	9e 81       	ldd	r25, Y+6	; 0x06
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	61 f0       	breq	.+24     	; 0x650 <DIO_u8GetPortVal+0x62>
 638:	1e c0       	rjmp	.+60     	; 0x676 <DIO_u8GetPortVal+0x88>
 63a:	2d 81       	ldd	r18, Y+5	; 0x05
 63c:	3e 81       	ldd	r19, Y+6	; 0x06
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	79 f0       	breq	.+30     	; 0x662 <DIO_u8GetPortVal+0x74>
 644:	8d 81       	ldd	r24, Y+5	; 0x05
 646:	9e 81       	ldd	r25, Y+6	; 0x06
 648:	83 30       	cpi	r24, 0x03	; 3
 64a:	91 05       	cpc	r25, r1
 64c:	79 f0       	breq	.+30     	; 0x66c <DIO_u8GetPortVal+0x7e>
 64e:	13 c0       	rjmp	.+38     	; 0x676 <DIO_u8GetPortVal+0x88>
			{
				case PORT_A: * Copy_u8pVal = PORT_A ; break;
 650:	eb 81       	ldd	r30, Y+3	; 0x03
 652:	fc 81       	ldd	r31, Y+4	; 0x04
 654:	10 82       	st	Z, r1
 656:	11 c0       	rjmp	.+34     	; 0x67a <DIO_u8GetPortVal+0x8c>
			    case PORT_B: * Copy_u8pVal = PORT_B; break;
 658:	eb 81       	ldd	r30, Y+3	; 0x03
 65a:	fc 81       	ldd	r31, Y+4	; 0x04
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 83       	st	Z, r24
 660:	0c c0       	rjmp	.+24     	; 0x67a <DIO_u8GetPortVal+0x8c>
			    case PORT_C: * Copy_u8pVal = PORT_C; break;
 662:	eb 81       	ldd	r30, Y+3	; 0x03
 664:	fc 81       	ldd	r31, Y+4	; 0x04
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	80 83       	st	Z, r24
 66a:	07 c0       	rjmp	.+14     	; 0x67a <DIO_u8GetPortVal+0x8c>
			    case PORT_D: * Copy_u8pVal = PORT_D; break;
 66c:	eb 81       	ldd	r30, Y+3	; 0x03
 66e:	fc 81       	ldd	r31, Y+4	; 0x04
 670:	83 e0       	ldi	r24, 0x03	; 3
 672:	80 83       	st	Z, r24
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_u8GetPortVal+0x8c>
			    default: Local_u8ErrStatus = RT_NOK; break;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
 67a:	89 81       	ldd	r24, Y+1	; 0x01
}
 67c:	26 96       	adiw	r28, 0x06	; 6
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	08 95       	ret

0000068e <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
 68e:	df 93       	push	r29
 690:	cf 93       	push	r28
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	27 97       	sbiw	r28, 0x07	; 7
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	6b 83       	std	Y+3, r22	; 0x03
 6a6:	5d 83       	std	Y+5, r21	; 0x05
 6a8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 6aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	9d 81       	ldd	r25, Y+5	; 0x05
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	19 f4       	brne	.+6      	; 0x6ba <DIO_u8GetPinVal+0x2c>
	{Local_u8ErrStatus = RT_NOK;}
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	5d c0       	rjmp	.+186    	; 0x774 <DIO_u8GetPinVal+0xe6>
	else
	{
		if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	84 30       	cpi	r24, 0x04	; 4
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <DIO_u8GetPinVal+0x34>
 6c0:	57 c0       	rjmp	.+174    	; 0x770 <DIO_u8GetPinVal+0xe2>
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <DIO_u8GetPinVal+0x3c>
 6c8:	53 c0       	rjmp	.+166    	; 0x770 <DIO_u8GetPinVal+0xe2>
		{
			switch(Copy_u8PortNo)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	3f 83       	std	Y+7, r19	; 0x07
 6d2:	2e 83       	std	Y+6, r18	; 0x06
 6d4:	8e 81       	ldd	r24, Y+6	; 0x06
 6d6:	9f 81       	ldd	r25, Y+7	; 0x07
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	91 05       	cpc	r25, r1
 6dc:	c9 f0       	breq	.+50     	; 0x710 <DIO_u8GetPinVal+0x82>
 6de:	2e 81       	ldd	r18, Y+6	; 0x06
 6e0:	3f 81       	ldd	r19, Y+7	; 0x07
 6e2:	22 30       	cpi	r18, 0x02	; 2
 6e4:	31 05       	cpc	r19, r1
 6e6:	2c f4       	brge	.+10     	; 0x6f2 <DIO_u8GetPinVal+0x64>
 6e8:	8e 81       	ldd	r24, Y+6	; 0x06
 6ea:	9f 81       	ldd	r25, Y+7	; 0x07
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	61 f0       	breq	.+24     	; 0x708 <DIO_u8GetPinVal+0x7a>
 6f0:	41 c0       	rjmp	.+130    	; 0x774 <DIO_u8GetPinVal+0xe6>
 6f2:	2e 81       	ldd	r18, Y+6	; 0x06
 6f4:	3f 81       	ldd	r19, Y+7	; 0x07
 6f6:	22 30       	cpi	r18, 0x02	; 2
 6f8:	31 05       	cpc	r19, r1
 6fa:	d1 f0       	breq	.+52     	; 0x730 <DIO_u8GetPinVal+0xa2>
 6fc:	8e 81       	ldd	r24, Y+6	; 0x06
 6fe:	9f 81       	ldd	r25, Y+7	; 0x07
 700:	83 30       	cpi	r24, 0x03	; 3
 702:	91 05       	cpc	r25, r1
 704:	29 f1       	breq	.+74     	; 0x750 <DIO_u8GetPinVal+0xc2>
 706:	36 c0       	rjmp	.+108    	; 0x774 <DIO_u8GetPinVal+0xe6>
			{
				case PORT_A: * Copy_u8pVal = GET_BIT(PORT_A , Copy_u8PinNo ); break;
 708:	ec 81       	ldd	r30, Y+4	; 0x04
 70a:	fd 81       	ldd	r31, Y+5	; 0x05
 70c:	10 82       	st	Z, r1
 70e:	32 c0       	rjmp	.+100    	; 0x774 <DIO_u8GetPinVal+0xe6>
				case PORT_B: * Copy_u8pVal = GET_BIT(PORT_B , Copy_u8PinNo ); break;
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 2e       	mov	r0, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_u8GetPinVal+0x94>
 71e:	95 95       	asr	r25
 720:	87 95       	ror	r24
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_u8GetPinVal+0x90>
 726:	81 70       	andi	r24, 0x01	; 1
 728:	ec 81       	ldd	r30, Y+4	; 0x04
 72a:	fd 81       	ldd	r31, Y+5	; 0x05
 72c:	80 83       	st	Z, r24
 72e:	22 c0       	rjmp	.+68     	; 0x774 <DIO_u8GetPinVal+0xe6>
				case PORT_C: * Copy_u8pVal = GET_BIT(PORT_C , Copy_u8PinNo ); break;
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	28 2f       	mov	r18, r24
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 2e       	mov	r0, r18
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_u8GetPinVal+0xb4>
 73e:	95 95       	asr	r25
 740:	87 95       	ror	r24
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_u8GetPinVal+0xb0>
 746:	81 70       	andi	r24, 0x01	; 1
 748:	ec 81       	ldd	r30, Y+4	; 0x04
 74a:	fd 81       	ldd	r31, Y+5	; 0x05
 74c:	80 83       	st	Z, r24
 74e:	12 c0       	rjmp	.+36     	; 0x774 <DIO_u8GetPinVal+0xe6>
				case PORT_D: * Copy_u8pVal = GET_BIT(PORT_D , Copy_u8PinNo ); break;
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	83 e0       	ldi	r24, 0x03	; 3
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 2e       	mov	r0, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_u8GetPinVal+0xd4>
 75e:	95 95       	asr	r25
 760:	87 95       	ror	r24
 762:	0a 94       	dec	r0
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_u8GetPinVal+0xd0>
 766:	81 70       	andi	r24, 0x01	; 1
 768:	ec 81       	ldd	r30, Y+4	; 0x04
 76a:	fd 81       	ldd	r31, Y+5	; 0x05
 76c:	80 83       	st	Z, r24
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_u8GetPinVal+0xe6>
			}
		}
		else{Local_u8ErrStatus = RT_NOK;}
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Local_u8ErrStatus);
 774:	89 81       	ldd	r24, Y+1	; 0x01
}
 776:	27 96       	adiw	r28, 0x07	; 7
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <main>:

void main(void)
{;}
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <_exit>:
 796:	f8 94       	cli

00000798 <__stop_program>:
 798:	ff cf       	rjmp	.-2      	; 0x798 <__stop_program>
