
HELLO_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  000030e2  00003156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023e8  00000000  00000000  00003268  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f19  00000000  00000000  00005650  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006569  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006709  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000068fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <main>
      7a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e6       	ldi	r22, 0x68	; 104
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e0 59       	subi	r30, 0x90	; 144
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <INTERRUPT_u8GlobalInterruptControl>:
#include "INTERRUPT_int.h"
#include "../../LIB/bitmath.h"
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
u8 INTERRUPT_u8GlobalInterruptControl(u8 Copy_u8Status)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <INTERRUPT_u8GlobalInterruptControl+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <INTERRUPT_u8GlobalInterruptControl+0x8>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     e2c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Status)
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3c 83       	std	Y+4, r19	; 0x04
     e36:	2b 83       	std	Y+3, r18	; 0x03
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	69 f0       	breq	.+26     	; 0xe5a <INTERRUPT_u8GlobalInterruptControl+0x3c>
     e40:	2b 81       	ldd	r18, Y+3	; 0x03
     e42:	3c 81       	ldd	r19, Y+4	; 0x04
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	81 f4       	brne	.+32     	; 0xe6a <INTERRUPT_u8GlobalInterruptControl+0x4c>
	{
	case ENABLE: SREG_reg |=(1<<7);break;
     e4a:	af e5       	ldi	r26, 0x5F	; 95
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ef e5       	ldi	r30, 0x5F	; 95
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	8c 93       	st	X, r24
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <INTERRUPT_u8GlobalInterruptControl+0x50>
	case DISABLE: SREG_reg &= ~(1<<7);break;
     e5a:	af e5       	ldi	r26, 0x5F	; 95
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ef e5       	ldi	r30, 0x5F	; 95
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 77       	andi	r24, 0x7F	; 127
     e66:	8c 93       	st	X, r24
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <INTERRUPT_u8GlobalInterruptControl+0x50>
	default:Local_u8ErrStatus = RT_NOK;break;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01

}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <INTERRUPT_u8Enable>:
u8 INTERRUPT_u8Enable(u8 Copy_u8IntNo)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <INTERRUPT_u8Enable+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <INTERRUPT_u8Enable+0x8>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     e8c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3c 83       	std	Y+4, r19	; 0x04
     e96:	2b 83       	std	Y+3, r18	; 0x03
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	91 05       	cpc	r25, r1
     ea0:	c1 f0       	breq	.+48     	; 0xed2 <INTERRUPT_u8Enable+0x54>
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	11 f1       	breq	.+68     	; 0xef0 <INTERRUPT_u8Enable+0x72>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f5       	brne	.+90     	; 0xf0e <INTERRUPT_u8Enable+0x90>
	{
	case INT_0:SREG_reg |=(1<<7);GICR_reg |=(1<<6) ; break;
     eb4:	af e5       	ldi	r26, 0x5F	; 95
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ef e5       	ldi	r30, 0x5F	; 95
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 68       	ori	r24, 0x80	; 128
     ec0:	8c 93       	st	X, r24
     ec2:	ab e5       	ldi	r26, 0x5B	; 91
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e5       	ldi	r30, 0x5B	; 91
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 64       	ori	r24, 0x40	; 64
     ece:	8c 93       	st	X, r24
     ed0:	20 c0       	rjmp	.+64     	; 0xf12 <INTERRUPT_u8Enable+0x94>
	case INT_1:SREG_reg |=(1<<7);GICR_reg |=(1<<7) ; break;
     ed2:	af e5       	ldi	r26, 0x5F	; 95
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e5       	ldi	r30, 0x5F	; 95
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	8c 93       	st	X, r24
     ee0:	ab e5       	ldi	r26, 0x5B	; 91
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e5       	ldi	r30, 0x5B	; 91
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	8c 93       	st	X, r24
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <INTERRUPT_u8Enable+0x94>
	case INT_2:SREG_reg |=(1<<7);GICR_reg |=(1<<5) ; break;
     ef0:	af e5       	ldi	r26, 0x5F	; 95
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ef e5       	ldi	r30, 0x5F	; 95
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	8c 93       	st	X, r24
     efe:	ab e5       	ldi	r26, 0x5B	; 91
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	eb e5       	ldi	r30, 0x5B	; 91
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8c 93       	st	X, r24
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <INTERRUPT_u8Enable+0x94>
	default:Local_u8ErrStatus = RT_NOK;break;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <INTERRUPT_u8Disable>:
u8 INTERRUPT_u8Disable(u8 Copy_u8IntNo)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <INTERRUPT_u8Disable+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <INTERRUPT_u8Disable+0x8>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus = RT_OK;
     f30:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3c 83       	std	Y+4, r19	; 0x04
     f3a:	2b 83       	std	Y+3, r18	; 0x03
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	89 f0       	breq	.+34     	; 0xf68 <INTERRUPT_u8Disable+0x46>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <INTERRUPT_u8Disable+0x56>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	c1 f4       	brne	.+48     	; 0xf88 <INTERRUPT_u8Disable+0x66>
	{
	case INT_0: GICR_reg &= ~(1<<6) ; break;
     f58:	ab e5       	ldi	r26, 0x5B	; 91
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	eb e5       	ldi	r30, 0x5B	; 91
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 7b       	andi	r24, 0xBF	; 191
     f64:	8c 93       	st	X, r24
     f66:	12 c0       	rjmp	.+36     	; 0xf8c <INTERRUPT_u8Disable+0x6a>
	case INT_1: GICR_reg &= ~(1<<7) ; break;
     f68:	ab e5       	ldi	r26, 0x5B	; 91
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e5       	ldi	r30, 0x5B	; 91
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 77       	andi	r24, 0x7F	; 127
     f74:	8c 93       	st	X, r24
     f76:	0a c0       	rjmp	.+20     	; 0xf8c <INTERRUPT_u8Disable+0x6a>
	case INT_2: GICR_reg &= ~(1<<5) ; break;
     f78:	ab e5       	ldi	r26, 0x5B	; 91
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e5       	ldi	r30, 0x5B	; 91
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7d       	andi	r24, 0xDF	; 223
     f84:	8c 93       	st	X, r24
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <INTERRUPT_u8Disable+0x6a>
	default:Local_u8ErrStatus = RT_NOK;break;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <INTERRUPT_u8SenseControl>:
u8 INTERRUPT_u8SenseControl(u8 Copy_u8IntNo ,u8 Copy_u8Trigger)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	2b 97       	sbiw	r28, 0x0b	; 11
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
     fb4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3b 87       	std	Y+11, r19	; 0x0b
     fbe:	2a 87       	std	Y+10, r18	; 0x0a
     fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <INTERRUPT_u8SenseControl+0x30>
     fca:	69 c0       	rjmp	.+210    	; 0x109e <INTERRUPT_u8SenseControl+0x102>
     fcc:	2a 85       	ldd	r18, Y+10	; 0x0a
     fce:	3b 85       	ldd	r19, Y+11	; 0x0b
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <INTERRUPT_u8SenseControl+0x3c>
     fd6:	c1 c0       	rjmp	.+386    	; 0x115a <INTERRUPT_u8SenseControl+0x1be>
     fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fda:	9b 85       	ldd	r25, Y+11	; 0x0b
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	09 f0       	breq	.+2      	; 0xfe2 <INTERRUPT_u8SenseControl+0x46>
     fe0:	df c0       	rjmp	.+446    	; 0x11a0 <INTERRUPT_u8SenseControl+0x204>
	{
	case INT_0:
		switch(Copy_u8Trigger)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	39 87       	std	Y+9, r19	; 0x09
     fea:	28 87       	std	Y+8, r18	; 0x08
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	99 85       	ldd	r25, Y+9	; 0x09
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	21 f1       	breq	.+72     	; 0x103e <INTERRUPT_u8SenseControl+0xa2>
     ff6:	28 85       	ldd	r18, Y+8	; 0x08
     ff8:	39 85       	ldd	r19, Y+9	; 0x09
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <INTERRUPT_u8SenseControl+0x6e>
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	99 85       	ldd	r25, Y+9	; 0x09
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	61 f0       	breq	.+24     	; 0x1020 <INTERRUPT_u8SenseControl+0x84>
    1008:	47 c0       	rjmp	.+142    	; 0x1098 <INTERRUPT_u8SenseControl+0xfc>
    100a:	28 85       	ldd	r18, Y+8	; 0x08
    100c:	39 85       	ldd	r19, Y+9	; 0x09
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	21 f1       	breq	.+72     	; 0x105c <INTERRUPT_u8SenseControl+0xc0>
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	99 85       	ldd	r25, Y+9	; 0x09
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	71 f1       	breq	.+92     	; 0x107a <INTERRUPT_u8SenseControl+0xde>
    101e:	3c c0       	rjmp	.+120    	; 0x1098 <INTERRUPT_u8SenseControl+0xfc>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<0) ; MCUCR_reg &= ~(1<<1)  ; break;
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8d 7f       	andi	r24, 0xFD	; 253
    103a:	8c 93       	st	X, r24
    103c:	b3 c0       	rjmp	.+358    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<0)   ; MCUCR_reg &= ~(1<<1) ; break;
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	8c 93       	st	X, r24
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8d 7f       	andi	r24, 0xFD	; 253
    1058:	8c 93       	st	X, r24
    105a:	a4 c0       	rjmp	.+328    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<0) ;  MCUCR_reg |=(1<<1)    ; break;
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	8c 93       	st	X, r24
    106a:	a5 e5       	ldi	r26, 0x55	; 85
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e5       	ldi	r30, 0x55	; 85
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	8c 93       	st	X, r24
    1078:	95 c0       	rjmp	.+298    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<0) ; MCUCR_reg |=(1<<1)  ; break;
    107a:	a5 e5       	ldi	r26, 0x55	; 85
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e5       	ldi	r30, 0x55	; 85
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	8c 93       	st	X, r24
    1088:	a5 e5       	ldi	r26, 0x55	; 85
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e5       	ldi	r30, 0x55	; 85
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	82 60       	ori	r24, 0x02	; 2
    1094:	8c 93       	st	X, r24
    1096:	86 c0       	rjmp	.+268    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	83 c0       	rjmp	.+262    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		};break;
	case INT_1:
		switch(Copy_u8Trigger)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3f 83       	std	Y+7, r19	; 0x07
    10a6:	2e 83       	std	Y+6, r18	; 0x06
    10a8:	8e 81       	ldd	r24, Y+6	; 0x06
    10aa:	9f 81       	ldd	r25, Y+7	; 0x07
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	21 f1       	breq	.+72     	; 0x10fa <INTERRUPT_u8SenseControl+0x15e>
    10b2:	2e 81       	ldd	r18, Y+6	; 0x06
    10b4:	3f 81       	ldd	r19, Y+7	; 0x07
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <INTERRUPT_u8SenseControl+0x12a>
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	61 f0       	breq	.+24     	; 0x10dc <INTERRUPT_u8SenseControl+0x140>
    10c4:	47 c0       	rjmp	.+142    	; 0x1154 <INTERRUPT_u8SenseControl+0x1b8>
    10c6:	2e 81       	ldd	r18, Y+6	; 0x06
    10c8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	21 f1       	breq	.+72     	; 0x1118 <INTERRUPT_u8SenseControl+0x17c>
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	71 f1       	breq	.+92     	; 0x1136 <INTERRUPT_u8SenseControl+0x19a>
    10da:	3c c0       	rjmp	.+120    	; 0x1154 <INTERRUPT_u8SenseControl+0x1b8>
		{
		case LOW_LEVEL :  MCUCR_reg &= ~(1<<2) ; MCUCR_reg &= ~(1<<3)  ; break;
    10dc:	a5 e5       	ldi	r26, 0x55	; 85
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e5       	ldi	r30, 0x55	; 85
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8b 7f       	andi	r24, 0xFB	; 251
    10e8:	8c 93       	st	X, r24
    10ea:	a5 e5       	ldi	r26, 0x55	; 85
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e5       	ldi	r30, 0x55	; 85
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	87 7f       	andi	r24, 0xF7	; 247
    10f6:	8c 93       	st	X, r24
    10f8:	55 c0       	rjmp	.+170    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case ANY_CHANGE:  MCUCR_reg |=(1<<2)   ; MCUCR_reg &= ~(1<<3) ; break;
    10fa:	a5 e5       	ldi	r26, 0x55	; 85
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e5       	ldi	r30, 0x55	; 85
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	84 60       	ori	r24, 0x04	; 4
    1106:	8c 93       	st	X, r24
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	87 7f       	andi	r24, 0xF7	; 247
    1114:	8c 93       	st	X, r24
    1116:	46 c0       	rjmp	.+140    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case FALLING_EDGE :  MCUCR_reg &= ~(1<<2) ;  MCUCR_reg |=(1<<3)    ; break;
    1118:	a5 e5       	ldi	r26, 0x55	; 85
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e5       	ldi	r30, 0x55	; 85
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8b 7f       	andi	r24, 0xFB	; 251
    1124:	8c 93       	st	X, r24
    1126:	a5 e5       	ldi	r26, 0x55	; 85
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e5       	ldi	r30, 0x55	; 85
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 60       	ori	r24, 0x08	; 8
    1132:	8c 93       	st	X, r24
    1134:	37 c0       	rjmp	.+110    	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		case RISING_EDGE :  MCUCR_reg |=(1<<2) ; MCUCR_reg |=(1<<3)  ; break;
    1136:	a5 e5       	ldi	r26, 0x55	; 85
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e5       	ldi	r30, 0x55	; 85
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	84 60       	ori	r24, 0x04	; 4
    1142:	8c 93       	st	X, r24
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	8c 93       	st	X, r24
    1152:	28 c0       	rjmp	.+80     	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		default: Local_u8ErrStatus = RT_NOK;break;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	25 c0       	rjmp	.+74     	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
		};break;
    case INT_2:
    	switch(Copy_u8Trigger)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	91 05       	cpc	r25, r1
    116c:	31 f0       	breq	.+12     	; 0x117a <INTERRUPT_u8SenseControl+0x1de>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	23 30       	cpi	r18, 0x03	; 3
    1174:	31 05       	cpc	r19, r1
    1176:	49 f0       	breq	.+18     	; 0x118a <INTERRUPT_u8SenseControl+0x1ee>
    1178:	10 c0       	rjmp	.+32     	; 0x119a <INTERRUPT_u8SenseControl+0x1fe>
    	{
    	case FALLING_EDGE: MCUCSR_reg &= ~(1<<6); break;
    117a:	a4 e5       	ldi	r26, 0x54	; 84
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e4 e5       	ldi	r30, 0x54	; 84
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	8c 93       	st	X, r24
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
    	case RISING_EDGE : MCUCSR_reg |=(1<<6); break;
    118a:	a4 e5       	ldi	r26, 0x54	; 84
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e5       	ldi	r30, 0x54	; 84
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 64       	ori	r24, 0x40	; 64
    1196:	8c 93       	st	X, r24
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
    	default : Local_u8ErrStatus = RT_NOK;break;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <INTERRUPT_u8SenseControl+0x208>
    	};break;
    default:Local_u8ErrStatus = RT_NOK;break;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a6:	2b 96       	adiw	r28, 0x0b	; 11
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <INTERRUPT_u8GetInterruptFlag>:
u8 INTERRUPT_u8GetInterruptFlag(u8 Copy_u8IntNo ,u8 * Copy_u8pVal)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <INTERRUPT_u8GetInterruptFlag+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <INTERRUPT_u8GetInterruptFlag+0x8>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <INTERRUPT_u8GetInterruptFlag+0xa>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	8a 83       	std	Y+2, r24	; 0x02
    11c8:	7c 83       	std	Y+4, r23	; 0x04
    11ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    11cc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNo)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3e 83       	std	Y+6, r19	; 0x06
    11d6:	2d 83       	std	Y+5, r18	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	a9 f0       	breq	.+42     	; 0x120c <INTERRUPT_u8GetInterruptFlag+0x54>
    11e2:	2d 81       	ldd	r18, Y+5	; 0x05
    11e4:	3e 81       	ldd	r19, Y+6	; 0x06
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	d1 f0       	breq	.+52     	; 0x1220 <INTERRUPT_u8GetInterruptFlag+0x68>
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	09 f5       	brne	.+66     	; 0x1236 <INTERRUPT_u8GetInterruptFlag+0x7e>
	{
	case INT_0: * Copy_u8pVal = (((GIFR_reg) >> (6)) & 0x01) ; break;
    11f4:	ea e5       	ldi	r30, 0x5A	; 90
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	82 95       	swap	r24
    11fc:	86 95       	lsr	r24
    11fe:	86 95       	lsr	r24
    1200:	83 70       	andi	r24, 0x03	; 3
    1202:	81 70       	andi	r24, 0x01	; 1
    1204:	eb 81       	ldd	r30, Y+3	; 0x03
    1206:	fc 81       	ldd	r31, Y+4	; 0x04
    1208:	80 83       	st	Z, r24
    120a:	17 c0       	rjmp	.+46     	; 0x123a <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_1:* Copy_u8pVal = (((GIFR_reg) >> (7)) & 0x01) ; break;
    120c:	ea e5       	ldi	r30, 0x5A	; 90
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	88 1f       	adc	r24, r24
    1214:	88 27       	eor	r24, r24
    1216:	88 1f       	adc	r24, r24
    1218:	eb 81       	ldd	r30, Y+3	; 0x03
    121a:	fc 81       	ldd	r31, Y+4	; 0x04
    121c:	80 83       	st	Z, r24
    121e:	0d c0       	rjmp	.+26     	; 0x123a <INTERRUPT_u8GetInterruptFlag+0x82>
	case INT_2: * Copy_u8pVal = (((GIFR_reg) >> (5)) & 0x01); break;
    1220:	ea e5       	ldi	r30, 0x5A	; 90
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	82 95       	swap	r24
    1228:	86 95       	lsr	r24
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	eb 81       	ldd	r30, Y+3	; 0x03
    1230:	fc 81       	ldd	r31, Y+4	; 0x04
    1232:	80 83       	st	Z, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <INTERRUPT_u8GetInterruptFlag+0x82>
	default:Local_u8ErrStatus = RT_NOK;break;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
	}
	return (Local_u8ErrStatus);
    123a:	89 81       	ldd	r24, Y+1	; 0x01
}
    123c:	26 96       	adiw	r28, 0x06	; 6
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_u8SetPortDir+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <DIO_u8SetPortDir+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    1260:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Dir != INPUT && Copy_u8Dir != OUTPUT_PORT )
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 23       	and	r24, r24
    1266:	31 f0       	breq	.+12     	; 0x1274 <DIO_u8SetPortDir+0x26>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	19 f0       	breq	.+6      	; 0x1274 <DIO_u8SetPortDir+0x26>
	{
		Local_u8ErrStatus = RT_NOK;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	35 c0       	rjmp	.+106    	; 0x12de <DIO_u8SetPortDir+0x90>
	}
	else{
		switch( Copy_u8PortNo )
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3d 83       	std	Y+5, r19	; 0x05
    127c:	2c 83       	std	Y+4, r18	; 0x04
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	d1 f0       	breq	.+52     	; 0x12bc <DIO_u8SetPortDir+0x6e>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	2c f4       	brge	.+10     	; 0x129c <DIO_u8SetPortDir+0x4e>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	61 f0       	breq	.+24     	; 0x12b2 <DIO_u8SetPortDir+0x64>
    129a:	1f c0       	rjmp	.+62     	; 0x12da <DIO_u8SetPortDir+0x8c>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <DIO_u8SetPortDir+0x78>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <DIO_u8SetPortDir+0x82>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <DIO_u8SetPortDir+0x8c>
		{
			case PORT_A: DDRA_REG = Copy_u8Dir; break;
    12b2:	ea e3       	ldi	r30, 0x3A	; 58
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 83       	st	Z, r24
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <DIO_u8SetPortDir+0x90>
			case PORT_B: DDRB_REG = Copy_u8Dir; break;
    12bc:	e7 e3       	ldi	r30, 0x37	; 55
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	80 83       	st	Z, r24
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <DIO_u8SetPortDir+0x90>
			case PORT_C: DDRC_REG = Copy_u8Dir; break;
    12c6:	e4 e3       	ldi	r30, 0x34	; 52
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	80 83       	st	Z, r24
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <DIO_u8SetPortDir+0x90>
			case PORT_D: DDRD_REG = Copy_u8Dir; break;
    12d0:	e1 e3       	ldi	r30, 0x31	; 49
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	80 83       	st	Z, r24
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_u8SetPortDir+0x90>
			default: Local_u8ErrStatus = RT_NOK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
		}
		}
		return (Local_u8ErrStatus);
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	28 97       	sbiw	r28, 0x08	; 8
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
    1308:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    130a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	08 f0       	brcs	.+2      	; 0x1314 <DIO_u8SetPinDir+0x24>
    1312:	f2 c0       	rjmp	.+484    	; 0x14f8 <DIO_u8SetPinDir+0x208>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 30       	cpi	r24, 0x08	; 8
    1318:	08 f0       	brcs	.+2      	; 0x131c <DIO_u8SetPinDir+0x2c>
    131a:	ee c0       	rjmp	.+476    	; 0x14f8 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	88 23       	and	r24, r24
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_u8SetPinDir+0x34>
    1322:	74 c0       	rjmp	.+232    	; 0x140c <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	38 87       	std	Y+8, r19	; 0x08
    132c:	2f 83       	std	Y+7, r18	; 0x07
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	59 f1       	breq	.+86     	; 0x138e <DIO_u8SetPinDir+0x9e>
    1338:	2f 81       	ldd	r18, Y+7	; 0x07
    133a:	38 85       	ldd	r19, Y+8	; 0x08
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_u8SetPinDir+0x5c>
    1342:	8f 81       	ldd	r24, Y+7	; 0x07
    1344:	98 85       	ldd	r25, Y+8	; 0x08
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f0       	breq	.+26     	; 0x1364 <DIO_u8SetPinDir+0x74>
    134a:	d8 c0       	rjmp	.+432    	; 0x14fc <DIO_u8SetPinDir+0x20c>
    134c:	2f 81       	ldd	r18, Y+7	; 0x07
    134e:	38 85       	ldd	r19, Y+8	; 0x08
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	89 f1       	breq	.+98     	; 0x13b8 <DIO_u8SetPinDir+0xc8>
    1356:	8f 81       	ldd	r24, Y+7	; 0x07
    1358:	98 85       	ldd	r25, Y+8	; 0x08
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <DIO_u8SetPinDir+0x72>
    1360:	40 c0       	rjmp	.+128    	; 0x13e2 <DIO_u8SetPinDir+0xf2>
    1362:	cc c0       	rjmp	.+408    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
    1364:	aa e3       	ldi	r26, 0x3A	; 58
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ea e3       	ldi	r30, 0x3A	; 58
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_u8SetPinDir+0x92>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_u8SetPinDir+0x8e>
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	b7 c0       	rjmp	.+366    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
    138e:	a7 e3       	ldi	r26, 0x37	; 55
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e7 e3       	ldi	r30, 0x37	; 55
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8SetPinDir+0xbc>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8SetPinDir+0xb8>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	a2 c0       	rjmp	.+324    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
    13b8:	a4 e3       	ldi	r26, 0x34	; 52
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e4 e3       	ldi	r30, 0x34	; 52
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_u8SetPinDir+0xe6>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_u8SetPinDir+0xe2>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	8d c0       	rjmp	.+282    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
    13e2:	a1 e3       	ldi	r26, 0x31	; 49
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e1 e3       	ldi	r30, 0x31	; 49
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8SetPinDir+0x110>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_u8SetPinDir+0x10c>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	78 c0       	rjmp	.+240    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	09 f0       	breq	.+2      	; 0x1414 <DIO_u8SetPinDir+0x124>
    1412:	6f c0       	rjmp	.+222    	; 0x14f2 <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3e 83       	std	Y+6, r19	; 0x06
    141c:	2d 83       	std	Y+5, r18	; 0x05
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	49 f1       	breq	.+82     	; 0x147a <DIO_u8SetPinDir+0x18a>
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <DIO_u8SetPinDir+0x14c>
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <DIO_u8SetPinDir+0x162>
    143a:	60 c0       	rjmp	.+192    	; 0x14fc <DIO_u8SetPinDir+0x20c>
    143c:	2d 81       	ldd	r18, Y+5	; 0x05
    143e:	3e 81       	ldd	r19, Y+6	; 0x06
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	71 f1       	breq	.+92     	; 0x14a2 <DIO_u8SetPinDir+0x1b2>
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	e9 f1       	breq	.+122    	; 0x14ca <DIO_u8SetPinDir+0x1da>
    1450:	55 c0       	rjmp	.+170    	; 0x14fc <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
    1452:	aa e3       	ldi	r26, 0x3A	; 58
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ea e3       	ldi	r30, 0x3A	; 58
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_u8SetPinDir+0x180>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_u8SetPinDir+0x17c>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	41 c0       	rjmp	.+130    	; 0x14fc <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_u8SetPinDir+0x1a8>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_u8SetPinDir+0x1a4>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	2d c0       	rjmp	.+90     	; 0x14fc <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
    14a2:	a4 e3       	ldi	r26, 0x34	; 52
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e4 e3       	ldi	r30, 0x34	; 52
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_u8SetPinDir+0x1d0>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_u8SetPinDir+0x1cc>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	19 c0       	rjmp	.+50     	; 0x14fc <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
    14ca:	a1 e3       	ldi	r26, 0x31	; 49
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e1 e3       	ldi	r30, 0x31	; 49
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_u8SetPinDir+0x1f8>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_u8SetPinDir+0x1f4>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	28 96       	adiw	r28, 0x08	; 8
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_u8SetPortVal+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_u8SetPortVal+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    1522:	19 82       	std	Y+1, r1	; 0x01
	if(1)
	{
		switch( Copy_u8PortNo )
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	d1 f0       	breq	.+52     	; 0x156c <DIO_u8SetPortVal+0x5c>
    1538:	2c 81       	ldd	r18, Y+4	; 0x04
    153a:	3d 81       	ldd	r19, Y+5	; 0x05
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_u8SetPortVal+0x3c>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	61 f0       	breq	.+24     	; 0x1562 <DIO_u8SetPortVal+0x52>
    154a:	1f c0       	rjmp	.+62     	; 0x158a <DIO_u8SetPortVal+0x7a>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	81 f0       	breq	.+32     	; 0x1576 <DIO_u8SetPortVal+0x66>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	81 f0       	breq	.+32     	; 0x1580 <DIO_u8SetPortVal+0x70>
    1560:	14 c0       	rjmp	.+40     	; 0x158a <DIO_u8SetPortVal+0x7a>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	80 83       	st	Z, r24
    156a:	11 c0       	rjmp	.+34     	; 0x158e <DIO_u8SetPortVal+0x7e>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
    156c:	e8 e3       	ldi	r30, 0x38	; 56
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	80 83       	st	Z, r24
    1574:	0c c0       	rjmp	.+24     	; 0x158e <DIO_u8SetPortVal+0x7e>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	80 83       	st	Z, r24
    157e:	07 c0       	rjmp	.+14     	; 0x158e <DIO_u8SetPortVal+0x7e>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
    1580:	e2 e3       	ldi	r30, 0x32	; 50
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	80 83       	st	Z, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPortVal+0x7e>
		    default: Local_u8ErrStatus = RT_NOK;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}

	return (Local_u8ErrStatus);
    158e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	28 97       	sbiw	r28, 0x08	; 8
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	6b 83       	std	Y+3, r22	; 0x03
    15b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <DIO_u8SetPinVal+0x24>
    15c2:	f2 c0       	rjmp	.+484    	; 0x17a8 <DIO_u8SetPinVal+0x208>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <DIO_u8SetPinVal+0x2c>
    15ca:	ee c0       	rjmp	.+476    	; 0x17a8 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	88 23       	and	r24, r24
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <DIO_u8SetPinVal+0x34>
    15d2:	74 c0       	rjmp	.+232    	; 0x16bc <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	38 87       	std	Y+8, r19	; 0x08
    15dc:	2f 83       	std	Y+7, r18	; 0x07
    15de:	8f 81       	ldd	r24, Y+7	; 0x07
    15e0:	98 85       	ldd	r25, Y+8	; 0x08
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	59 f1       	breq	.+86     	; 0x163e <DIO_u8SetPinVal+0x9e>
    15e8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ea:	38 85       	ldd	r19, Y+8	; 0x08
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	2c f4       	brge	.+10     	; 0x15fc <DIO_u8SetPinVal+0x5c>
    15f2:	8f 81       	ldd	r24, Y+7	; 0x07
    15f4:	98 85       	ldd	r25, Y+8	; 0x08
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f0       	breq	.+26     	; 0x1614 <DIO_u8SetPinVal+0x74>
    15fa:	d8 c0       	rjmp	.+432    	; 0x17ac <DIO_u8SetPinVal+0x20c>
    15fc:	2f 81       	ldd	r18, Y+7	; 0x07
    15fe:	38 85       	ldd	r19, Y+8	; 0x08
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	89 f1       	breq	.+98     	; 0x1668 <DIO_u8SetPinVal+0xc8>
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <DIO_u8SetPinVal+0x72>
    1610:	40 c0       	rjmp	.+128    	; 0x1692 <DIO_u8SetPinVal+0xf2>
    1612:	cc c0       	rjmp	.+408    	; 0x17ac <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
    1614:	ab e3       	ldi	r26, 0x3B	; 59
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	eb e3       	ldi	r30, 0x3B	; 59
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_u8SetPinVal+0x92>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_u8SetPinVal+0x8e>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	b7 c0       	rjmp	.+366    	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
    163e:	a8 e3       	ldi	r26, 0x38	; 56
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_u8SetPinVal+0xbc>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_u8SetPinVal+0xb8>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	a2 c0       	rjmp	.+324    	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
    1668:	a5 e3       	ldi	r26, 0x35	; 53
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e3       	ldi	r30, 0x35	; 53
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_u8SetPinVal+0xe6>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_u8SetPinVal+0xe2>
    168a:	80 95       	com	r24
    168c:	84 23       	and	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	8d c0       	rjmp	.+282    	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
    1692:	a2 e3       	ldi	r26, 0x32	; 50
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e3       	ldi	r30, 0x32	; 50
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinVal+0x110>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8SetPinVal+0x10c>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	78 c0       	rjmp	.+240    	; 0x17ac <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <DIO_u8SetPinVal+0x124>
    16c2:	6f c0       	rjmp	.+222    	; 0x17a2 <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3e 83       	std	Y+6, r19	; 0x06
    16cc:	2d 83       	std	Y+5, r18	; 0x05
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	49 f1       	breq	.+82     	; 0x172a <DIO_u8SetPinVal+0x18a>
    16d8:	2d 81       	ldd	r18, Y+5	; 0x05
    16da:	3e 81       	ldd	r19, Y+6	; 0x06
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_u8SetPinVal+0x14c>
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_u8SetPinVal+0x162>
    16ea:	60 c0       	rjmp	.+192    	; 0x17ac <DIO_u8SetPinVal+0x20c>
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	71 f1       	breq	.+92     	; 0x1752 <DIO_u8SetPinVal+0x1b2>
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	e9 f1       	breq	.+122    	; 0x177a <DIO_u8SetPinVal+0x1da>
    1700:	55 c0       	rjmp	.+170    	; 0x17ac <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
    1702:	ab e3       	ldi	r26, 0x3B	; 59
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	eb e3       	ldi	r30, 0x3B	; 59
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8SetPinVal+0x180>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8SetPinVal+0x17c>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	41 c0       	rjmp	.+130    	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
    172a:	a8 e3       	ldi	r26, 0x38	; 56
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_u8SetPinVal+0x1a8>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_u8SetPinVal+0x1a4>
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	2d c0       	rjmp	.+90     	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8SetPinVal+0x1d0>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8SetPinVal+0x1cc>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	19 c0       	rjmp	.+50     	; 0x17ac <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
    177a:	a2 e3       	ldi	r26, 0x32	; 50
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e2 e3       	ldi	r30, 0x32	; 50
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_u8SetPinVal+0x1f8>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_u8SetPinVal+0x1f4>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	28 96       	adiw	r28, 0x08	; 8
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <DIO_u8GetPortVal+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_u8GetPortVal+0x8>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <DIO_u8GetPortVal+0xa>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	7c 83       	std	Y+4, r23	; 0x04
    17d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
    17d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	19 f4       	brne	.+6      	; 0x17e4 <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	3d c0       	rjmp	.+122    	; 0x185e <DIO_u8GetPortVal+0x9e>
	else
	{
		switch( Copy_u8PortNo )
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3e 83       	std	Y+6, r19	; 0x06
    17ec:	2d 83       	std	Y+5, r18	; 0x05
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	e1 f0       	breq	.+56     	; 0x1830 <DIO_u8GetPortVal+0x70>
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	2c f4       	brge	.+10     	; 0x180c <DIO_u8GetPortVal+0x4c>
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	61 f0       	breq	.+24     	; 0x1822 <DIO_u8GetPortVal+0x62>
    180a:	27 c0       	rjmp	.+78     	; 0x185a <DIO_u8GetPortVal+0x9a>
    180c:	2d 81       	ldd	r18, Y+5	; 0x05
    180e:	3e 81       	ldd	r19, Y+6	; 0x06
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	a1 f0       	breq	.+40     	; 0x183e <DIO_u8GetPortVal+0x7e>
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	91 05       	cpc	r25, r1
    181e:	b1 f0       	breq	.+44     	; 0x184c <DIO_u8GetPortVal+0x8c>
    1820:	1c c0       	rjmp	.+56     	; 0x185a <DIO_u8GetPortVal+0x9a>
			{
				case PORT_A: * Copy_u8pVal = PINA_REG ; break;
    1822:	e9 e3       	ldi	r30, 0x39	; 57
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	80 83       	st	Z, r24
    182e:	17 c0       	rjmp	.+46     	; 0x185e <DIO_u8GetPortVal+0x9e>
			    case PORT_B: * Copy_u8pVal = PINB_REG; break;
    1830:	e6 e3       	ldi	r30, 0x36	; 54
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	eb 81       	ldd	r30, Y+3	; 0x03
    1838:	fc 81       	ldd	r31, Y+4	; 0x04
    183a:	80 83       	st	Z, r24
    183c:	10 c0       	rjmp	.+32     	; 0x185e <DIO_u8GetPortVal+0x9e>
			    case PORT_C: * Copy_u8pVal = PINC_REG; break;
    183e:	e3 e3       	ldi	r30, 0x33	; 51
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	80 83       	st	Z, r24
    184a:	09 c0       	rjmp	.+18     	; 0x185e <DIO_u8GetPortVal+0x9e>
			    case PORT_D: * Copy_u8pVal = PIND_REG; break;
    184c:	e0 e3       	ldi	r30, 0x30	; 48
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	80 83       	st	Z, r24
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_u8GetPortVal+0x9e>
			    default: Local_u8ErrStatus = RT_NOK; break;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
    185e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1860:	26 96       	adiw	r28, 0x06	; 6
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	27 97       	sbiw	r28, 0x07	; 7
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	6b 83       	std	Y+3, r22	; 0x03
    188a:	5d 83       	std	Y+5, r21	; 0x05
    188c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
    188e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	19 f4       	brne	.+6      	; 0x189e <DIO_u8GetPinVal+0x2c>
	{Local_u8ErrStatus = RT_NOK;}
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	7b c0       	rjmp	.+246    	; 0x1994 <DIO_u8GetPinVal+0x122>
	else
	{
		if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	84 30       	cpi	r24, 0x04	; 4
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <DIO_u8GetPinVal+0x34>
    18a4:	75 c0       	rjmp	.+234    	; 0x1990 <DIO_u8GetPinVal+0x11e>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <DIO_u8GetPinVal+0x3c>
    18ac:	71 c0       	rjmp	.+226    	; 0x1990 <DIO_u8GetPinVal+0x11e>
		{
			switch(Copy_u8PortNo)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3f 83       	std	Y+7, r19	; 0x07
    18b6:	2e 83       	std	Y+6, r18	; 0x06
    18b8:	4e 81       	ldd	r20, Y+6	; 0x06
    18ba:	5f 81       	ldd	r21, Y+7	; 0x07
    18bc:	41 30       	cpi	r20, 0x01	; 1
    18be:	51 05       	cpc	r21, r1
    18c0:	59 f1       	breq	.+86     	; 0x1918 <DIO_u8GetPinVal+0xa6>
    18c2:	8e 81       	ldd	r24, Y+6	; 0x06
    18c4:	9f 81       	ldd	r25, Y+7	; 0x07
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	91 05       	cpc	r25, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_u8GetPinVal+0x66>
    18cc:	2e 81       	ldd	r18, Y+6	; 0x06
    18ce:	3f 81       	ldd	r19, Y+7	; 0x07
    18d0:	21 15       	cp	r18, r1
    18d2:	31 05       	cpc	r19, r1
    18d4:	69 f0       	breq	.+26     	; 0x18f0 <DIO_u8GetPinVal+0x7e>
    18d6:	5e c0       	rjmp	.+188    	; 0x1994 <DIO_u8GetPinVal+0x122>
    18d8:	4e 81       	ldd	r20, Y+6	; 0x06
    18da:	5f 81       	ldd	r21, Y+7	; 0x07
    18dc:	42 30       	cpi	r20, 0x02	; 2
    18de:	51 05       	cpc	r21, r1
    18e0:	79 f1       	breq	.+94     	; 0x1940 <DIO_u8GetPinVal+0xce>
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <DIO_u8GetPinVal+0x7c>
    18ec:	3d c0       	rjmp	.+122    	; 0x1968 <DIO_u8GetPinVal+0xf6>
    18ee:	52 c0       	rjmp	.+164    	; 0x1994 <DIO_u8GetPinVal+0x122>
			{
				case PORT_A: * Copy_u8pVal = GET_BIT(PINA_REG , Copy_u8PinNo ); break;
    18f0:	e9 e3       	ldi	r30, 0x39	; 57
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_u8GetPinVal+0x96>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_u8GetPinVal+0x92>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	ec 81       	ldd	r30, Y+4	; 0x04
    1912:	fd 81       	ldd	r31, Y+5	; 0x05
    1914:	80 83       	st	Z, r24
    1916:	3e c0       	rjmp	.+124    	; 0x1994 <DIO_u8GetPinVal+0x122>
				case PORT_B: * Copy_u8pVal = GET_BIT(PINB_REG , Copy_u8PinNo ); break;
    1918:	e6 e3       	ldi	r30, 0x36	; 54
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_u8GetPinVal+0xbe>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_u8GetPinVal+0xba>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	ec 81       	ldd	r30, Y+4	; 0x04
    193a:	fd 81       	ldd	r31, Y+5	; 0x05
    193c:	80 83       	st	Z, r24
    193e:	2a c0       	rjmp	.+84     	; 0x1994 <DIO_u8GetPinVal+0x122>
				case PORT_C: * Copy_u8pVal = GET_BIT(PINC_REG , Copy_u8PinNo ); break;
    1940:	e3 e3       	ldi	r30, 0x33	; 51
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_u8GetPinVal+0xe6>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_u8GetPinVal+0xe2>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	ec 81       	ldd	r30, Y+4	; 0x04
    1962:	fd 81       	ldd	r31, Y+5	; 0x05
    1964:	80 83       	st	Z, r24
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <DIO_u8GetPinVal+0x122>
				case PORT_D: * Copy_u8pVal = GET_BIT(PIND_REG , Copy_u8PinNo ); break;
    1968:	e0 e3       	ldi	r30, 0x30	; 48
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a9 01       	movw	r20, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_u8GetPinVal+0x10e>
    197c:	55 95       	asr	r21
    197e:	47 95       	ror	r20
    1980:	8a 95       	dec	r24
    1982:	e2 f7       	brpl	.-8      	; 0x197c <DIO_u8GetPinVal+0x10a>
    1984:	ca 01       	movw	r24, r20
    1986:	81 70       	andi	r24, 0x01	; 1
    1988:	ec 81       	ldd	r30, Y+4	; 0x04
    198a:	fd 81       	ldd	r31, Y+5	; 0x05
    198c:	80 83       	st	Z, r24
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_u8GetPinVal+0x122>
			}
		}
		else{Local_u8ErrStatus = RT_NOK;}
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Local_u8ErrStatus);
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	27 96       	adiw	r28, 0x07	; 7
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <ADC_init>:
#include"AVR/io.h"
#include"../../HAL/LCD_handler/LCD_int.h"
#include "AVR/delay.h"

void ADC_init(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,7);
    19b0:	a6 e2       	ldi	r26, 0x26	; 38
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e2       	ldi	r30, 0x26	; 38
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
    19be:	a7 e2       	ldi	r26, 0x27	; 39
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e7 e2       	ldi	r30, 0x27	; 39
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 64       	ori	r24, 0x40	; 64
    19ca:	8c 93       	st	X, r24
	ADCSRA &= 0b11111000;
    19cc:	a6 e2       	ldi	r26, 0x26	; 38
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e6 e2       	ldi	r30, 0x26	; 38
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	88 7f       	andi	r24, 0xF8	; 248
    19d8:	8c 93       	st	X, r24
	ADCSRA |= 6;
    19da:	a6 e2       	ldi	r26, 0x26	; 38
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e6 e2       	ldi	r30, 0x26	; 38
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	86 60       	ori	r24, 0x06	; 6
    19e6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,5);
    19e8:	a7 e2       	ldi	r26, 0x27	; 39
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e7 e2       	ldi	r30, 0x27	; 39
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,5);
    19f6:	a6 e2       	ldi	r26, 0x26	; 38
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e6 e2       	ldi	r30, 0x26	; 38
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7d       	andi	r24, 0xDF	; 223
    1a02:	8c 93       	st	X, r24
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <ADC_GetDigitalRead>:
u16 ADC_GetDigitalRead(u8 channel)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <ADC_GetDigitalRead+0x6>
    1a10:	0f 92       	push	r0
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	8b 83       	std	Y+3, r24	; 0x03
	u16 Digital_Read;
	ADMUX &= 0b11100000;
    1a18:	a7 e2       	ldi	r26, 0x27	; 39
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e2       	ldi	r30, 0x27	; 39
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 7e       	andi	r24, 0xE0	; 224
    1a24:	8c 93       	st	X, r24
	ADMUX |=(channel );
    1a26:	a7 e2       	ldi	r26, 0x27	; 39
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e7 e2       	ldi	r30, 0x27	; 39
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	90 81       	ld	r25, Z
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	89 2b       	or	r24, r25
    1a34:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    1a36:	a6 e2       	ldi	r26, 0x26	; 38
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e6 e2       	ldi	r30, 0x26	; 38
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 64       	ori	r24, 0x40	; 64
    1a42:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,4)==0);
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	82 95       	swap	r24
    1a4c:	8f 70       	andi	r24, 0x0F	; 15
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	a9 f3       	breq	.-22     	; 0x1a44 <ADC_GetDigitalRead+0x3a>
	SET_BIT(ADCSRA,4);
    1a5a:	a6 e2       	ldi	r26, 0x26	; 38
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e6 e2       	ldi	r30, 0x26	; 38
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 61       	ori	r24, 0x10	; 16
    1a66:	8c 93       	st	X, r24
	Digital_Read = ADC;
    1a68:	e4 e2       	ldi	r30, 0x24	; 36
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
	return(Digital_Read);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <main>:
void main(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	6f 97       	sbiw	r28, 0x1f	; 31
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61

	u16 X;
	DDRC= 0b11111111;
    1a98:	e4 e3       	ldi	r30, 0x34	; 52
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	80 83       	st	Z, r24
	ADC_init();
    1aa0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <ADC_init>
	LCD_vidInit();
    1aa4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_vidInit>
    u8 F = "TEMP = ";
    1aa8:	80 e6       	ldi	r24, 0x60	; 96
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	8d 8b       	std	Y+21, r24	; 0x15
    u32 Z ;
    u32 * ptr = &Z;
    1aae:	ce 01       	movw	r24, r28
    1ab0:	48 96       	adiw	r24, 0x18	; 24
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
	while(1)
	{

		X = ADC_GetDigitalRead(0);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <ADC_GetDigitalRead>
    1abc:	9f 8b       	std	Y+23, r25	; 0x17
    1abe:	8e 8b       	std	Y+22, r24	; 0x16
		f32 Y = X*4.88 ;
    1ac0:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac2:	9f 89       	ldd	r25, Y+23	; 0x17
    1ac4:	cc 01       	movw	r24, r24
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	26 ef       	ldi	r18, 0xF6	; 246
    1adc:	38 e2       	ldi	r19, 0x28	; 40
    1ade:	4c e9       	ldi	r20, 0x9C	; 156
    1ae0:	50 e4       	ldi	r21, 0x40	; 64
    1ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8f 87       	std	Y+15, r24	; 0x0f
    1aec:	98 8b       	std	Y+16, r25	; 0x10
    1aee:	a9 8b       	std	Y+17, r26	; 0x11
    1af0:	ba 8b       	std	Y+18, r27	; 0x12
		u32 Z = Y / 10 ;
    1af2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1af4:	78 89       	ldd	r23, Y+16	; 0x10
    1af6:	89 89       	ldd	r24, Y+17	; 0x11
    1af8:	9a 89       	ldd	r25, Y+18	; 0x12
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8c 8f       	std	Y+28, r24	; 0x1c
    1b18:	9d 8f       	std	Y+29, r25	; 0x1d
    1b1a:	ae 8f       	std	Y+30, r26	; 0x1e
    1b1c:	bf 8f       	std	Y+31, r27	; 0x1f
		LCD_vidWriteStr(F);
    1b1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_vidWriteStr>
		LCD_vidWriteNumber(&Z);
    1b28:	ce 01       	movw	r24, r28
    1b2a:	4c 96       	adiw	r24, 0x1c	; 28
    1b2c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_vidWriteNumber>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	aa ef       	ldi	r26, 0xFA	; 250
    1b36:	b4 e4       	ldi	r27, 0x44	; 68
    1b38:	8b 87       	std	Y+11, r24	; 0x0b
    1b3a:	9c 87       	std	Y+12, r25	; 0x0c
    1b3c:	ad 87       	std	Y+13, r26	; 0x0d
    1b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a ef       	ldi	r20, 0xFA	; 250
    1b4e:	54 e4       	ldi	r21, 0x44	; 68
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8f 83       	std	Y+7, r24	; 0x07
    1b5a:	98 87       	std	Y+8, r25	; 0x08
    1b5c:	a9 87       	std	Y+9, r26	; 0x09
    1b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <main+0xfe>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <main+0x17c>
	else if (__tmp > 65535)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <main+0x15e>
    1bc4:	88 ec       	ldi	r24, 0xC8	; 200
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <main+0x14c>
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <main+0x140>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <main+0x188>
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		LCD_vidClearScreen();
    1c14:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_vidClearScreen>
    1c18:	4e cf       	rjmp	.-356    	; 0x1ab6 <main+0x32>

00001c1a <LCD_vidInit>:
#define LCD_FUNC_SET_CMD (u8)    0b00111000
#define LCD_ON_OFF_CTRL_CMD (u8) 0b00001110
#define LCD_DISPLAY_CLR_CMD (u8) 0b00000001
#define LCD_ENTRY_MODE_CMD (u8)  0b00000110
extern void LCD_vidInit(void)
{
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	c6 54       	subi	r28, 0x46	; 70
    1c28:	d0 40       	sbci	r29, 0x00	; 0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDir(LCD_DATA_PORT,OUTPUT_PORT);
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	6f ef       	ldi	r22, 0xFF	; 255
    1c38:	0e 94 27 09 	call	0x124e	; 0x124e <DIO_u8SetPortDir>
	DIO_u8SetPinDir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_u8SetPinDir>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 5b       	subi	r30, 0xBD	; 189
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e2       	ldi	r26, 0x20	; 32
    1c66:	b2 e4       	ldi	r27, 0x42	; 66
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	a2 83       	std	Z+2, r26	; 0x02
    1c6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	8e 01       	movw	r16, r28
    1c72:	01 5c       	subi	r16, 0xC1	; 193
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	ed 5b       	subi	r30, 0xBD	; 189
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a ef       	ldi	r20, 0xFA	; 250
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	f8 01       	movw	r30, r16
    1c96:	80 83       	st	Z, r24
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	a2 83       	std	Z+2, r26	; 0x02
    1c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ff 96       	adiw	r30, 0x3f	; 63
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_vidInit+0xaa>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e af       	std	Y+62, r25	; 0x3e
    1cc0:	8d af       	std	Y+61, r24	; 0x3d
    1cc2:	46 c0       	rjmp	.+140    	; 0x1d50 <LCD_vidInit+0x136>
	else if (__tmp > 65535)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ff 96       	adiw	r30, 0x3f	; 63
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	64 f5       	brge	.+88     	; 0x1d38 <LCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ed 5b       	subi	r30, 0xBD	; 189
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e af       	std	Y+62, r25	; 0x3e
    1d0c:	8d af       	std	Y+61, r24	; 0x3d
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_vidInit+0x114>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c af       	std	Y+60, r25	; 0x3c
    1d16:	8b af       	std	Y+59, r24	; 0x3b
    1d18:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d1a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_vidInit+0x102>
    1d20:	9c af       	std	Y+60, r25	; 0x3c
    1d22:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e af       	std	Y+62, r25	; 0x3e
    1d2c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_vidInit+0xf6>
    1d36:	16 c0       	rjmp	.+44     	; 0x1d64 <LCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ff 96       	adiw	r30, 0x3f	; 63
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e af       	std	Y+62, r25	; 0x3e
    1d4e:	8d af       	std	Y+61, r24	; 0x3d
    1d50:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d52:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d54:	9a af       	std	Y+58, r25	; 0x3a
    1d56:	89 af       	std	Y+57, r24	; 0x39
    1d58:	89 ad       	ldd	r24, Y+57	; 0x39
    1d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_vidInit+0x142>
    1d60:	9a af       	std	Y+58, r25	; 0x3a
    1d62:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_vidSendCommand(LCD_FUNC_SET_CMD);
    1d64:	88 e3       	ldi	r24, 0x38	; 56
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_vidSendCommand>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e8       	ldi	r26, 0x80	; 128
    1d72:	bf e3       	ldi	r27, 0x3F	; 63
    1d74:	8d ab       	std	Y+53, r24	; 0x35
    1d76:	9e ab       	std	Y+54, r25	; 0x36
    1d78:	af ab       	std	Y+55, r26	; 0x37
    1d7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d80:	8f a9       	ldd	r24, Y+55	; 0x37
    1d82:	98 ad       	ldd	r25, Y+56	; 0x38
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	89 ab       	std	Y+49, r24	; 0x31
    1d96:	9a ab       	std	Y+50, r25	; 0x32
    1d98:	ab ab       	std	Y+51, r26	; 0x33
    1d9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1da0:	8b a9       	ldd	r24, Y+51	; 0x33
    1da2:	9c a9       	ldd	r25, Y+52	; 0x34
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <LCD_vidInit+0x1a4>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <LCD_vidInit+0x222>
	else if (__tmp > 65535)
    1dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <LCD_vidInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <LCD_vidInit+0x204>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e a7       	std	Y+46, r25	; 0x2e
    1e06:	8d a7       	std	Y+45, r24	; 0x2d
    1e08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_vidInit+0x1f2>
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <LCD_vidInit+0x1e6>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <LCD_vidInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	9c a7       	std	Y+44, r25	; 0x2c
    1e42:	8b a7       	std	Y+43, r24	; 0x2b
    1e44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_vidInit+0x22e>
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vidSendCommand(LCD_ON_OFF_CTRL_CMD);
    1e50:	8e e0       	ldi	r24, 0x0E	; 14
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_vidSendCommand>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e8       	ldi	r26, 0x80	; 128
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	8f a3       	std	Y+39, r24	; 0x27
    1e62:	98 a7       	std	Y+40, r25	; 0x28
    1e64:	a9 a7       	std	Y+41, r26	; 0x29
    1e66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8b a3       	std	Y+35, r24	; 0x23
    1e82:	9c a3       	std	Y+36, r25	; 0x24
    1e84:	ad a3       	std	Y+37, r26	; 0x25
    1e86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e88:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_vidInit+0x290>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9a a3       	std	Y+34, r25	; 0x22
    1ea6:	89 a3       	std	Y+33, r24	; 0x21
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_vidInit+0x30e>
	else if (__tmp > 65535)
    1eaa:	6b a1       	ldd	r22, Y+35	; 0x23
    1eac:	7c a1       	ldd	r23, Y+36	; 0x24
    1eae:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_vidInit+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9a a3       	std	Y+34, r25	; 0x22
    1ee8:	89 a3       	std	Y+33, r24	; 0x21
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_vidInit+0x2f0>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	98 a3       	std	Y+32, r25	; 0x20
    1ef2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_vidInit+0x2de>
    1efc:	98 a3       	std	Y+32, r25	; 0x20
    1efe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9a a3       	std	Y+34, r25	; 0x22
    1f08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_vidInit+0x2d2>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <LCD_vidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6b a1       	ldd	r22, Y+35	; 0x23
    1f16:	7c a1       	ldd	r23, Y+36	; 0x24
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9a a3       	std	Y+34, r25	; 0x22
    1f26:	89 a3       	std	Y+33, r24	; 0x21
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_vidInit+0x31a>
    1f38:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vidSendCommand(LCD_DISPLAY_CLR_CMD);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_vidSendCommand>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e4       	ldi	r27, 0x40	; 64
    1f4c:	89 8f       	std	Y+25, r24	; 0x19
    1f4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f50:	ab 8f       	std	Y+27, r26	; 0x1b
    1f52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	69 8d       	ldd	r22, Y+25	; 0x19
    1f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8d 8b       	std	Y+21, r24	; 0x15
    1f6e:	9e 8b       	std	Y+22, r25	; 0x16
    1f70:	af 8b       	std	Y+23, r26	; 0x17
    1f72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f74:	6d 89       	ldd	r22, Y+21	; 0x15
    1f76:	7e 89       	ldd	r23, Y+22	; 0x16
    1f78:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <LCD_vidInit+0x37c>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <LCD_vidInit+0x3fa>
	else if (__tmp > 65535)
    1f96:	6d 89       	ldd	r22, Y+21	; 0x15
    1f98:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <LCD_vidInit+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <LCD_vidInit+0x3dc>
    1fd8:	88 ec       	ldi	r24, 0xC8	; 200
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	89 8b       	std	Y+17, r24	; 0x11
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_vidInit+0x3ca>
    1fe8:	9a 8b       	std	Y+18, r25	; 0x12
    1fea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <LCD_vidInit+0x3be>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <LCD_vidInit+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9c 8b       	std	Y+20, r25	; 0x14
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	8b 89       	ldd	r24, Y+19	; 0x13
    2016:	9c 89       	ldd	r25, Y+20	; 0x14
    2018:	98 8b       	std	Y+16, r25	; 0x10
    201a:	8f 87       	std	Y+15, r24	; 0x0f
    201c:	8f 85       	ldd	r24, Y+15	; 0x0f
    201e:	98 89       	ldd	r25, Y+16	; 0x10
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_vidInit+0x406>
    2024:	98 8b       	std	Y+16, r25	; 0x10
    2026:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(LCD_ENTRY_MODE_CMD);
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 96 10 	call	0x212c	; 0x212c <LCD_vidSendCommand>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e8       	ldi	r26, 0x80	; 128
    2036:	bf e3       	ldi	r27, 0x3F	; 63
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    203a:	9c 87       	std	Y+12, r25	; 0x0c
    203c:	ad 87       	std	Y+13, r26	; 0x0d
    203e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	6b 85       	ldd	r22, Y+11	; 0x0b
    2042:	7c 85       	ldd	r23, Y+12	; 0x0c
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	98 87       	std	Y+8, r25	; 0x08
    205c:	a9 87       	std	Y+9, r26	; 0x09
    205e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_vidInit+0x468>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_vidInit+0x4e6>
	else if (__tmp > 65535)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_vidInit+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	6b 85       	ldd	r22, Y+11	; 0x0b
    209c:	7c 85       	ldd	r23, Y+12	; 0x0c
    209e:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_vidInit+0x4c8>
    20c4:	88 ec       	ldi	r24, 0xC8	; 200
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_vidInit+0x4b6>
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_vidInit+0x4aa>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_vidInit+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_vidInit+0x4f2>
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2114:	ca 5b       	subi	r28, 0xBA	; 186
    2116:	df 4f       	sbci	r29, 0xFF	; 255
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	08 95       	ret

0000212c <LCD_vidSendCommand>:
extern void LCD_vidSendCommand(u8 Copy_u8Command)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	6d 97       	sbiw	r28, 0x1d	; 29
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2142:	83 e0       	ldi	r24, 0x03	; 3
    2144:	62 e0       	ldi	r22, 0x02	; 2
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    214c:	83 e0       	ldi	r24, 0x03	; 3
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8Command);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	6d 8d       	ldd	r22, Y+29	; 0x1d
    215a:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e4       	ldi	r27, 0x40	; 64
    2170:	89 8f       	std	Y+25, r24	; 0x19
    2172:	9a 8f       	std	Y+26, r25	; 0x1a
    2174:	ab 8f       	std	Y+27, r26	; 0x1b
    2176:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	69 8d       	ldd	r22, Y+25	; 0x19
    217a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8d 8b       	std	Y+21, r24	; 0x15
    2192:	9e 8b       	std	Y+22, r25	; 0x16
    2194:	af 8b       	std	Y+23, r26	; 0x17
    2196:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2198:	6d 89       	ldd	r22, Y+21	; 0x15
    219a:	7e 89       	ldd	r23, Y+22	; 0x16
    219c:	8f 89       	ldd	r24, Y+23	; 0x17
    219e:	98 8d       	ldd	r25, Y+24	; 0x18
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    21ba:	6d 89       	ldd	r22, Y+21	; 0x15
    21bc:	7e 89       	ldd	r23, Y+22	; 0x16
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	69 8d       	ldd	r22, Y+25	; 0x19
    21d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <LCD_vidSendCommand+0xee>
    21fc:	88 ec       	ldi	r24, 0xC8	; 200
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9a 8b       	std	Y+18, r25	; 0x12
    2202:	89 8b       	std	Y+17, r24	; 0x11
    2204:	89 89       	ldd	r24, Y+17	; 0x11
    2206:	9a 89       	ldd	r25, Y+18	; 0x12
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_vidSendCommand+0xdc>
    220c:	9a 8b       	std	Y+18, r25	; 0x12
    220e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8b 89       	ldd	r24, Y+19	; 0x13
    2212:	9c 89       	ldd	r25, Y+20	; 0x14
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <LCD_vidSendCommand+0xd0>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6d 89       	ldd	r22, Y+21	; 0x15
    2226:	7e 89       	ldd	r23, Y+22	; 0x16
    2228:	8f 89       	ldd	r24, Y+23	; 0x17
    222a:	98 8d       	ldd	r25, Y+24	; 0x18
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	98 8b       	std	Y+16, r25	; 0x10
    223e:	8f 87       	std	Y+15, r24	; 0x0f
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	98 89       	ldd	r25, Y+16	; 0x10
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_vidSendCommand+0x118>
    2248:	98 8b       	std	Y+16, r25	; 0x10
    224a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	b0 e4       	ldi	r27, 0x40	; 64
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_vidSendCommand+0x1dc>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_vidSendCommand+0x1ca>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_vidSendCommand+0x1be>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_vidSendCommand+0x206>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);



}
    233a:	6d 96       	adiw	r28, 0x1d	; 29
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_VidWriteCharacter>:
extern void LCD_VidWriteCharacter(u8 Copy_u8character)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	6d 97       	sbiw	r28, 0x1d	; 29
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,Copy_u8character);
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	6d 8d       	ldd	r22, Y+29	; 0x1d
    237a:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e4       	ldi	r27, 0x40	; 64
    2390:	89 8f       	std	Y+25, r24	; 0x19
    2392:	9a 8f       	std	Y+26, r25	; 0x1a
    2394:	ab 8f       	std	Y+27, r26	; 0x1b
    2396:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a ef       	ldi	r20, 0xFA	; 250
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8d 8b       	std	Y+21, r24	; 0x15
    23b2:	9e 8b       	std	Y+22, r25	; 0x16
    23b4:	af 8b       	std	Y+23, r26	; 0x17
    23b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <LCD_VidWriteCharacter+0x8e>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <LCD_VidWriteCharacter+0x10c>
	else if (__tmp > 65535)
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <LCD_VidWriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	69 8d       	ldd	r22, Y+25	; 0x19
    23f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	0f c0       	rjmp	.+30     	; 0x243a <LCD_VidWriteCharacter+0xee>
    241c:	88 ec       	ldi	r24, 0xC8	; 200
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9a 8b       	std	Y+18, r25	; 0x12
    2422:	89 8b       	std	Y+17, r24	; 0x11
    2424:	89 89       	ldd	r24, Y+17	; 0x11
    2426:	9a 89       	ldd	r25, Y+18	; 0x12
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_VidWriteCharacter+0xdc>
    242c:	9a 8b       	std	Y+18, r25	; 0x12
    242e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <LCD_VidWriteCharacter+0xd0>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <LCD_VidWriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	98 8b       	std	Y+16, r25	; 0x10
    245e:	8f 87       	std	Y+15, r24	; 0x0f
    2460:	8f 85       	ldd	r24, Y+15	; 0x0f
    2462:	98 89       	ldd	r25, Y+16	; 0x10
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_VidWriteCharacter+0x118>
    2468:	98 8b       	std	Y+16, r25	; 0x10
    246a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b0 e4       	ldi	r27, 0x40	; 64
    247e:	8b 87       	std	Y+11, r24	; 0x0b
    2480:	9c 87       	std	Y+12, r25	; 0x0c
    2482:	ad 87       	std	Y+13, r26	; 0x0d
    2484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6b 85       	ldd	r22, Y+11	; 0x0b
    2488:	7c 85       	ldd	r23, Y+12	; 0x0c
    248a:	8d 85       	ldd	r24, Y+13	; 0x0d
    248c:	9e 85       	ldd	r25, Y+14	; 0x0e
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a ef       	ldi	r20, 0xFA	; 250
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8f 83       	std	Y+7, r24	; 0x07
    24a0:	98 87       	std	Y+8, r25	; 0x08
    24a2:	a9 87       	std	Y+9, r26	; 0x09
    24a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <LCD_VidWriteCharacter+0x17c>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <LCD_VidWriteCharacter+0x1fa>
	else if (__tmp > 65535)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <LCD_VidWriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <LCD_VidWriteCharacter+0x1dc>
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_VidWriteCharacter+0x1ca>
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <LCD_VidWriteCharacter+0x1be>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <LCD_VidWriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_VidWriteCharacter+0x206>
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    255a:	6d 96       	adiw	r28, 0x1d	; 29
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <LCD_vidWriteStr>:
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	6e 97       	sbiw	r28, 0x1e	; 30
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	9e 8f       	std	Y+30, r25	; 0x1e
    2582:	8d 8f       	std	Y+29, r24	; 0x1d
    2584:	04 c1       	rjmp	.+520    	; 0x278e <LCD_vidWriteStr+0x222>

	while(* Copy_u8pstr != '\0')
	{
		DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2586:	83 e0       	ldi	r24, 0x03	; 3
    2588:	62 e0       	ldi	r22, 0x02	; 2
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
		DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2590:	83 e0       	ldi	r24, 0x03	; 3
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
		DIO_u8SetPortVal(LCD_DATA_PORT,*Copy_u8pstr);
    259a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    259c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    259e:	90 81       	ld	r25, Z
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	69 2f       	mov	r22, r25
    25a4:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    25a8:	83 e0       	ldi	r24, 0x03	; 3
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e0       	ldi	r26, 0x00	; 0
    25b8:	b0 e4       	ldi	r27, 0x40	; 64
    25ba:	89 8f       	std	Y+25, r24	; 0x19
    25bc:	9a 8f       	std	Y+26, r25	; 0x1a
    25be:	ab 8f       	std	Y+27, r26	; 0x1b
    25c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a ef       	ldi	r20, 0xFA	; 250
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8d 8b       	std	Y+21, r24	; 0x15
    25dc:	9e 8b       	std	Y+22, r25	; 0x16
    25de:	af 8b       	std	Y+23, r26	; 0x17
    25e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25e2:	6d 89       	ldd	r22, Y+21	; 0x15
    25e4:	7e 89       	ldd	r23, Y+22	; 0x16
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <LCD_vidWriteStr+0x98>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c 8b       	std	Y+20, r25	; 0x14
    2600:	8b 8b       	std	Y+19, r24	; 0x13
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <LCD_vidWriteStr+0x116>
	else if (__tmp > 65535)
    2604:	6d 89       	ldd	r22, Y+21	; 0x15
    2606:	7e 89       	ldd	r23, Y+22	; 0x16
    2608:	8f 89       	ldd	r24, Y+23	; 0x17
    260a:	98 8d       	ldd	r25, Y+24	; 0x18
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <LCD_vidWriteStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	69 8d       	ldd	r22, Y+25	; 0x19
    261e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9c 8b       	std	Y+20, r25	; 0x14
    2642:	8b 8b       	std	Y+19, r24	; 0x13
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <LCD_vidWriteStr+0xf8>
    2646:	88 ec       	ldi	r24, 0xC8	; 200
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9a 8b       	std	Y+18, r25	; 0x12
    264c:	89 8b       	std	Y+17, r24	; 0x11
    264e:	89 89       	ldd	r24, Y+17	; 0x11
    2650:	9a 89       	ldd	r25, Y+18	; 0x12
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_vidWriteStr+0xe6>
    2656:	9a 8b       	std	Y+18, r25	; 0x12
    2658:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	8b 89       	ldd	r24, Y+19	; 0x13
    265c:	9c 89       	ldd	r25, Y+20	; 0x14
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9c 8b       	std	Y+20, r25	; 0x14
    2662:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <LCD_vidWriteStr+0xda>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <LCD_vidWriteStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9c 8b       	std	Y+20, r25	; 0x14
    2680:	8b 8b       	std	Y+19, r24	; 0x13
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	98 8b       	std	Y+16, r25	; 0x10
    2688:	8f 87       	std	Y+15, r24	; 0x0f
    268a:	8f 85       	ldd	r24, Y+15	; 0x0f
    268c:	98 89       	ldd	r25, Y+16	; 0x10
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_vidWriteStr+0x122>
    2692:	98 8b       	std	Y+16, r25	; 0x10
    2694:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a8 e4       	ldi	r26, 0x48	; 72
    26a6:	b2 e4       	ldi	r27, 0x42	; 66
    26a8:	8b 87       	std	Y+11, r24	; 0x0b
    26aa:	9c 87       	std	Y+12, r25	; 0x0c
    26ac:	ad 87       	std	Y+13, r26	; 0x0d
    26ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a ef       	ldi	r20, 0xFA	; 250
    26be:	54 e4       	ldi	r21, 0x44	; 68
    26c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8f 83       	std	Y+7, r24	; 0x07
    26ca:	98 87       	std	Y+8, r25	; 0x08
    26cc:	a9 87       	std	Y+9, r26	; 0x09
    26ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_vidWriteStr+0x186>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_vidWriteStr+0x204>
	else if (__tmp > 65535)
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_vidWriteStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	6b 85       	ldd	r22, Y+11	; 0x0b
    270c:	7c 85       	ldd	r23, Y+12	; 0x0c
    270e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2710:	9e 85       	ldd	r25, Y+14	; 0x0e
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_vidWriteStr+0x1e6>
    2734:	88 ec       	ldi	r24, 0xC8	; 200
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_vidWriteStr+0x1d4>
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_vidWriteStr+0x1c8>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_vidWriteStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	6f 81       	ldd	r22, Y+7	; 0x07
    275e:	78 85       	ldd	r23, Y+8	; 0x08
    2760:	89 85       	ldd	r24, Y+9	; 0x09
    2762:	9a 85       	ldd	r25, Y+10	; 0x0a
    2764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_vidWriteStr+0x210>
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Copy_u8pstr++;
    2784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2786:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	9e 8f       	std	Y+30, r25	; 0x1e
    278c:	8d 8f       	std	Y+29, r24	; 0x1d

}
extern void LCD_vidWriteStr(u8 * Copy_u8pstr)
{

	while(* Copy_u8pstr != '\0')
    278e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2790:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2792:	80 81       	ld	r24, Z
    2794:	88 23       	and	r24, r24
    2796:	09 f0       	breq	.+2      	; 0x279a <LCD_vidWriteStr+0x22e>
    2798:	f6 ce       	rjmp	.-532    	; 0x2586 <LCD_vidWriteStr+0x1a>
		_delay_ms(50);
		Copy_u8pstr++;
	}


}
    279a:	6e 96       	adiw	r28, 0x1e	; 30
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <LCD_vidClearScreen>:
void LCD_vidClearScreen(void)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	6c 97       	sbiw	r28, 0x1c	; 28
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	62 e0       	ldi	r22, 0x02	; 2
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,LCD_DISPLAY_CLR_CMD);
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a0 e0       	ldi	r26, 0x00	; 0
    27ec:	b0 e4       	ldi	r27, 0x40	; 64
    27ee:	89 8f       	std	Y+25, r24	; 0x19
    27f0:	9a 8f       	std	Y+26, r25	; 0x1a
    27f2:	ab 8f       	std	Y+27, r26	; 0x1b
    27f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f6:	69 8d       	ldd	r22, Y+25	; 0x19
    27f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a ef       	ldi	r20, 0xFA	; 250
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8d 8b       	std	Y+21, r24	; 0x15
    2810:	9e 8b       	std	Y+22, r25	; 0x16
    2812:	af 8b       	std	Y+23, r26	; 0x17
    2814:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <LCD_vidClearScreen+0x8c>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 8b       	std	Y+20, r25	; 0x14
    2834:	8b 8b       	std	Y+19, r24	; 0x13
    2836:	3f c0       	rjmp	.+126    	; 0x28b6 <LCD_vidClearScreen+0x10a>
	else if (__tmp > 65535)
    2838:	6d 89       	ldd	r22, Y+21	; 0x15
    283a:	7e 89       	ldd	r23, Y+22	; 0x16
    283c:	8f 89       	ldd	r24, Y+23	; 0x17
    283e:	98 8d       	ldd	r25, Y+24	; 0x18
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	4c f5       	brge	.+82     	; 0x28a2 <LCD_vidClearScreen+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	69 8d       	ldd	r22, Y+25	; 0x19
    2852:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2854:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2856:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <LCD_vidClearScreen+0xec>
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9a 8b       	std	Y+18, r25	; 0x12
    2880:	89 8b       	std	Y+17, r24	; 0x11
    2882:	89 89       	ldd	r24, Y+17	; 0x11
    2884:	9a 89       	ldd	r25, Y+18	; 0x12
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_vidClearScreen+0xda>
    288a:	9a 8b       	std	Y+18, r25	; 0x12
    288c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	9c 89       	ldd	r25, Y+20	; 0x14
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	69 f7       	brne	.-38     	; 0x287a <LCD_vidClearScreen+0xce>
    28a0:	14 c0       	rjmp	.+40     	; 0x28ca <LCD_vidClearScreen+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a2:	6d 89       	ldd	r22, Y+21	; 0x15
    28a4:	7e 89       	ldd	r23, Y+22	; 0x16
    28a6:	8f 89       	ldd	r24, Y+23	; 0x17
    28a8:	98 8d       	ldd	r25, Y+24	; 0x18
    28aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
    28b4:	8b 8b       	std	Y+19, r24	; 0x13
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	98 8b       	std	Y+16, r25	; 0x10
    28bc:	8f 87       	std	Y+15, r24	; 0x0f
    28be:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c0:	98 89       	ldd	r25, Y+16	; 0x10
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_vidClearScreen+0x116>
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e4       	ldi	r27, 0x40	; 64
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_vidClearScreen+0x17a>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_vidClearScreen+0x1f8>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_vidClearScreen+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_vidClearScreen+0x1da>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_vidClearScreen+0x1c8>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_vidClearScreen+0x1bc>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <LCD_vidClearScreen+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_vidClearScreen+0x204>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    29b8:	6c 96       	adiw	r28, 0x1c	; 28
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <LCD_vidShiftLeft>:

void LCD_vidShiftLeft(void)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	6c 97       	sbiw	r28, 0x1c	; 28
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    29e8:	83 e0       	ldi	r24, 0x03	; 3
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x18);
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	68 e1       	ldi	r22, 0x18	; 24
    29f6:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e0       	ldi	r26, 0x00	; 0
    2a0a:	b0 e4       	ldi	r27, 0x40	; 64
    2a0c:	89 8f       	std	Y+25, r24	; 0x19
    2a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a10:	ab 8f       	std	Y+27, r26	; 0x1b
    2a12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	69 8d       	ldd	r22, Y+25	; 0x19
    2a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a ef       	ldi	r20, 0xFA	; 250
    2a22:	54 e4       	ldi	r21, 0x44	; 68
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8d 8b       	std	Y+21, r24	; 0x15
    2a2e:	9e 8b       	std	Y+22, r25	; 0x16
    2a30:	af 8b       	std	Y+23, r26	; 0x17
    2a32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a34:	6d 89       	ldd	r22, Y+21	; 0x15
    2a36:	7e 89       	ldd	r23, Y+22	; 0x16
    2a38:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_vidShiftLeft+0x8c>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9c 8b       	std	Y+20, r25	; 0x14
    2a52:	8b 8b       	std	Y+19, r24	; 0x13
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <LCD_vidShiftLeft+0x10a>
	else if (__tmp > 65535)
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <LCD_vidShiftLeft+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9c 8b       	std	Y+20, r25	; 0x14
    2a94:	8b 8b       	std	Y+19, r24	; 0x13
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <LCD_vidShiftLeft+0xec>
    2a98:	88 ec       	ldi	r24, 0xC8	; 200
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9a 8b       	std	Y+18, r25	; 0x12
    2a9e:	89 8b       	std	Y+17, r24	; 0x11
    2aa0:	89 89       	ldd	r24, Y+17	; 0x11
    2aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_vidShiftLeft+0xda>
    2aa8:	9a 8b       	std	Y+18, r25	; 0x12
    2aaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9c 8b       	std	Y+20, r25	; 0x14
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <LCD_vidShiftLeft+0xce>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <LCD_vidShiftLeft+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9c 8b       	std	Y+20, r25	; 0x14
    2ad2:	8b 8b       	std	Y+19, r24	; 0x13
    2ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad8:	98 8b       	std	Y+16, r25	; 0x10
    2ada:	8f 87       	std	Y+15, r24	; 0x0f
    2adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ade:	98 89       	ldd	r25, Y+16	; 0x10
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_vidShiftLeft+0x116>
    2ae4:	98 8b       	std	Y+16, r25	; 0x10
    2ae6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e4       	ldi	r27, 0x40	; 64
    2afa:	8b 87       	std	Y+11, r24	; 0x0b
    2afc:	9c 87       	std	Y+12, r25	; 0x0c
    2afe:	ad 87       	std	Y+13, r26	; 0x0d
    2b00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a ef       	ldi	r20, 0xFA	; 250
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
    2b1c:	98 87       	std	Y+8, r25	; 0x08
    2b1e:	a9 87       	std	Y+9, r26	; 0x09
    2b20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <LCD_vidShiftLeft+0x17a>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	3f c0       	rjmp	.+126    	; 0x2bc2 <LCD_vidShiftLeft+0x1f8>
	else if (__tmp > 65535)
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	4c f5       	brge	.+82     	; 0x2bae <LCD_vidShiftLeft+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	51 e4       	ldi	r21, 0x41	; 65
    2b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	0f c0       	rjmp	.+30     	; 0x2ba4 <LCD_vidShiftLeft+0x1da>
    2b86:	88 ec       	ldi	r24, 0xC8	; 200
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <LCD_vidShiftLeft+0x1c8>
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f7       	brne	.-38     	; 0x2b86 <LCD_vidShiftLeft+0x1bc>
    2bac:	14 c0       	rjmp	.+40     	; 0x2bd6 <LCD_vidShiftLeft+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_vidShiftLeft+0x204>
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2bd6:	6c 96       	adiw	r28, 0x1c	; 28
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <LCD_vidShiftRight>:
void LCD_vidShiftRight(void)
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	6c 97       	sbiw	r28, 0x1c	; 28
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinVal(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	62 e0       	ldi	r22, 0x02	; 2
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	61 e0       	ldi	r22, 0x01	; 1
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT,0x1C);
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	6c e1       	ldi	r22, 0x1C	; 28
    2c14:	0e 94 88 0a 	call	0x1510	; 0x1510 <DIO_u8SetPortVal>
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e4       	ldi	r27, 0x40	; 64
    2c2a:	89 8f       	std	Y+25, r24	; 0x19
    2c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	69 8d       	ldd	r22, Y+25	; 0x19
    2c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8d 8b       	std	Y+21, r24	; 0x15
    2c4c:	9e 8b       	std	Y+22, r25	; 0x16
    2c4e:	af 8b       	std	Y+23, r26	; 0x17
    2c50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c52:	6d 89       	ldd	r22, Y+21	; 0x15
    2c54:	7e 89       	ldd	r23, Y+22	; 0x16
    2c56:	8f 89       	ldd	r24, Y+23	; 0x17
    2c58:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <LCD_vidShiftRight+0x8c>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 8b       	std	Y+20, r25	; 0x14
    2c70:	8b 8b       	std	Y+19, r24	; 0x13
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <LCD_vidShiftRight+0x10a>
	else if (__tmp > 65535)
    2c74:	6d 89       	ldd	r22, Y+21	; 0x15
    2c76:	7e 89       	ldd	r23, Y+22	; 0x16
    2c78:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <LCD_vidShiftRight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <LCD_vidShiftRight+0xec>
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9a 8b       	std	Y+18, r25	; 0x12
    2cbc:	89 8b       	std	Y+17, r24	; 0x11
    2cbe:	89 89       	ldd	r24, Y+17	; 0x11
    2cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <LCD_vidShiftRight+0xda>
    2cc6:	9a 8b       	std	Y+18, r25	; 0x12
    2cc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9c 8b       	std	Y+20, r25	; 0x14
    2cd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <LCD_vidShiftRight+0xce>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <LCD_vidShiftRight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	98 8b       	std	Y+16, r25	; 0x10
    2cf8:	8f 87       	std	Y+15, r24	; 0x0f
    2cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfc:	98 89       	ldd	r25, Y+16	; 0x10
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_vidShiftRight+0x116>
    2d02:	98 8b       	std	Y+16, r25	; 0x10
    2d04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinVal(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_u8SetPinVal>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e4       	ldi	r27, 0x40	; 64
    2d18:	8b 87       	std	Y+11, r24	; 0x0b
    2d1a:	9c 87       	std	Y+12, r25	; 0x0c
    2d1c:	ad 87       	std	Y+13, r26	; 0x0d
    2d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a ef       	ldi	r20, 0xFA	; 250
    2d2e:	54 e4       	ldi	r21, 0x44	; 68
    2d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	8f 83       	std	Y+7, r24	; 0x07
    2d3a:	98 87       	std	Y+8, r25	; 0x08
    2d3c:	a9 87       	std	Y+9, r26	; 0x09
    2d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	5f e3       	ldi	r21, 0x3F	; 63
    2d50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	2c f4       	brge	.+10     	; 0x2d62 <LCD_vidShiftRight+0x17a>
		__ticks = 1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	3f c0       	rjmp	.+126    	; 0x2de0 <LCD_vidShiftRight+0x1f8>
	else if (__tmp > 65535)
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	4c f5       	brge	.+82     	; 0x2dcc <LCD_vidShiftRight+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	51 e4       	ldi	r21, 0x41	; 65
    2d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	0f c0       	rjmp	.+30     	; 0x2dc2 <LCD_vidShiftRight+0x1da>
    2da4:	88 ec       	ldi	r24, 0xC8	; 200
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_vidShiftRight+0x1c8>
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	69 f7       	brne	.-38     	; 0x2da4 <LCD_vidShiftRight+0x1bc>
    2dca:	14 c0       	rjmp	.+40     	; 0x2df4 <LCD_vidShiftRight+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <LCD_vidShiftRight+0x204>
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2df4:	6c 96       	adiw	r28, 0x1c	; 28
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <LCD_vidWriteNumber>:
void LCD_vidWriteNumber(u32* Copy_u8pNumber)

{
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	61 97       	sbiw	r28, 0x11	; 17
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	99 8b       	std	Y+17, r25	; 0x11
    2e20:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8ARR[10] = {'0'};
    2e22:	8a e0       	ldi	r24, 0x0A	; 10
    2e24:	fe 01       	movw	r30, r28
    2e26:	36 96       	adiw	r30, 0x06	; 6
    2e28:	df 01       	movw	r26, r30
    2e2a:	98 2f       	mov	r25, r24
    2e2c:	1d 92       	st	X+, r1
    2e2e:	9a 95       	dec	r25
    2e30:	e9 f7       	brne	.-6      	; 0x2e2c <LCD_vidWriteNumber+0x26>
    2e32:	80 e3       	ldi	r24, 0x30	; 48
    2e34:	8e 83       	std	Y+6, r24	; 0x06
	signed char Local_u8Counter;
	u32 Local_u32Temp=*Copy_u8pNumber ;
    2e36:	e8 89       	ldd	r30, Y+16	; 0x10
    2e38:	f9 89       	ldd	r31, Y+17	; 0x11
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e40:	b3 81       	ldd	r27, Z+3	; 0x03
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	ab 83       	std	Y+3, r26	; 0x03
    2e48:	bc 83       	std	Y+4, r27	; 0x04
	for (Local_u8Counter=0 ; Local_u8Counter <10 ;Local_u8Counter++)
    2e4a:	1d 82       	std	Y+5, r1	; 0x05
    2e4c:	4f c0       	rjmp	.+158    	; 0x2eec <LCD_vidWriteNumber+0xe6>
	{

		Local_u8ARR[ Local_u8Counter] = Local_u32Temp %10;
    2e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e50:	08 2f       	mov	r16, r24
    2e52:	11 27       	eor	r17, r17
    2e54:	07 fd       	sbrc	r16, 7
    2e56:	10 95       	com	r17
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e5e:	bc 81       	ldd	r27, Y+4	; 0x04
    2e60:	2a e0       	ldi	r18, 0x0A	; 10
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__udivmodsi4>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	28 2f       	mov	r18, r24
    2e76:	ce 01       	movw	r24, r28
    2e78:	06 96       	adiw	r24, 0x06	; 6
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e0 0f       	add	r30, r16
    2e7e:	f1 1f       	adc	r31, r17
    2e80:	20 83       	st	Z, r18
		Local_u32Temp/=10;
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	ab 81       	ldd	r26, Y+3	; 0x03
    2e88:	bc 81       	ldd	r27, Y+4	; 0x04
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	50 e0       	ldi	r21, 0x00	; 0
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__udivmodsi4>
    2e9a:	da 01       	movw	r26, r20
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	ab 83       	std	Y+3, r26	; 0x03
    2ea4:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Temp = floor(Local_u32Temp) ;
    2ea6:	69 81       	ldd	r22, Y+1	; 0x01
    2ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <floor>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	ab 83       	std	Y+3, r26	; 0x03
    2ed4:	bc 83       	std	Y+4, r27	; 0x04
		if (Local_u32Temp==0)
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	ab 81       	ldd	r26, Y+3	; 0x03
    2edc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	a1 05       	cpc	r26, r1
    2ee2:	b1 05       	cpc	r27, r1
    2ee4:	c9 f0       	breq	.+50     	; 0x2f18 <LCD_vidWriteNumber+0x112>

{
	u8 Local_u8ARR[10] = {'0'};
	signed char Local_u8Counter;
	u32 Local_u32Temp=*Copy_u8pNumber ;
	for (Local_u8Counter=0 ; Local_u8Counter <10 ;Local_u8Counter++)
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	8a 30       	cpi	r24, 0x0A	; 10
    2ef0:	0c f4       	brge	.+2      	; 0x2ef4 <LCD_vidWriteNumber+0xee>
    2ef2:	ad cf       	rjmp	.-166    	; 0x2e4e <LCD_vidWriteNumber+0x48>
    2ef4:	11 c0       	rjmp	.+34     	; 0x2f18 <LCD_vidWriteNumber+0x112>
		else{;}
	}

	while (Local_u8Counter>=0)
	{
		LCD_VidWriteCharacter(Local_u8ARR[ Local_u8Counter] +48) ;
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	28 2f       	mov	r18, r24
    2efa:	33 27       	eor	r19, r19
    2efc:	27 fd       	sbrc	r18, 7
    2efe:	30 95       	com	r19
    2f00:	ce 01       	movw	r24, r28
    2f02:	06 96       	adiw	r24, 0x06	; 6
    2f04:	fc 01       	movw	r30, r24
    2f06:	e2 0f       	add	r30, r18
    2f08:	f3 1f       	adc	r31, r19
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 5d       	subi	r24, 0xD0	; 208
    2f0e:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_VidWriteCharacter>
		Local_u8Counter--;
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	81 50       	subi	r24, 0x01	; 1
    2f16:	8d 83       	std	Y+5, r24	; 0x05
			break;
		}
		else{;}
	}

	while (Local_u8Counter>=0)
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	88 23       	and	r24, r24
    2f1c:	64 f7       	brge	.-40     	; 0x2ef6 <LCD_vidWriteNumber+0xf0>
	{
		LCD_VidWriteCharacter(Local_u8ARR[ Local_u8Counter] +48) ;
		Local_u8Counter--;

	}
}
    2f1e:	61 96       	adiw	r28, 0x11	; 17
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	1f 91       	pop	r17
    2f30:	0f 91       	pop	r16
    2f32:	08 95       	ret

00002f34 <__udivmodsi4>:
    2f34:	a1 e2       	ldi	r26, 0x21	; 33
    2f36:	1a 2e       	mov	r1, r26
    2f38:	aa 1b       	sub	r26, r26
    2f3a:	bb 1b       	sub	r27, r27
    2f3c:	fd 01       	movw	r30, r26
    2f3e:	0d c0       	rjmp	.+26     	; 0x2f5a <__udivmodsi4_ep>

00002f40 <__udivmodsi4_loop>:
    2f40:	aa 1f       	adc	r26, r26
    2f42:	bb 1f       	adc	r27, r27
    2f44:	ee 1f       	adc	r30, r30
    2f46:	ff 1f       	adc	r31, r31
    2f48:	a2 17       	cp	r26, r18
    2f4a:	b3 07       	cpc	r27, r19
    2f4c:	e4 07       	cpc	r30, r20
    2f4e:	f5 07       	cpc	r31, r21
    2f50:	20 f0       	brcs	.+8      	; 0x2f5a <__udivmodsi4_ep>
    2f52:	a2 1b       	sub	r26, r18
    2f54:	b3 0b       	sbc	r27, r19
    2f56:	e4 0b       	sbc	r30, r20
    2f58:	f5 0b       	sbc	r31, r21

00002f5a <__udivmodsi4_ep>:
    2f5a:	66 1f       	adc	r22, r22
    2f5c:	77 1f       	adc	r23, r23
    2f5e:	88 1f       	adc	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	1a 94       	dec	r1
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <__udivmodsi4_loop>
    2f66:	60 95       	com	r22
    2f68:	70 95       	com	r23
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	9b 01       	movw	r18, r22
    2f70:	ac 01       	movw	r20, r24
    2f72:	bd 01       	movw	r22, r26
    2f74:	cf 01       	movw	r24, r30
    2f76:	08 95       	ret

00002f78 <__prologue_saves__>:
    2f78:	2f 92       	push	r2
    2f7a:	3f 92       	push	r3
    2f7c:	4f 92       	push	r4
    2f7e:	5f 92       	push	r5
    2f80:	6f 92       	push	r6
    2f82:	7f 92       	push	r7
    2f84:	8f 92       	push	r8
    2f86:	9f 92       	push	r9
    2f88:	af 92       	push	r10
    2f8a:	bf 92       	push	r11
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	ca 1b       	sub	r28, r26
    2fa2:	db 0b       	sbc	r29, r27
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	09 94       	ijmp

00002fb0 <__epilogue_restores__>:
    2fb0:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb2:	39 88       	ldd	r3, Y+17	; 0x11
    2fb4:	48 88       	ldd	r4, Y+16	; 0x10
    2fb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fba:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fc6:	df 80       	ldd	r13, Y+7	; 0x07
    2fc8:	ee 80       	ldd	r14, Y+6	; 0x06
    2fca:	fd 80       	ldd	r15, Y+5	; 0x05
    2fcc:	0c 81       	ldd	r16, Y+4	; 0x04
    2fce:	1b 81       	ldd	r17, Y+3	; 0x03
    2fd0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd4:	ce 0f       	add	r28, r30
    2fd6:	d1 1d       	adc	r29, r1
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	ed 01       	movw	r28, r26
    2fe4:	08 95       	ret

00002fe6 <floor>:
    2fe6:	3b d0       	rcall	.+118    	; 0x305e <__fp_trunc>
    2fe8:	80 f0       	brcs	.+32     	; 0x300a <floor+0x24>
    2fea:	9f 37       	cpi	r25, 0x7F	; 127
    2fec:	40 f4       	brcc	.+16     	; 0x2ffe <floor+0x18>
    2fee:	91 11       	cpse	r25, r1
    2ff0:	0e f0       	brts	.+2      	; 0x2ff4 <floor+0xe>
    2ff2:	4d c0       	rjmp	.+154    	; 0x308e <__fp_szero>
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	80 e8       	ldi	r24, 0x80	; 128
    2ffa:	9f eb       	ldi	r25, 0xBF	; 191
    2ffc:	08 95       	ret
    2ffe:	26 f4       	brtc	.+8      	; 0x3008 <floor+0x22>
    3000:	1b 16       	cp	r1, r27
    3002:	61 1d       	adc	r22, r1
    3004:	71 1d       	adc	r23, r1
    3006:	81 1d       	adc	r24, r1
    3008:	01 c0       	rjmp	.+2      	; 0x300c <__fp_mintl>
    300a:	1b c0       	rjmp	.+54     	; 0x3042 <__fp_mpack>

0000300c <__fp_mintl>:
    300c:	88 23       	and	r24, r24
    300e:	71 f4       	brne	.+28     	; 0x302c <__fp_mintl+0x20>
    3010:	77 23       	and	r23, r23
    3012:	21 f0       	breq	.+8      	; 0x301c <__fp_mintl+0x10>
    3014:	98 50       	subi	r25, 0x08	; 8
    3016:	87 2b       	or	r24, r23
    3018:	76 2f       	mov	r23, r22
    301a:	07 c0       	rjmp	.+14     	; 0x302a <__fp_mintl+0x1e>
    301c:	66 23       	and	r22, r22
    301e:	11 f4       	brne	.+4      	; 0x3024 <__fp_mintl+0x18>
    3020:	99 27       	eor	r25, r25
    3022:	0d c0       	rjmp	.+26     	; 0x303e <__fp_mintl+0x32>
    3024:	90 51       	subi	r25, 0x10	; 16
    3026:	86 2b       	or	r24, r22
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	60 e0       	ldi	r22, 0x00	; 0
    302c:	2a f0       	brmi	.+10     	; 0x3038 <__fp_mintl+0x2c>
    302e:	9a 95       	dec	r25
    3030:	66 0f       	add	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	da f7       	brpl	.-10     	; 0x302e <__fp_mintl+0x22>
    3038:	88 0f       	add	r24, r24
    303a:	96 95       	lsr	r25
    303c:	87 95       	ror	r24
    303e:	97 f9       	bld	r25, 7
    3040:	08 95       	ret

00003042 <__fp_mpack>:
    3042:	9f 3f       	cpi	r25, 0xFF	; 255
    3044:	31 f0       	breq	.+12     	; 0x3052 <__fp_mpack_finite+0xc>

00003046 <__fp_mpack_finite>:
    3046:	91 50       	subi	r25, 0x01	; 1
    3048:	20 f4       	brcc	.+8      	; 0x3052 <__fp_mpack_finite+0xc>
    304a:	87 95       	ror	r24
    304c:	77 95       	ror	r23
    304e:	67 95       	ror	r22
    3050:	b7 95       	ror	r27
    3052:	88 0f       	add	r24, r24
    3054:	91 1d       	adc	r25, r1
    3056:	96 95       	lsr	r25
    3058:	87 95       	ror	r24
    305a:	97 f9       	bld	r25, 7
    305c:	08 95       	ret

0000305e <__fp_trunc>:
    305e:	25 d0       	rcall	.+74     	; 0x30aa <__fp_splitA>
    3060:	a0 f0       	brcs	.+40     	; 0x308a <__fp_trunc+0x2c>
    3062:	be e7       	ldi	r27, 0x7E	; 126
    3064:	b9 17       	cp	r27, r25
    3066:	88 f4       	brcc	.+34     	; 0x308a <__fp_trunc+0x2c>
    3068:	bb 27       	eor	r27, r27
    306a:	9f 38       	cpi	r25, 0x8F	; 143
    306c:	60 f4       	brcc	.+24     	; 0x3086 <__fp_trunc+0x28>
    306e:	16 16       	cp	r1, r22
    3070:	b1 1d       	adc	r27, r1
    3072:	67 2f       	mov	r22, r23
    3074:	78 2f       	mov	r23, r24
    3076:	88 27       	eor	r24, r24
    3078:	98 5f       	subi	r25, 0xF8	; 248
    307a:	f7 cf       	rjmp	.-18     	; 0x306a <__fp_trunc+0xc>
    307c:	86 95       	lsr	r24
    307e:	77 95       	ror	r23
    3080:	67 95       	ror	r22
    3082:	b1 1d       	adc	r27, r1
    3084:	93 95       	inc	r25
    3086:	96 39       	cpi	r25, 0x96	; 150
    3088:	c8 f3       	brcs	.-14     	; 0x307c <__fp_trunc+0x1e>
    308a:	08 95       	ret

0000308c <__fp_zero>:
    308c:	e8 94       	clt

0000308e <__fp_szero>:
    308e:	bb 27       	eor	r27, r27
    3090:	66 27       	eor	r22, r22
    3092:	77 27       	eor	r23, r23
    3094:	cb 01       	movw	r24, r22
    3096:	97 f9       	bld	r25, 7
    3098:	08 95       	ret

0000309a <__fp_split3>:
    309a:	57 fd       	sbrc	r21, 7
    309c:	90 58       	subi	r25, 0x80	; 128
    309e:	44 0f       	add	r20, r20
    30a0:	55 1f       	adc	r21, r21
    30a2:	59 f0       	breq	.+22     	; 0x30ba <__fp_splitA+0x10>
    30a4:	5f 3f       	cpi	r21, 0xFF	; 255
    30a6:	71 f0       	breq	.+28     	; 0x30c4 <__fp_splitA+0x1a>
    30a8:	47 95       	ror	r20

000030aa <__fp_splitA>:
    30aa:	88 0f       	add	r24, r24
    30ac:	97 fb       	bst	r25, 7
    30ae:	99 1f       	adc	r25, r25
    30b0:	61 f0       	breq	.+24     	; 0x30ca <__fp_splitA+0x20>
    30b2:	9f 3f       	cpi	r25, 0xFF	; 255
    30b4:	79 f0       	breq	.+30     	; 0x30d4 <__fp_splitA+0x2a>
    30b6:	87 95       	ror	r24
    30b8:	08 95       	ret
    30ba:	12 16       	cp	r1, r18
    30bc:	13 06       	cpc	r1, r19
    30be:	14 06       	cpc	r1, r20
    30c0:	55 1f       	adc	r21, r21
    30c2:	f2 cf       	rjmp	.-28     	; 0x30a8 <__fp_split3+0xe>
    30c4:	46 95       	lsr	r20
    30c6:	f1 df       	rcall	.-30     	; 0x30aa <__fp_splitA>
    30c8:	08 c0       	rjmp	.+16     	; 0x30da <__fp_splitA+0x30>
    30ca:	16 16       	cp	r1, r22
    30cc:	17 06       	cpc	r1, r23
    30ce:	18 06       	cpc	r1, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	f1 cf       	rjmp	.-30     	; 0x30b6 <__fp_splitA+0xc>
    30d4:	86 95       	lsr	r24
    30d6:	71 05       	cpc	r23, r1
    30d8:	61 05       	cpc	r22, r1
    30da:	08 94       	sec
    30dc:	08 95       	ret

000030de <_exit>:
    30de:	f8 94       	cli

000030e0 <__stop_program>:
    30e0:	ff cf       	rjmp	.-2      	; 0x30e0 <__stop_program>
