
Driver_Trial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ac8  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000092c  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main>
  64:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPortDir>:
#define RT_OK (u8) 0
#define RT_NOK (u8) 1
#define NULL ((void*)0)
// Set direction func for port and pin
u8 DIO_u8SetPortDir(u8 Copy_u8PortNo , u8 Copy_u8Dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPortDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPortDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
  7e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Dir != INPUT && Copy_u8Dir != OUTPUT_PORT )
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 23       	and	r24, r24
  84:	31 f0       	breq	.+12     	; 0x92 <DIO_u8SetPortDir+0x26>
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	8f 3f       	cpi	r24, 0xFF	; 255
  8a:	19 f0       	breq	.+6      	; 0x92 <DIO_u8SetPortDir+0x26>
	{
		Local_u8ErrStatus = RT_NOK;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	35 c0       	rjmp	.+106    	; 0xfc <DIO_u8SetPortDir+0x90>
	}
	else{
		switch( Copy_u8PortNo )
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	28 2f       	mov	r18, r24
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	3d 83       	std	Y+5, r19	; 0x05
  9a:	2c 83       	std	Y+4, r18	; 0x04
  9c:	8c 81       	ldd	r24, Y+4	; 0x04
  9e:	9d 81       	ldd	r25, Y+5	; 0x05
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	d1 f0       	breq	.+52     	; 0xda <DIO_u8SetPortDir+0x6e>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <DIO_u8SetPortDir+0x4e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	61 f0       	breq	.+24     	; 0xd0 <DIO_u8SetPortDir+0x64>
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <DIO_u8SetPortDir+0x8c>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	81 f0       	breq	.+32     	; 0xe4 <DIO_u8SetPortDir+0x78>
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	9d 81       	ldd	r25, Y+5	; 0x05
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	81 f0       	breq	.+32     	; 0xee <DIO_u8SetPortDir+0x82>
  ce:	14 c0       	rjmp	.+40     	; 0xf8 <DIO_u8SetPortDir+0x8c>
		{
			case PORT_A: DDRA_REG = Copy_u8Dir; break;
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	80 83       	st	Z, r24
  d8:	11 c0       	rjmp	.+34     	; 0xfc <DIO_u8SetPortDir+0x90>
			case PORT_B: DDRB_REG = Copy_u8Dir; break;
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	80 83       	st	Z, r24
  e2:	0c c0       	rjmp	.+24     	; 0xfc <DIO_u8SetPortDir+0x90>
			case PORT_C: DDRC_REG = Copy_u8Dir; break;
  e4:	e4 e3       	ldi	r30, 0x34	; 52
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	80 83       	st	Z, r24
  ec:	07 c0       	rjmp	.+14     	; 0xfc <DIO_u8SetPortDir+0x90>
			case PORT_D: DDRD_REG = Copy_u8Dir; break;
  ee:	e1 e3       	ldi	r30, 0x31	; 49
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	80 83       	st	Z, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_u8SetPortDir+0x90>
			default: Local_u8ErrStatus = RT_NOK;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return (Local_u8ErrStatus);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(u8 Copy_u8PortNo , u8 Copy_u8PinNo ,u8 Copy_u8Dir)
{
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	28 97       	sbiw	r28, 0x08	; 8
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	8a 83       	std	Y+2, r24	; 0x02
 124:	6b 83       	std	Y+3, r22	; 0x03
 126:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 128:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= PIN_7)
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	84 30       	cpi	r24, 0x04	; 4
 12e:	08 f0       	brcs	.+2      	; 0x132 <DIO_u8SetPinDir+0x24>
 130:	f2 c0       	rjmp	.+484    	; 0x316 <DIO_u8SetPinDir+0x208>
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	08 f0       	brcs	.+2      	; 0x13a <DIO_u8SetPinDir+0x2c>
 138:	ee c0       	rjmp	.+476    	; 0x316 <DIO_u8SetPinDir+0x208>
	{
		if(Copy_u8Dir == INPUT)
 13a:	8c 81       	ldd	r24, Y+4	; 0x04
 13c:	88 23       	and	r24, r24
 13e:	09 f0       	breq	.+2      	; 0x142 <DIO_u8SetPinDir+0x34>
 140:	74 c0       	rjmp	.+232    	; 0x22a <DIO_u8SetPinDir+0x11c>
		{
			switch(Copy_u8PortNo)
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	38 87       	std	Y+8, r19	; 0x08
 14a:	2f 83       	std	Y+7, r18	; 0x07
 14c:	8f 81       	ldd	r24, Y+7	; 0x07
 14e:	98 85       	ldd	r25, Y+8	; 0x08
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	59 f1       	breq	.+86     	; 0x1ac <DIO_u8SetPinDir+0x9e>
 156:	2f 81       	ldd	r18, Y+7	; 0x07
 158:	38 85       	ldd	r19, Y+8	; 0x08
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	31 05       	cpc	r19, r1
 15e:	2c f4       	brge	.+10     	; 0x16a <DIO_u8SetPinDir+0x5c>
 160:	8f 81       	ldd	r24, Y+7	; 0x07
 162:	98 85       	ldd	r25, Y+8	; 0x08
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	69 f0       	breq	.+26     	; 0x182 <DIO_u8SetPinDir+0x74>
 168:	d8 c0       	rjmp	.+432    	; 0x31a <DIO_u8SetPinDir+0x20c>
 16a:	2f 81       	ldd	r18, Y+7	; 0x07
 16c:	38 85       	ldd	r19, Y+8	; 0x08
 16e:	22 30       	cpi	r18, 0x02	; 2
 170:	31 05       	cpc	r19, r1
 172:	89 f1       	breq	.+98     	; 0x1d6 <DIO_u8SetPinDir+0xc8>
 174:	8f 81       	ldd	r24, Y+7	; 0x07
 176:	98 85       	ldd	r25, Y+8	; 0x08
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	91 05       	cpc	r25, r1
 17c:	09 f4       	brne	.+2      	; 0x180 <DIO_u8SetPinDir+0x72>
 17e:	40 c0       	rjmp	.+128    	; 0x200 <DIO_u8SetPinDir+0xf2>
 180:	cc c0       	rjmp	.+408    	; 0x31a <DIO_u8SetPinDir+0x20c>
			{
			case PORT_A: CLR_BIT(DDRA_REG,Copy_u8PinNo); break;
 182:	aa e3       	ldi	r26, 0x3A	; 58
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea e3       	ldi	r30, 0x3A	; 58
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	48 2f       	mov	r20, r24
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 2e       	mov	r0, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_u8SetPinDir+0x92>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_u8SetPinDir+0x8e>
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	8c 93       	st	X, r24
 1aa:	b7 c0       	rjmp	.+366    	; 0x31a <DIO_u8SetPinDir+0x20c>
			case PORT_B: CLR_BIT(DDRB_REG,Copy_u8PinNo); break;
 1ac:	a7 e3       	ldi	r26, 0x37	; 55
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e7 e3       	ldi	r30, 0x37	; 55
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_u8SetPinDir+0xbc>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_u8SetPinDir+0xb8>
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	a2 c0       	rjmp	.+324    	; 0x31a <DIO_u8SetPinDir+0x20c>
			case PORT_C: CLR_BIT(DDRC_REG,Copy_u8PinNo); break;
 1d6:	a4 e3       	ldi	r26, 0x34	; 52
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e4 e3       	ldi	r30, 0x34	; 52
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_u8SetPinDir+0xe6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_u8SetPinDir+0xe2>
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	8d c0       	rjmp	.+282    	; 0x31a <DIO_u8SetPinDir+0x20c>
			case PORT_D: CLR_BIT(DDRD_REG,Copy_u8PinNo); break;
 200:	a1 e3       	ldi	r26, 0x31	; 49
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e1 e3       	ldi	r30, 0x31	; 49
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinDir+0x110>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_u8SetPinDir+0x10c>
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	8c 93       	st	X, r24
 228:	78 c0       	rjmp	.+240    	; 0x31a <DIO_u8SetPinDir+0x20c>
			}
		}
		else if (Copy_u8Dir == OUTPUT)
 22a:	8c 81       	ldd	r24, Y+4	; 0x04
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	09 f0       	breq	.+2      	; 0x232 <DIO_u8SetPinDir+0x124>
 230:	6f c0       	rjmp	.+222    	; 0x310 <DIO_u8SetPinDir+0x202>
		{
			switch(Copy_u8PortNo)
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	3e 83       	std	Y+6, r19	; 0x06
 23a:	2d 83       	std	Y+5, r18	; 0x05
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	9e 81       	ldd	r25, Y+6	; 0x06
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	49 f1       	breq	.+82     	; 0x298 <DIO_u8SetPinDir+0x18a>
 246:	2d 81       	ldd	r18, Y+5	; 0x05
 248:	3e 81       	ldd	r19, Y+6	; 0x06
 24a:	22 30       	cpi	r18, 0x02	; 2
 24c:	31 05       	cpc	r19, r1
 24e:	2c f4       	brge	.+10     	; 0x25a <DIO_u8SetPinDir+0x14c>
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	9e 81       	ldd	r25, Y+6	; 0x06
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	61 f0       	breq	.+24     	; 0x270 <DIO_u8SetPinDir+0x162>
 258:	60 c0       	rjmp	.+192    	; 0x31a <DIO_u8SetPinDir+0x20c>
 25a:	2d 81       	ldd	r18, Y+5	; 0x05
 25c:	3e 81       	ldd	r19, Y+6	; 0x06
 25e:	22 30       	cpi	r18, 0x02	; 2
 260:	31 05       	cpc	r19, r1
 262:	71 f1       	breq	.+92     	; 0x2c0 <DIO_u8SetPinDir+0x1b2>
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	9e 81       	ldd	r25, Y+6	; 0x06
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	91 05       	cpc	r25, r1
 26c:	e9 f1       	breq	.+122    	; 0x2e8 <DIO_u8SetPinDir+0x1da>
 26e:	55 c0       	rjmp	.+170    	; 0x31a <DIO_u8SetPinDir+0x20c>
			{
    		case PORT_A: SET_BIT(DDRA_REG,Copy_u8PinNo); break;
 270:	aa e3       	ldi	r26, 0x3A	; 58
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	ea e3       	ldi	r30, 0x3A	; 58
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	48 2f       	mov	r20, r24
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 2e       	mov	r0, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8SetPinDir+0x180>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_u8SetPinDir+0x17c>
 292:	84 2b       	or	r24, r20
 294:	8c 93       	st	X, r24
 296:	41 c0       	rjmp	.+130    	; 0x31a <DIO_u8SetPinDir+0x20c>
            case PORT_B: SET_BIT(DDRB_REG,Copy_u8PinNo); break;
 298:	a7 e3       	ldi	r26, 0x37	; 55
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e7 e3       	ldi	r30, 0x37	; 55
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_u8SetPinDir+0x1a8>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_u8SetPinDir+0x1a4>
 2ba:	84 2b       	or	r24, r20
 2bc:	8c 93       	st	X, r24
 2be:	2d c0       	rjmp	.+90     	; 0x31a <DIO_u8SetPinDir+0x20c>
            case PORT_C: SET_BIT(DDRC_REG,Copy_u8PinNo); break;
 2c0:	a4 e3       	ldi	r26, 0x34	; 52
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	e4 e3       	ldi	r30, 0x34	; 52
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	48 2f       	mov	r20, r24
 2cc:	8b 81       	ldd	r24, Y+3	; 0x03
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_u8SetPinDir+0x1d0>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_u8SetPinDir+0x1cc>
 2e2:	84 2b       	or	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	19 c0       	rjmp	.+50     	; 0x31a <DIO_u8SetPinDir+0x20c>
            case PORT_D: SET_BIT(DDRD_REG,Copy_u8PinNo); break;
 2e8:	a1 e3       	ldi	r26, 0x31	; 49
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e1 e3       	ldi	r30, 0x31	; 49
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8SetPinDir+0x1f8>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8SetPinDir+0x1f4>
 30a:	84 2b       	or	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	05 c0       	rjmp	.+10     	; 0x31a <DIO_u8SetPinDir+0x20c>
     		}
		}
		else{Local_u8ErrStatus = RT_NOK;}
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8SetPinDir+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus);
 31a:	89 81       	ldd	r24, Y+1	; 0x01
}
 31c:	28 96       	adiw	r28, 0x08	; 8
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <DIO_u8SetPortVal>:

// SET func for port and pin

u8 DIO_u8SetPortVal(u8 Copy_u8PortNo , u8 Copy_u8Val)
{
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	00 d0       	rcall	.+0      	; 0x334 <DIO_u8SetPortVal+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <DIO_u8SetPortVal+0x8>
 336:	0f 92       	push	r0
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	8a 83       	std	Y+2, r24	; 0x02
 33e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
 340:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Val == LOW || Copy_u8Val == HIGH_PORT)
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	88 23       	and	r24, r24
 346:	19 f0       	breq	.+6      	; 0x34e <DIO_u8SetPortVal+0x20>
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	8f 3f       	cpi	r24, 0xFF	; 255
 34c:	b1 f5       	brne	.+108    	; 0x3ba <DIO_u8SetPortVal+0x8c>
	{
		switch( Copy_u8PortNo )
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3d 83       	std	Y+5, r19	; 0x05
 356:	2c 83       	std	Y+4, r18	; 0x04
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	9d 81       	ldd	r25, Y+5	; 0x05
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	d1 f0       	breq	.+52     	; 0x396 <DIO_u8SetPortVal+0x68>
 362:	2c 81       	ldd	r18, Y+4	; 0x04
 364:	3d 81       	ldd	r19, Y+5	; 0x05
 366:	22 30       	cpi	r18, 0x02	; 2
 368:	31 05       	cpc	r19, r1
 36a:	2c f4       	brge	.+10     	; 0x376 <DIO_u8SetPortVal+0x48>
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	9d 81       	ldd	r25, Y+5	; 0x05
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	61 f0       	breq	.+24     	; 0x38c <DIO_u8SetPortVal+0x5e>
 374:	1f c0       	rjmp	.+62     	; 0x3b4 <DIO_u8SetPortVal+0x86>
 376:	2c 81       	ldd	r18, Y+4	; 0x04
 378:	3d 81       	ldd	r19, Y+5	; 0x05
 37a:	22 30       	cpi	r18, 0x02	; 2
 37c:	31 05       	cpc	r19, r1
 37e:	81 f0       	breq	.+32     	; 0x3a0 <DIO_u8SetPortVal+0x72>
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	9d 81       	ldd	r25, Y+5	; 0x05
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	91 05       	cpc	r25, r1
 388:	81 f0       	breq	.+32     	; 0x3aa <DIO_u8SetPortVal+0x7c>
 38a:	14 c0       	rjmp	.+40     	; 0x3b4 <DIO_u8SetPortVal+0x86>
		{
			case PORT_A: PORTA_REG = Copy_u8Val; break;
 38c:	eb e3       	ldi	r30, 0x3B	; 59
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	80 83       	st	Z, r24
 394:	14 c0       	rjmp	.+40     	; 0x3be <DIO_u8SetPortVal+0x90>
		    case PORT_B: PORTB_REG = Copy_u8Val; break;
 396:	e8 e3       	ldi	r30, 0x38	; 56
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	80 83       	st	Z, r24
 39e:	0f c0       	rjmp	.+30     	; 0x3be <DIO_u8SetPortVal+0x90>
		    case PORT_C: PORTC_REG = Copy_u8Val; break;
 3a0:	e5 e3       	ldi	r30, 0x35	; 53
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	80 83       	st	Z, r24
 3a8:	0a c0       	rjmp	.+20     	; 0x3be <DIO_u8SetPortVal+0x90>
		    case PORT_D: PORTD_REG = Copy_u8Val; break;
 3aa:	e2 e3       	ldi	r30, 0x32	; 50
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	80 83       	st	Z, r24
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <DIO_u8SetPortVal+0x90>
		    default: Local_u8ErrStatus = RT_NOK;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_u8SetPortVal+0x90>
		}
	}
	else{Local_u8ErrStatus = RT_NOK;}
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	89 83       	std	Y+1, r24	; 0x01

	return (Local_u8ErrStatus);
 3be:	89 81       	ldd	r24, Y+1	; 0x01

}
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	08 95       	ret

000003d0 <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 Copy_u8Val)
{
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	28 97       	sbiw	r28, 0x08	; 8
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	8a 83       	std	Y+2, r24	; 0x02
 3e6:	6b 83       	std	Y+3, r22	; 0x03
 3e8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 3ea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <DIO_u8SetPinVal+0x24>
 3f2:	f2 c0       	rjmp	.+484    	; 0x5d8 <DIO_u8SetPinVal+0x208>
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	88 30       	cpi	r24, 0x08	; 8
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <DIO_u8SetPinVal+0x2c>
 3fa:	ee c0       	rjmp	.+476    	; 0x5d8 <DIO_u8SetPinVal+0x208>
	{
		if(Copy_u8Val == LOW )
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	88 23       	and	r24, r24
 400:	09 f0       	breq	.+2      	; 0x404 <DIO_u8SetPinVal+0x34>
 402:	74 c0       	rjmp	.+232    	; 0x4ec <DIO_u8SetPinVal+0x11c>
		{
            switch(Copy_u8PortNo)
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	38 87       	std	Y+8, r19	; 0x08
 40c:	2f 83       	std	Y+7, r18	; 0x07
 40e:	8f 81       	ldd	r24, Y+7	; 0x07
 410:	98 85       	ldd	r25, Y+8	; 0x08
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	91 05       	cpc	r25, r1
 416:	59 f1       	breq	.+86     	; 0x46e <DIO_u8SetPinVal+0x9e>
 418:	2f 81       	ldd	r18, Y+7	; 0x07
 41a:	38 85       	ldd	r19, Y+8	; 0x08
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	31 05       	cpc	r19, r1
 420:	2c f4       	brge	.+10     	; 0x42c <DIO_u8SetPinVal+0x5c>
 422:	8f 81       	ldd	r24, Y+7	; 0x07
 424:	98 85       	ldd	r25, Y+8	; 0x08
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	69 f0       	breq	.+26     	; 0x444 <DIO_u8SetPinVal+0x74>
 42a:	d8 c0       	rjmp	.+432    	; 0x5dc <DIO_u8SetPinVal+0x20c>
 42c:	2f 81       	ldd	r18, Y+7	; 0x07
 42e:	38 85       	ldd	r19, Y+8	; 0x08
 430:	22 30       	cpi	r18, 0x02	; 2
 432:	31 05       	cpc	r19, r1
 434:	89 f1       	breq	.+98     	; 0x498 <DIO_u8SetPinVal+0xc8>
 436:	8f 81       	ldd	r24, Y+7	; 0x07
 438:	98 85       	ldd	r25, Y+8	; 0x08
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	91 05       	cpc	r25, r1
 43e:	09 f4       	brne	.+2      	; 0x442 <DIO_u8SetPinVal+0x72>
 440:	40 c0       	rjmp	.+128    	; 0x4c2 <DIO_u8SetPinVal+0xf2>
 442:	cc c0       	rjmp	.+408    	; 0x5dc <DIO_u8SetPinVal+0x20c>
            {
            case PORT_A: CLR_BIT(PORTA_REG,Copy_u8PinNo); break;
 444:	ab e3       	ldi	r26, 0x3B	; 59
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	eb e3       	ldi	r30, 0x3B	; 59
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	48 2f       	mov	r20, r24
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 2e       	mov	r0, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_u8SetPinVal+0x92>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_u8SetPinVal+0x8e>
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	8c 93       	st	X, r24
 46c:	b7 c0       	rjmp	.+366    	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_B: CLR_BIT(PORTB_REG,Copy_u8PinNo); break;
 46e:	a8 e3       	ldi	r26, 0x38	; 56
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e8 e3       	ldi	r30, 0x38	; 56
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	48 2f       	mov	r20, r24
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	28 2f       	mov	r18, r24
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 2e       	mov	r0, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_u8SetPinVal+0xbc>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_u8SetPinVal+0xb8>
 490:	80 95       	com	r24
 492:	84 23       	and	r24, r20
 494:	8c 93       	st	X, r24
 496:	a2 c0       	rjmp	.+324    	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_C: CLR_BIT(PORTC_REG,Copy_u8PinNo); break;
 498:	a5 e3       	ldi	r26, 0x35	; 53
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e5 e3       	ldi	r30, 0x35	; 53
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 2e       	mov	r0, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_u8SetPinVal+0xe6>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_u8SetPinVal+0xe2>
 4ba:	80 95       	com	r24
 4bc:	84 23       	and	r24, r20
 4be:	8c 93       	st	X, r24
 4c0:	8d c0       	rjmp	.+282    	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_D: CLR_BIT(PORTD_REG,Copy_u8PinNo); break;
 4c2:	a2 e3       	ldi	r26, 0x32	; 50
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e2 e3       	ldi	r30, 0x32	; 50
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	48 2f       	mov	r20, r24
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_u8SetPinVal+0x110>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_u8SetPinVal+0x10c>
 4e4:	80 95       	com	r24
 4e6:	84 23       	and	r24, r20
 4e8:	8c 93       	st	X, r24
 4ea:	78 c0       	rjmp	.+240    	; 0x5dc <DIO_u8SetPinVal+0x20c>
            }
		}
		else if ( Copy_u8Val == HIGH)
 4ec:	8c 81       	ldd	r24, Y+4	; 0x04
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <DIO_u8SetPinVal+0x124>
 4f2:	6f c0       	rjmp	.+222    	; 0x5d2 <DIO_u8SetPinVal+0x202>
		{
			switch(Copy_u8PortNo)
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	3e 83       	std	Y+6, r19	; 0x06
 4fc:	2d 83       	std	Y+5, r18	; 0x05
 4fe:	8d 81       	ldd	r24, Y+5	; 0x05
 500:	9e 81       	ldd	r25, Y+6	; 0x06
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	91 05       	cpc	r25, r1
 506:	49 f1       	breq	.+82     	; 0x55a <DIO_u8SetPinVal+0x18a>
 508:	2d 81       	ldd	r18, Y+5	; 0x05
 50a:	3e 81       	ldd	r19, Y+6	; 0x06
 50c:	22 30       	cpi	r18, 0x02	; 2
 50e:	31 05       	cpc	r19, r1
 510:	2c f4       	brge	.+10     	; 0x51c <DIO_u8SetPinVal+0x14c>
 512:	8d 81       	ldd	r24, Y+5	; 0x05
 514:	9e 81       	ldd	r25, Y+6	; 0x06
 516:	00 97       	sbiw	r24, 0x00	; 0
 518:	61 f0       	breq	.+24     	; 0x532 <DIO_u8SetPinVal+0x162>
 51a:	60 c0       	rjmp	.+192    	; 0x5dc <DIO_u8SetPinVal+0x20c>
 51c:	2d 81       	ldd	r18, Y+5	; 0x05
 51e:	3e 81       	ldd	r19, Y+6	; 0x06
 520:	22 30       	cpi	r18, 0x02	; 2
 522:	31 05       	cpc	r19, r1
 524:	71 f1       	breq	.+92     	; 0x582 <DIO_u8SetPinVal+0x1b2>
 526:	8d 81       	ldd	r24, Y+5	; 0x05
 528:	9e 81       	ldd	r25, Y+6	; 0x06
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	91 05       	cpc	r25, r1
 52e:	e9 f1       	breq	.+122    	; 0x5aa <DIO_u8SetPinVal+0x1da>
 530:	55 c0       	rjmp	.+170    	; 0x5dc <DIO_u8SetPinVal+0x20c>
		    {
            case PORT_A: SET_BIT(PORTA_REG,Copy_u8PinNo); break;
 532:	ab e3       	ldi	r26, 0x3B	; 59
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	eb e3       	ldi	r30, 0x3B	; 59
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	48 2f       	mov	r20, r24
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 2e       	mov	r0, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_u8SetPinVal+0x180>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_u8SetPinVal+0x17c>
 554:	84 2b       	or	r24, r20
 556:	8c 93       	st	X, r24
 558:	41 c0       	rjmp	.+130    	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_B: SET_BIT(PORTB_REG,Copy_u8PinNo); break;
 55a:	a8 e3       	ldi	r26, 0x38	; 56
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e8 e3       	ldi	r30, 0x38	; 56
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8SetPinVal+0x1a8>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8SetPinVal+0x1a4>
 57c:	84 2b       	or	r24, r20
 57e:	8c 93       	st	X, r24
 580:	2d c0       	rjmp	.+90     	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_C: SET_BIT(PORTC_REG,Copy_u8PinNo); break;
 582:	a5 e3       	ldi	r26, 0x35	; 53
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e5 e3       	ldi	r30, 0x35	; 53
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinVal+0x1d0>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8SetPinVal+0x1cc>
 5a4:	84 2b       	or	r24, r20
 5a6:	8c 93       	st	X, r24
 5a8:	19 c0       	rjmp	.+50     	; 0x5dc <DIO_u8SetPinVal+0x20c>
			case PORT_D: SET_BIT(PORTD_REG,Copy_u8PinNo); break;
 5aa:	a2 e3       	ldi	r26, 0x32	; 50
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	e2 e3       	ldi	r30, 0x32	; 50
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 2e       	mov	r0, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8SetPinVal+0x1f8>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8SetPinVal+0x1f4>
 5cc:	84 2b       	or	r24, r20
 5ce:	8c 93       	st	X, r24
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <DIO_u8SetPinVal+0x20c>
			}

		}
		else{Local_u8ErrStatus = RT_NOK;}
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	89 83       	std	Y+1, r24	; 0x01
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_u8SetPinVal+0x20c>
	}
	else{Local_u8ErrStatus = RT_NOK;}
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
	return (Local_u8ErrStatus) ;
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 5de:	28 96       	adiw	r28, 0x08	; 8
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 Copy_u8PortNo , u8 * Copy_u8pVal)
{
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <DIO_u8GetPortVal+0x6>
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <DIO_u8GetPortVal+0x8>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <DIO_u8GetPortVal+0xa>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	8a 83       	std	Y+2, r24	; 0x02
 600:	7c 83       	std	Y+4, r23	; 0x04
 602:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus = RT_OK;
 604:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	9c 81       	ldd	r25, Y+4	; 0x04
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	19 f4       	brne	.+6      	; 0x614 <DIO_u8GetPortVal+0x24>
	{Local_u8ErrStatus = RT_NOK;}
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	3d c0       	rjmp	.+122    	; 0x68e <DIO_u8GetPortVal+0x9e>
	else
	{
		switch( Copy_u8PortNo )
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	3e 83       	std	Y+6, r19	; 0x06
 61c:	2d 83       	std	Y+5, r18	; 0x05
 61e:	8d 81       	ldd	r24, Y+5	; 0x05
 620:	9e 81       	ldd	r25, Y+6	; 0x06
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	91 05       	cpc	r25, r1
 626:	e1 f0       	breq	.+56     	; 0x660 <DIO_u8GetPortVal+0x70>
 628:	2d 81       	ldd	r18, Y+5	; 0x05
 62a:	3e 81       	ldd	r19, Y+6	; 0x06
 62c:	22 30       	cpi	r18, 0x02	; 2
 62e:	31 05       	cpc	r19, r1
 630:	2c f4       	brge	.+10     	; 0x63c <DIO_u8GetPortVal+0x4c>
 632:	8d 81       	ldd	r24, Y+5	; 0x05
 634:	9e 81       	ldd	r25, Y+6	; 0x06
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	61 f0       	breq	.+24     	; 0x652 <DIO_u8GetPortVal+0x62>
 63a:	27 c0       	rjmp	.+78     	; 0x68a <DIO_u8GetPortVal+0x9a>
 63c:	2d 81       	ldd	r18, Y+5	; 0x05
 63e:	3e 81       	ldd	r19, Y+6	; 0x06
 640:	22 30       	cpi	r18, 0x02	; 2
 642:	31 05       	cpc	r19, r1
 644:	a1 f0       	breq	.+40     	; 0x66e <DIO_u8GetPortVal+0x7e>
 646:	8d 81       	ldd	r24, Y+5	; 0x05
 648:	9e 81       	ldd	r25, Y+6	; 0x06
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	91 05       	cpc	r25, r1
 64e:	b1 f0       	breq	.+44     	; 0x67c <DIO_u8GetPortVal+0x8c>
 650:	1c c0       	rjmp	.+56     	; 0x68a <DIO_u8GetPortVal+0x9a>
			{
				case PORT_A: * Copy_u8pVal = PINA_REG ; break;
 652:	e9 e3       	ldi	r30, 0x39	; 57
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	eb 81       	ldd	r30, Y+3	; 0x03
 65a:	fc 81       	ldd	r31, Y+4	; 0x04
 65c:	80 83       	st	Z, r24
 65e:	17 c0       	rjmp	.+46     	; 0x68e <DIO_u8GetPortVal+0x9e>
			    case PORT_B: * Copy_u8pVal = PINB_REG; break;
 660:	e6 e3       	ldi	r30, 0x36	; 54
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	eb 81       	ldd	r30, Y+3	; 0x03
 668:	fc 81       	ldd	r31, Y+4	; 0x04
 66a:	80 83       	st	Z, r24
 66c:	10 c0       	rjmp	.+32     	; 0x68e <DIO_u8GetPortVal+0x9e>
			    case PORT_C: * Copy_u8pVal = PINC_REG; break;
 66e:	e3 e3       	ldi	r30, 0x33	; 51
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	eb 81       	ldd	r30, Y+3	; 0x03
 676:	fc 81       	ldd	r31, Y+4	; 0x04
 678:	80 83       	st	Z, r24
 67a:	09 c0       	rjmp	.+18     	; 0x68e <DIO_u8GetPortVal+0x9e>
			    case PORT_D: * Copy_u8pVal = PIND_REG; break;
 67c:	e0 e3       	ldi	r30, 0x30	; 48
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	eb 81       	ldd	r30, Y+3	; 0x03
 684:	fc 81       	ldd	r31, Y+4	; 0x04
 686:	80 83       	st	Z, r24
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_u8GetPortVal+0x9e>
			    default: Local_u8ErrStatus = RT_NOK; break;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return(Local_u8ErrStatus);
 68e:	89 81       	ldd	r24, Y+1	; 0x01
}
 690:	26 96       	adiw	r28, 0x06	; 6
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	cf 91       	pop	r28
 69e:	df 91       	pop	r29
 6a0:	08 95       	ret

000006a2 <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8PortNo , u8 Copy_u8PinNo , u8 * Copy_u8pVal)
{
 6a2:	df 93       	push	r29
 6a4:	cf 93       	push	r28
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	27 97       	sbiw	r28, 0x07	; 7
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	8a 83       	std	Y+2, r24	; 0x02
 6b8:	6b 83       	std	Y+3, r22	; 0x03
 6ba:	5d 83       	std	Y+5, r21	; 0x05
 6bc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus = RT_OK;
 6be:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pVal == NULL )
 6c0:	8c 81       	ldd	r24, Y+4	; 0x04
 6c2:	9d 81       	ldd	r25, Y+5	; 0x05
 6c4:	00 97       	sbiw	r24, 0x00	; 0
 6c6:	19 f4       	brne	.+6      	; 0x6ce <DIO_u8GetPinVal+0x2c>
	{Local_u8ErrStatus = RT_NOK;}
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	7b c0       	rjmp	.+246    	; 0x7c4 <DIO_u8GetPinVal+0x122>
	else
	{
		if(Copy_u8PortNo <= PORT_D && Copy_u8PinNo <= 7)
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	84 30       	cpi	r24, 0x04	; 4
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <DIO_u8GetPinVal+0x34>
 6d4:	75 c0       	rjmp	.+234    	; 0x7c0 <DIO_u8GetPinVal+0x11e>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	08 f0       	brcs	.+2      	; 0x6de <DIO_u8GetPinVal+0x3c>
 6dc:	71 c0       	rjmp	.+226    	; 0x7c0 <DIO_u8GetPinVal+0x11e>
		{
			switch(Copy_u8PortNo)
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3f 83       	std	Y+7, r19	; 0x07
 6e6:	2e 83       	std	Y+6, r18	; 0x06
 6e8:	4e 81       	ldd	r20, Y+6	; 0x06
 6ea:	5f 81       	ldd	r21, Y+7	; 0x07
 6ec:	41 30       	cpi	r20, 0x01	; 1
 6ee:	51 05       	cpc	r21, r1
 6f0:	59 f1       	breq	.+86     	; 0x748 <DIO_u8GetPinVal+0xa6>
 6f2:	8e 81       	ldd	r24, Y+6	; 0x06
 6f4:	9f 81       	ldd	r25, Y+7	; 0x07
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	91 05       	cpc	r25, r1
 6fa:	34 f4       	brge	.+12     	; 0x708 <DIO_u8GetPinVal+0x66>
 6fc:	2e 81       	ldd	r18, Y+6	; 0x06
 6fe:	3f 81       	ldd	r19, Y+7	; 0x07
 700:	21 15       	cp	r18, r1
 702:	31 05       	cpc	r19, r1
 704:	69 f0       	breq	.+26     	; 0x720 <DIO_u8GetPinVal+0x7e>
 706:	5e c0       	rjmp	.+188    	; 0x7c4 <DIO_u8GetPinVal+0x122>
 708:	4e 81       	ldd	r20, Y+6	; 0x06
 70a:	5f 81       	ldd	r21, Y+7	; 0x07
 70c:	42 30       	cpi	r20, 0x02	; 2
 70e:	51 05       	cpc	r21, r1
 710:	79 f1       	breq	.+94     	; 0x770 <DIO_u8GetPinVal+0xce>
 712:	8e 81       	ldd	r24, Y+6	; 0x06
 714:	9f 81       	ldd	r25, Y+7	; 0x07
 716:	83 30       	cpi	r24, 0x03	; 3
 718:	91 05       	cpc	r25, r1
 71a:	09 f4       	brne	.+2      	; 0x71e <DIO_u8GetPinVal+0x7c>
 71c:	3d c0       	rjmp	.+122    	; 0x798 <DIO_u8GetPinVal+0xf6>
 71e:	52 c0       	rjmp	.+164    	; 0x7c4 <DIO_u8GetPinVal+0x122>
			{
				case PORT_A: * Copy_u8pVal = GET_BIT(PINA_REG , Copy_u8PinNo ); break;
 720:	e9 e3       	ldi	r30, 0x39	; 57
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	28 2f       	mov	r18, r24
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	88 2f       	mov	r24, r24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	a9 01       	movw	r20, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_u8GetPinVal+0x96>
 734:	55 95       	asr	r21
 736:	47 95       	ror	r20
 738:	8a 95       	dec	r24
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_u8GetPinVal+0x92>
 73c:	ca 01       	movw	r24, r20
 73e:	81 70       	andi	r24, 0x01	; 1
 740:	ec 81       	ldd	r30, Y+4	; 0x04
 742:	fd 81       	ldd	r31, Y+5	; 0x05
 744:	80 83       	st	Z, r24
 746:	3e c0       	rjmp	.+124    	; 0x7c4 <DIO_u8GetPinVal+0x122>
				case PORT_B: * Copy_u8pVal = GET_BIT(PINB_REG , Copy_u8PinNo ); break;
 748:	e6 e3       	ldi	r30, 0x36	; 54
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	88 2f       	mov	r24, r24
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	a9 01       	movw	r20, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_u8GetPinVal+0xbe>
 75c:	55 95       	asr	r21
 75e:	47 95       	ror	r20
 760:	8a 95       	dec	r24
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_u8GetPinVal+0xba>
 764:	ca 01       	movw	r24, r20
 766:	81 70       	andi	r24, 0x01	; 1
 768:	ec 81       	ldd	r30, Y+4	; 0x04
 76a:	fd 81       	ldd	r31, Y+5	; 0x05
 76c:	80 83       	st	Z, r24
 76e:	2a c0       	rjmp	.+84     	; 0x7c4 <DIO_u8GetPinVal+0x122>
				case PORT_C: * Copy_u8pVal = GET_BIT(PINC_REG , Copy_u8PinNo ); break;
 770:	e3 e3       	ldi	r30, 0x33	; 51
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	28 2f       	mov	r18, r24
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	8b 81       	ldd	r24, Y+3	; 0x03
 77c:	88 2f       	mov	r24, r24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	a9 01       	movw	r20, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8GetPinVal+0xe6>
 784:	55 95       	asr	r21
 786:	47 95       	ror	r20
 788:	8a 95       	dec	r24
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_u8GetPinVal+0xe2>
 78c:	ca 01       	movw	r24, r20
 78e:	81 70       	andi	r24, 0x01	; 1
 790:	ec 81       	ldd	r30, Y+4	; 0x04
 792:	fd 81       	ldd	r31, Y+5	; 0x05
 794:	80 83       	st	Z, r24
 796:	16 c0       	rjmp	.+44     	; 0x7c4 <DIO_u8GetPinVal+0x122>
				case PORT_D: * Copy_u8pVal = GET_BIT(PIND_REG , Copy_u8PinNo ); break;
 798:	e0 e3       	ldi	r30, 0x30	; 48
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	28 2f       	mov	r18, r24
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	88 2f       	mov	r24, r24
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a9 01       	movw	r20, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_u8GetPinVal+0x10e>
 7ac:	55 95       	asr	r21
 7ae:	47 95       	ror	r20
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_u8GetPinVal+0x10a>
 7b4:	ca 01       	movw	r24, r20
 7b6:	81 70       	andi	r24, 0x01	; 1
 7b8:	ec 81       	ldd	r30, Y+4	; 0x04
 7ba:	fd 81       	ldd	r31, Y+5	; 0x05
 7bc:	80 83       	st	Z, r24
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_u8GetPinVal+0x122>
			}
		}
		else{Local_u8ErrStatus = RT_NOK;}
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Local_u8ErrStatus);
 7c4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7c6:	27 96       	adiw	r28, 0x07	; 7
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <main>:
#include"bitmath.h"
#include "DIO_int.h"
#include"util/delay.h"

void main (void)
{
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	00 d0       	rcall	.+0      	; 0x7de <main+0x6>
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <main+0x8>
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
   		}*/

	while(1)
	{
		u8 pin ,flag;
		u8 *p = &pin;
 7e4:	ce 01       	movw	r24, r28
 7e6:	04 96       	adiw	r24, 0x04	; 4
 7e8:	9a 83       	std	Y+2, r25	; 0x02
 7ea:	89 83       	std	Y+1, r24	; 0x01
		flag = DIO_u8GetPinVal(PORT_C,PIN_0,p);
 7ec:	29 81       	ldd	r18, Y+1	; 0x01
 7ee:	3a 81       	ldd	r19, Y+2	; 0x02
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	a9 01       	movw	r20, r18
 7f6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DIO_u8GetPinVal>
 7fa:	8b 83       	std	Y+3, r24	; 0x03
		if(pin == 0)
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	88 23       	and	r24, r24
 800:	49 f4       	brne	.+18     	; 0x814 <main+0x3c>
		{
			DIO_u8SetPortDir(PORT_D , 255);
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	6f ef       	ldi	r22, 0xFF	; 255
 806:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPortDir>
			DIO_u8SetPortVal(PORT_D,255);
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	6f ef       	ldi	r22, 0xFF	; 255
 80e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_u8SetPortVal>
 812:	e8 cf       	rjmp	.-48     	; 0x7e4 <main+0xc>
		}
		else
		{
			DIO_u8SetPortDir(PORT_D , 255);
 814:	83 e0       	ldi	r24, 0x03	; 3
 816:	6f ef       	ldi	r22, 0xFF	; 255
 818:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPortDir>
			DIO_u8SetPinVal(PORT_D,PIN_0,HIGH);
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_u8SetPinVal>
 826:	de cf       	rjmp	.-68     	; 0x7e4 <main+0xc>

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
